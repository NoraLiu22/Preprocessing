eglgqozcwqxmfsqmmcciponoreekjmveeovgtego length 5 95899 page 95899 

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de" lang="de">

<head id="_masterHeadArea"><meta http-equiv="content-type" content="text/html; charset=utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" /><title>
	Schmetterlinge Deutschland
</title><meta name="author" content="Insekten Hessen" /><meta name="keywords" content="Insekten Hessen" /><link rel="shortcut icon" type="image/x-icon" href="favicon.ico" /><link rel="icon" type="image/x-icon" href="favicon.ico" /><link rel="stylesheet" href="../assets/dist/main.css" />
    <!-- TODO: move to .css -->
    <style>
    </style>
    
    <link type="text/css" href="../Scripts/ol.css" rel="stylesheet" />
    <script type="text/javascript" src="../Scripts/proj4.js"></script>
    <script type="text/javascript" src="../Scripts/ol.js"></script>
    <script type="text/javascript" src="../Scripts/olBiodiv.js"></script>
    <script type="text/javascript" src="/assets/templates/lepide/evidencemap.js"></script>
    <style type="text/css">
        .k-switch-label-on, .k-switch-label-off {
        display: inline;
    }

    .k-switch-label-on {
        left: 7px;
        color: #ffffff;
        text-transform: uppercase;
    }

    .k-switch-label-off {
        right: 5px;
        color: #424242;
        text-transform: uppercase;
    }
    </style>
</head>
<body>
    <link rel="stylesheet" href="/assets/templates/lepide/styles.css" />
    <form method="post" action="./EvidenceMap.aspx?Id=443442" id="_mainForm">
<input type="hidden" name="_scriptManager_TSM" id="_scriptManager_TSM" value="" />
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwUKMTc2MTA2MzQ3Ng9kFgJmD2QWAgIBD2QWAgIEDxYCHgtfIUl0ZW1Db3VudAIFFgoCAQ9kFgQCAQ8WAh4HVmlzaWJsZWgWBmYPFQMkNWUzYjc2MDItZDU0ZS00OWVmLTg3NWMtMjEyOTUyN2UwMjkwBmFjdGl2ZRFWZXJicmVpdHVuZ3NrYXJ0ZWQCAQ8PFgIeC05hdmlnYXRlVXJsBRYvTGVwaS9FdmlkZW5jZU1hcC5hc3B4ZBYCZg8VARFWZXJicmVpdHVuZ3NrYXJ0ZWQCAw8WAh8AZmQCAw9kFgRmDxUCJDVlM2I3NjAyLWQ1NGUtNDllZi04NzVjLTIxMjk1MjdlMDI5MBFWZXJicmVpdHVuZ3NrYXJ0ZWQCAQ8PFgIfAgUWL0xlcGkvRXZpZGVuY2VNYXAuYXNweGQWAmYPFQERVmVyYnJlaXR1bmdza2FydGVkAgIPZBYEAgEPFgIfAWgWBmYPFQMkYjFmNjYwNmUtY2IwZS00ZTM5LTgyMmYtYjRjZmRiMjY1MWI4AAxGdW5kZV9tZWxkZW5kAgEPDxYCHwIFKC9MZXBpL1VzZXIvRXZpZGVuY2VMaXN0UmVnaXN0cmF0aW9uLmFzcHhkFgJmDxUBDEZ1bmRlIG1lbGRlbmQCAw8WAh8AZmQCAw9kFgRmDxUCJGIxZjY2MDZlLWNiMGUtNGUzOS04MjJmLWI0Y2ZkYjI2NTFiOAxGdW5kZV9tZWxkZW5kAgEPDxYCHwIFKC9MZXBpL1VzZXIvRXZpZGVuY2VMaXN0UmVnaXN0cmF0aW9uLmFzcHhkFgJmDxUBDEZ1bmRlIG1lbGRlbmQCAw9kFgQCAQ8WAh8BaBYGZg8VAyQ2ODExODUxZS00NzY4LTRlYjYtYTQ4Mi1hNTZhYzFkZjVmMzIADE1laW5fQmVyZWljaGQCAQ8PFgIfAgUQL0xlcGkvTG9naW4uYXNweGQWAmYPFQEMTWVpbiBCZXJlaWNoZAIDDxYCHwBmZAIDD2QWBGYPFQIkNjgxMTg1MWUtNDc2OC00ZWI2LWE0ODItYTU2YWMxZGY1ZjMyDE1laW5fQmVyZWljaGQCAQ8PFgIfAgUQL0xlcGkvTG9naW4uYXNweGQWAmYPFQEMTWVpbiBCZXJlaWNoZAIED2QWBAIBDxYCHwFoFgZmDxUDJDk2MTNiODgyLTlmNzUtNDIyZC05ZTk5LWZkYTAwZjFlY2Y3OQAQQmVudXR6ZXJoaW53ZWlzZWQCAQ8PFgIfAgUaL0xlcGkvQ29udGVudC5hc3B4P2lkPTM0NzhkFgJmDxUBEEJlbnV0emVyaGlud2Vpc2VkAgMPFgIfAGZkAgMPZBYEZg8VAiQ5NjEzYjg4Mi05Zjc1LTQyMmQtOWU5OS1mZGEwMGYxZWNmNzkQQmVudXR6ZXJoaW53ZWlzZWQCAQ8PFgIfAgUaL0xlcGkvQ29udGVudC5hc3B4P2lkPTM0NzhkFgJmDxUBEEJlbnV0emVyaGlud2Vpc2VkAgUPZBYEAgEPFgIfAWgWBmYPFQMkMzllOTY5MGUtYzI0Yy00ZmY3LWJiNGUtNjQyNzI4MWZhNjYyAAVMaW5rc2QCAQ8PFgIfAgUhL0xlcGkvQ29udGVudC5hc3B4P2dvdG89TEVQSUxJTktTZBYCZg8VAQVMaW5rc2QCAw8WAh8AZmQCAw9kFgRmDxUCJDM5ZTk2OTBlLWMyNGMtNGZmNy1iYjRlLTY0MjcyODFmYTY2MgVMaW5rc2QCAQ8PFgIfAgUhL0xlcGkvQ29udGVudC5hc3B4P2dvdG89TEVQSUxJTktTZBYCZg8VAQVMaW5rc2QYAQUGX19QYWdlDxQrAAJkZGQbO1ZP+w/0aBBA8dRG2LC1eSBSUeYrrbQbrif4Hm5HfQ==" />


<script src="/Telerik.Web.UI.WebResource.axd?_TSM_HiddenField_=_scriptManager_TSM&amp;compress=1&amp;_TSM_CombinedScripts_=%3b%3bSystem.Web.Extensions%2c+Version%3d4.0.0.0%2c+Culture%3dneutral%2c+PublicKeyToken%3d31bf3856ad364e35%3ade-DU%3a18f1b484-bbc5-4e2e-8ca4-477603537f34%3aea597d4b%3bTelerik.Web.UI%2c+Version%3d2022.1.119.45%2c+Culture%3dneutral%2c+PublicKeyToken%3d121fae78165ba3d4%3ade-DU%3af00be9f9-5d75-4a4b-891e-b5c0e5b2a8e2%3a16e4e7cd%3aed16cbdc" type="text/javascript"></script>
<script src="../assets/dist/bundle.js" type="text/javascript"></script>
<script src="../assets/src/js/jszip.min.js" type="text/javascript"></script>
<script src="../assets/src/js/kendo.all.min.js" type="text/javascript"></script>
<script src="../assets/src/js/cultures/kendo.culture.de-DE.min.js" type="text/javascript"></script>
<script src="../assets/src/js/messages/kendo.messages.de-DE.min.js" type="text/javascript"></script>
<script src="../scripts/vengaconfig.js" type="text/javascript"></script>
<script src="../scripts/jquery.blockUI.2.70.min.js" type="text/javascript"></script>
<script src="../scripts/KBS.DynamicForm.Kendo.js" type="text/javascript"></script>
<script src="../scripts/Venga/VengaIconButton.js" type="text/javascript"></script>
<script src="../scripts/Venga/KbsKendoDialog.js" type="text/javascript"></script>
<script src="../scripts/GeoLocationWidget.js" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="6BF443E9" />
        
            <script type="text/javascript">
                var configGetPostgisHost = "http://postgis/cgi-bin/biomap_get?";
                var configPostPostgisHost = "http://postgis/cgi-bin/biomap?";
                var olBingApiKey = "Ao6t2AoyERNdB5Vn8O9j7UkVa65GKdBkAFXa5rB-CMym6RMQRIaRn2e9HrFqWyFt";
                var olServiceBase = "https://www.schmetterlinge-d.de:443/Services";
                var olStyleBase = "https://www.schmetterlinge-d.de:443/Styles";
                var baseUrl = "..//";

                let gblBBox = [53.559119,14.765748, 51.359064,11.268720];
                let gblLimitToBbox = false;
                let gblMapCenter = [13.514776,52.485289];
            </script>
        
        
        <!-- 2022.1.119.45 --><div id="_telerikAjaxManagerSU">
	<span id="ctl00__telerikAjaxManager" style="display:none;"></span>
</div>

        
            <script type="text/javascript">
                let assetsDirectory = "/assets/templates/lepide";
                //Set kendo default input sizes
                kendo.ui['Button'].fn.options['size'] = "small";
                kendo.ui['Button'].fn.options['border'] = "small";
                kendo.ui['TextBox'].fn.options['size'] = "small";
                kendo.ui['TextBox'].fn.options['border'] = "small";
                kendo.ui['NumericTextBox'].fn.options['size'] = "small";
                kendo.ui['NumericTextBox'].fn.options['border'] = "small";
                kendo.ui['DatePicker'].fn.options['size'] = "small";
                kendo.ui['DatePicker'].fn.options['border'] = "small";
                kendo.ui['ComboBox'].fn.options['size'] = "small";
                kendo.ui['ComboBox'].fn.options['border'] = "small";
                kendo.ui['DropDownList'].fn.options['size'] = "small";
                kendo.ui['DropDownList'].fn.options['border'] = "small";

                kendo.culture("de-DE");

                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-bottom-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1200",
                    "timeOut": "10000",
                    "extendedTimeOut": "15000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                }

                //TODO: add master features, e.g. LoggedIn, IsAdmin, ..
                var MasterViewModel = new kendo.observable({
                    LoggedIn: false,
                    IsAdmin: false,
                    LocalityTemplateDisplayName: "Fundort",
                    LocalityTemplateDisplayNameMultiple: "Fundorte",
                    tryLogout: function() {
                        $.ajax({
                            type: "POST",
                            url: "/Services/Taxonomy.asmx/Logout",
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (resp) {
                                if (resp.d.indexOf("true") > -1) {
                                    window.location.href = "/Lepi/Login.aspx";
                                } else {
                                    window.location.href = "/Lepi/Login.aspx";
                                    console.log("error");
                                }
                            },
                            error: function (requestObject, error, errorThrown) {
                                console.error(error);
                                console.error(errorThrown);
                            }
                        });
                    }
                });

                MasterViewModel.bind("change", function (e) {
                    if (e.field == "LoggedIn" && this.LoggedIn) {
                        $(".master_loggedInOnly").removeClass("d-none");
                    }

                    if (e.field == "IsAdmin" && this.IsAdmin) {                        
                        $(".master_AdminOnly").removeClass("d-none");
                    }
                });

            </script>

        
        <script type="text/x-kendo-tmpl" id="eventTemplate">
			<a href="https://www.schmetterlinge-d.de:443/PagesSw/ContentList.aspx?id=#=EventShortId#">
			<div class="k-widget">
				<h3>#:kendo.toString(kendo.parseDate(EventDate),"d")#</h3>
				#=Subject#
			</div>
			</a>
            </script>

        <script type="text/javascript">

            

            var jssor_slider1;
            function ScaleSlider() {
                if (jssor_slider1) {
                    var parentWidth = jssor_slider1.$Elmt.parentNode.clientWidth;
                    if (parentWidth) {

                        jssor_slider1.$ScaleWidth(parentWidth - 30);
                        jssor_slider1.$ScaleHeight((parentWidth - 30) * 3.0 / 4.0);
                    } else
                        window.setTimeout(ScaleSlider, 30);
                }

            }


            $(window).bind("load", ScaleSlider);
            $(window).bind("resize", ScaleSlider);
            $(window).bind("orientationchange", ScaleSlider);

            $(document).ready(function ($) {
                //@TODO: replace with global extended GVM 
                //cf. https://stackoverflow.com/questions/5417600/how-to-extend-javascript-literal-object-with-a-new-variable

                $.ajax({
                    type: "POST",
                    url: "/Services/Taxonomy.asmx/LoggedIn",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (resp) {

                        if (resp.d == true) {
                            $("#Mein_Bereich").show();
                            MasterViewModel.set("LoggedIn", true);
                            //$("#Benutzer_bearbeiten").hide();

                            $("#Profil").show();
                            $("#Abmelden").show();
                            $("#Abmelden").on("click", function () {

                            });

                            //$("#Mein_Bereich> div>a:nth-child(2)").text("Meine Lebensräume");
                            //$("#Mein_Bereich> div>a:nth-child(2)").attr('href', "/Lepi/User/LocalityTemplateListV2.aspx");
                            if ($("#loggedInStatus")) {
                                $("#loggedInStatusIcon").addClass("text-success");//, "var(--senck_green)");
                                $("#loggedInStatus>a").attr("href", "javascript:MasterViewModel.tryLogout();");
                                $("#loggedInStatus>a").attr("title", "Abmelden");
                            }
                        } else {
                            $("#Mein_Bereich").hide();
                            $("#Benutzer_bearbeiten").hide();
                            $("#Profil").hide();
                            $("#Abmelden").hide();
                            if ($("#loggedInStatus")) {
                                $("#loggedInStatus>a").attr("href", "/Lepi/Login.aspx");
                                $("#loggedInStatus>a").attr("title", "Zum Login");
                                $("#loggedInStatusIcon").addClass("text-danger");//, "var(--danger)");
                            }
                        }
                    },
                    error: function (requestObject, error, errorThrown) {
                        console.error(error);
                        console.error(errorThrown);
                    }
                });

                $.ajax({
                    type: "POST",
                    url: "/Services/Taxonomy.asmx/IsAdmin",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (resp) {
                        if (resp.d == true) {
                            MasterViewModel.set("IsAdmin", true);
                            $("#Benutzer").show();
                        } else {
                            $("#Benutzer").hide();
                        }
                    },
                    error: function (requestObject, error, errorThrown) {
                        console.error(error);
                        console.error(errorThrown);
                    }
                });

                if ($("#sliderContainer").length == 1 && $("#editDialog").length == 0) {
                    var options = {
                        $AutoPlay: true,
                        $DragOrientation: 1,
                        $AutoPlayInterval: 5000,
                        $SlideDuration: 1000,
                        $ArrowNavigatorOptions: {
                            $Class: $JssorArrowNavigator$,
                            $ChanceToShow: 2,
                            $Steps: 1
                        }
                    };
                    jssor_slider1 = new $JssorSlider$("sliderContainer", options);
                    ScaleSlider();
                }


            });


            $(document).ready(function () {

                kendo.culture("de-DE");

                $('.truncated-body').hide();

                $(document).on("click", ".truncated-toggle", function (e) {
                    if ($(this).hasClass('fa-circle-chevron-up')) {
                        $(this).removeClass('fa-circle-chevron-up');
                        $(this).addClass('fa-circle-chevron-down');
                    } else {
                        $(this).removeClass('fa-circle-chevron-down');
                        $(this).addClass('fa-circle-chevron-up');
                    }
                    $(this).next().slideToggle("fast");// Hide/show the text
                });
                // Hide the text initially
                /*
                    .after('<i class="fa fa-plus-circle"></i>') // Create toggle button
                    .next().on('click', function () { // Attach behavior
                        console.log("truncated click");
                        $(this).toggleClass('fa-minus-circle') // Swap the icon
                            .prev().toggle(); // Hide/show the text
                    });
                    */
                var pathname = window.location.pathname;
                var page = pathname.split("/").pop();
                $(".nav-item").each(function () {
                    $(this).removeClass("active");
                    let = pageHref = $(this).find(".nav-link").first().attr("href");

                    if (pageHref && pageHref.indexOf(page) > -1) {
                        $(this).addClass("active");
                    }
                });
            });
        </script>
        <div id="page-container">

            

            <nav id="portalNav">
                <div id="nav" class="navbar navbar-expand-md">
                    <div class="container portalhead">
                        
                            <div class="navbar-brand">
                                <a href="/Lepi/Default.aspx">
                                    <img alt="header" src="../assets/templates/lepide/header.png" />
                                </a>
                            </div>
                        
                        <button class="navbar-toggler" type="button" data-toggle="collapse"
                            data-target="#navbarContent" aria-controls="navbarSupportedContent"
                            aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon text-primary">
                                <i class="fa fa-lg fa-bars"></i>
                            </span>
                        </button>
                        <div id="navbarContent" class="navbar-collapse collapse">
                            <ul class="navbar-nav m-auto">
                                
                                <li class="nav-item nav-icon">
                                    <a class="nav-link" href='/Lepi/Default.aspx'>
                                        <i class="fa fa-house" aria-hidden="true"></i>
                                    </a>
                                </li>
                                
                                    
                                        
                                        
                                            <li class="nav-item align-bottom" data-menu_id='5e3b7602-d54e-49ef-875c-2129527e0290' id="Verbreitungskarte">
                                                <a class="nav-link" href="/Lepi/EvidenceMap.aspx">Verbreitungskarte</a>
                                            </li>
                                        
                                    
                                        
                                        
                                            <li class="nav-item align-bottom" data-menu_id='b1f6606e-cb0e-4e39-822f-b4cfdb2651b8' id="Funde_melden">
                                                <a class="nav-link" href="/Lepi/User/EvidenceListRegistration.aspx">Funde melden</a>
                                            </li>
                                        
                                    
                                        
                                        
                                            <li class="nav-item align-bottom" data-menu_id='6811851e-4768-4eb6-a482-a56ac1df5f32' id="Mein_Bereich">
                                                <a class="nav-link" href="/Lepi/Login.aspx">Mein Bereich</a>
                                            </li>
                                        
                                    
                                        
                                        
                                            <li class="nav-item align-bottom" data-menu_id='9613b882-9f75-422d-9e99-fda00f1ecf79' id="Benutzerhinweise">
                                                <a class="nav-link" href="/Lepi/Content.aspx?id=3478">Benutzerhinweise</a>
                                            </li>
                                        
                                    
                                        
                                        
                                            <li class="nav-item align-bottom" data-menu_id='39e9690e-c24c-4ff7-bb4e-6427281fa662' id="Links">
                                                <a class="nav-link" href="/Lepi/Content.aspx?goto=LEPILINKS">Links</a>
                                            </li>
                                        
                                    
                                
                                <li class="nav-item nav-icon" id="loggedInStatus">
                                    <a class="nav-link" href="#">
                                        <i id="loggedInStatusIcon" class="fa fa-user" aria-hidden="true"></i>
                                        Anmelden
                                    
                                    </a>
                                </li>
                                
                            </ul>
                        </div>
                    </div>
                </div>
            </nav>

            <main class="main">
                <div id="main_container" class="container-fluid p-4 mt-4 mb-4 d-flex justify-content-start flex-column">
                    
                    <div class="row">
                        <div class="col-12">
                            <h3 class="pageTitleHeader mb-3">Artinformationen</h3>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-12">
                            
    <div class="row">
        <div class="col-md-8 mb-2">
            <div class="frame frame-box-shadow">
                <div id="taxonComboBox" style="width: 100%;"></div>
                <input type="hidden" id="_selectedSpecies" name="_selectedSpecies" value="0" />
            </div>
        </div>
    </div>
    <div id="imagePopupForm" style="display: none">
        <span style="display: inline-block; width: 660px; font-size: 12px; font-style: normal;">
            <img id="popupImage" />
            <br />
            <span data-bind="text:selected.Description"></span>
            <br />
            &copy; <span data-bind="text:selected.Copyright"></span>
        </span>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div id="tabstrip">
                <ul>
                    <li id="tab1" class="k-active">Verbreitungskarte</li>
                    <li id="tab2">Fotos</li>
                    <li id="tab3">Beschreibung</li>
                    <li id="tab4" style="display: none;">Artensteckbrief</li>
                </ul>
                <div id="evidenceMapWrapper" style="min-height: 630px; overflow: hidden;">
                    <div id="evidenceMap" style="height: 600px">
                    </div>
                    <div style="left: 10px; top: -235px; position: relative; height: 0">
                        <img id="legendImage" src="" />
                    </div>
                    <div id="mapButtonBar" class="p-2 d-flex justify-content-between">
                        <div>
                            <input type="button" id="_selectStateButton" onclick="showStateSelection()" value="Bundesland auswählen" />
                            <input type="button" id="_resetSateButton" onclick="resetStateSelection()" value="zur Deutschlandkarte" s />
                            <label style="margin-left: 10px;" for="_toggleNatbsButton">Naturraumgrenzen</label>
                            <input style="margin-left: 3px;" type="checkbox" name="_toggleNatbsButton" id="_toggleNatbsButton" value="1" />
                        </div>
                        <div>
                            <span style="display: inline-block; text-align: right; min-width: 250px; margin-left: 5px; line-height: 1.5; height: 25px; float: right;" id="tk25HoverSpan"></span>
                            <span style="clear: both"></span>
                        </div>
                    </div>
                </div>
                <div id="evidencePhotos" style="min-height: 630px">
                    <div style="display: none; margin-bottom: 15px;" class="btn btn-outline-secondary" id="addImageButton">neues Bild</div>
                    <br />
                    <div id="photoListview" style="min-height: 600px">
                    </div>
                    <div id="pager" class="k-pager-wrap"></div>
                </div>
                <div id="evidenceDescription" style="min-height: 630px; display: none;">
                    <div id="descriptionDet">
                        <h3 data-bind="source: pageData.PageTitle"></h3>
                        <h4>Diagnose</h4>
                        <div id="diagnosisText" data-bind="html: pageData.DiagnosisContent"></div>
                        <h4>Beschreibung</h4>
                        <div id="descriptionText" data-bind="html: pageData.DescriptionContent"></div>
                        <p>
                            <div id="authorsSummary" data-bind="source: pageData.AuthorsSummary"></div>
                        </p>
                        <div id="externalDescriptionUrl" data-bind="html: pageData.ExternalDescriptionUrl"></div>
                        <button id="enterEditMode" data-bind="click: edit" style="display: none;" type="button">Inhalt bearbeiten</button>
                        <div style="display: none" id="succ" class="alert alert-success">Speichern erfolgreich</div>
                    </div>
                    <div id="descriptionDet-Edit" style="display: none;">
                        <h4>Titel</h4>
                        <input type="text" placeholder="Seitentitel" data-bind="value: pageData.PageTitle, visible: taxonAcl.Edit" />
                        <h4>Diagnose</h4>
                        <textarea id="diagnosisEditor"
                            data-role="editor"
                            data-tools="['bold',
                                            'italic',
                                            'underline',
                                            'strikethrough',
                                            'justifyLeft',
                                            'justifyCenter',
                                            'justifyRight',
                                            'justifyFull',
                                            'formatting',
                                            'viewHtml']"
                            data-bind="source: pageData.DiagnosisContent,
                                            value: pageData.DiagnosisContent, visible: taxonAcl.Edit"
                            style="height: 200px;"></textarea>

                        <h4>Beschreibung</h4>
                        <textarea id="descriptionEditor"
                            data-role="editor"
                            data-tools="['bold',
                                            'italic',
                                            'underline',
                                            'strikethrough',
                                            'justifyLeft',
                                            'justifyCenter',
                                            'justifyRight',
                                            'justifyFull',
                                            'formatting',
                                            'viewHtml']"
                            data-bind="source: pageData.DescriptionContent, value: pageData.DescriptionContent, visible: AllowEdit"
                            style="height: 200px;"></textarea>
                        <p>
                            <div id="authorsSummary" data-bind="html: pageData.AuthorsSummary"></div>
                        </p>
                        <button type="button" data-bind="click: cancel, visible: taxonAcl.Edit">Abbrechen</button>
                        <button type="button" data-bind="click: save, visible: taxonAcl.Edit">Änderungen übernehmen</button>
                        <div style="display: none" id="err" class="alert alert-danger">Fehler beim Speichern</div>
                    </div>
                    <div id="protectionStateInfo" style="display: none;">
                        <h4>Gesetzlicher Schutz und Rote Liste</h4>
                        <p id="protectionStateText" data-bind="html: ProtectionStateContent"></p>
                        <p>
                            <a style="display: none;" id="_lepiHyperlink" target="lepiforum">Art im Lepiforum anzeigen</a>
                        </p>
                    </div>
                </div>
                <div>
                    <iframe name="_descriptionIFrame" id="_descriptionIFrame" sandbox="allow-popups allow-scripts allow-same-origin" width="99%" height="1300px"></iframe>
                </div>
            </div>
        </div>
        <div class="col-md-4 frame frame-box-shadow">
            <div class="p-1 m-2">
                <div id="taxonName"></div>
            </div>
            <hr />
            <div class="p-1 m-2">
                <p class="font-weight-bold mb-0">Zeitraum (Jahr)</p>
                <div style="display: inline-block; width: 45%">
                    <label style="display: none">von</label>
                    <input id="_dateFromTextbox" type="number" title="Jahr von" min="0" max="2200" style="width: 100%;" />
                </div>
                <div style="display: inline-block; width: 45%">
                    <label style="display: none">bis</label>
                    <input id="_dateToTextbox" type="number" title="Jahr bis" min="0" max="2200" style="width: 100%;" />
                </div>
            </div>
            <div class="p-1 m-2">
                <div id="statsView">
                    <h5>Statistik</h5>
                    <hr />
                    <div id="evidenceStatistics">
                        <div class="row mb-2">
                            <div class="col-4">belegte Kartenblätter</div>
                            <div class="col-2" data-bind="text:totalTk25Count"></div>
                            <div class="col-4">Anzahl Nachweise</div>
                            <div class="col-2" data-bind="text:totalEvidenceCount"></div>
                        </div>
                        <div class="row mt-2 bg-light" data-bind="visible:showDiff">
                            <div class="col-12 font-weight-bold" data-bind="text:compareTo"></div>
                        </div>
                        <div class="row bg-light mb-2" data-bind="visible:showDiff">
                            <div class="col-4">belegte Kartenblätter</div>
                            <div class="col-2" data-bind="text:spanTk25Count"></div>
                            <div class="col-4">Anzahl Nachweise</div>
                            <div class="col-2" data-bind="text:spanEvidenceCount"></div>
                        </div>
                        <div class="row mt-2" data-bind="visible:showDiff">
                            <div class="col-12 font-weight-bold">Anteil des Zeitraums</div>
                        </div>
                        <div class="row" data-bind="visible:showDiff">
                            <div class="col-4">belegte Kartenblätter</div>
                            <div class="col-2" data-bind="text:diffTk25Count"></div>
                            <div class="col-4">Anzahl Nachweise</div>
                            <div class="col-2" data-bind="text:diffEvidenceCount"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="p-1 m-2">
                <div id="phaenogramView">
                    <h5>Phänogramm</h5>
                    <hr />
                    <div id="phaenogrammChart"></div>
                </div>
                <div id="obseverView" style="display: none;">
                    <h4 style="width:100%">Beobachtungen<span style="float:right;font-size:8px;font-weight:normal;width:120px" id="switch"></span></h4>
                    <hr />
                    <div id="obseverList" style="max-height: 450px; overflow-y: auto;">
                        <div data-template="tk25-template" data-bind="source: this"></div>
                        <table style="width: 100%">
                            <thead style="text-align: left !important; background-color: #eeeeee; border-bottom: 1px solid #666; font-size: 12px;">
                                <tr>
                                    <th style="width: 60px; text-align: left; padding: 2px">Jahr</th>
                                    <th style="text-align: left; padding: 2px">Beobachter</th>
                                    <th style="text-align: left; padding: 2px">Quelle</th>
                                    <th id="th_isAuthenticated" style="display: none;"></th>
                                    <th id="th_hasEditRight" style="display: none;"></th>
                                </tr>
                            </thead>
                            <tbody data-template="row-template" data-bind="source: evidences" style="font-size: 12px;"></tbody>
                        </table>
                    </div>
                    <div id="obseverListGrouped" style="max-height: 450px; overflow-y: auto;">
                        <div data-template="tk25-template" data-bind="source: this"></div>
                        <table style="width: 100%">
                            <thead style="text-align: left !important; background-color: #eeeeee; border-bottom: 1px solid #666; font-size: 12px;">
                                <tr>
                                    <th style="width: 60px; text-align: left; padding: 2px">Jahr</th>
                                    <th style="text-align: left; padding: 2px">Beobachter</th>
                                    <th style="text-align: left; padding: 2px">Quelle</th>
                                    <th style="text-align: left; padding: 2px">#</th>
                                    <th id="th_isAuthenticated" style="display: none;"></th>
                                    <th id="th_hasEditRight" style="display: none;"></th>
                                </tr>
                            </thead>
                            <tbody data-template="row-template-grouped" data-bind="source: evidencesGrouped" style="font-size: 12px;"></tbody>
                        </table>
                    </div>

                    <div style="vertical-align: center; margin-top: 16px">
                        <input type="button" value="Auswahl zurücksetzen" onclick="resetSelection()" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">

        /**globalViewModel to hold page-wide information */
        var GVM = new kendo.observable(
            {
                mapInstance: null,
                tkLayer: null,
                tk25Features: null,
                evidenceLayer: null,
                adminVectorSource: null,
                adminEnvelopeLayer: null,
                interaction: null,
                natbsLayer: null,
                tk25SourceBlur: null,
                tk25blurredOnlyFeatures: null,
                plv: null,
                TaxonId: 0,
                IsConcept: false,
                buildSeriesScript: function () {
                    var that = this;
                    return new Promise((resolve, reject) => {
                        $.ajax({
                            type: "GET",
                            url: baseUrl + "api/taxonomy/buildSeriesScript",
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (result) {
                                resolve(result);
                            },
                            error: function (result) {
                                console.warn("error creating protection state info: " + result);
                                reject(result);
                            }
                        });
                    });
                },
                /*
                SetAllowEdit: function (taxonId) {
                    var that = this;
                    return new Promise((resolve, reject) => {
                        $.ajax({
                            type: "POST",
                            url: GVM.OlServiceBase + "/Taxonomy.asmx/AllowEdit",
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify({ "taxonId": taxonId }),
                            dataType: "json",
                            success: function (resp) {
                                that.AllowEdit = resp.d;
                                resolve(resp.d);
                            },
                            error: function (error) {
                                console.log(error);
                                reject(error);
                            }
                        })
                    });
                },*/
                Tab2: false,
                Tab3: false,
                Tab4: false,
                IsAuthenticated: false,
                HideRegionSelection: false,
                getTaxonAcl: function (taxonId) {
                    return new Promise(function (resolve, reject) {
                        $.ajax({
                            type: "GET",
                            url: baseUrl + 'api/taxonomy/taxonAcl',
                            contentType: "application/json; charset=utf-8",
                            data: { "taxonId": Math.abs(taxonId), "isConcept": taxonId < 0 },
                            dataType: "json",
                            success: function (result) {
                                GVM.set("taxonAcl", result);
                                resolve();
                            },
                            error: function (error) {
                                GVM.set("taxonAcl", { Edit: false, Read: false, Commit: false });
                                console.log(error);
                                reject(error);
                            }
                        })

                    });
                },
                loadTaxonInfo: function () {
                    let that = this;
                    getContentPage(that.taxonAcl.Edit, that.TaxonId);
                    that.updateTabs();
                },
                updateTabs: function () {
                    //$("#tabstrip").data("kendoTabStrip").select(0);
                    resetSelection();
                    refreshMap();
                    refreshPhaenogram();
                    updateContentPage();
                    // refreshes the ListView
                    GVM.plv = $("photoListView").data("kendoListView");
                    if (image_dataSource) {
                        image_dataSource.read();
                    }
                    if (GVM.plv) {
                        GVM.plv.refresh();
                    }
                },
                PortalClientId: 'fe212ab8-5dd9-4404-9732-3c66724ebf83',
                MapCgiScriptGet: 'lepi_de_get',
                MapCenter: '9.914486, 51.540484',
                GetMapCenterArray: function () {
                    var ArrayData = $.map(this.MapCenter.split(','), function (value) {
                        return parseFloat(value);
                    });
                    return ArrayData;
                },
                Bbox: '5.712891,47.159840,15.424805,55.128649',
                GetBboxArray: function () {
                    var ArrayData = $.map(this.Bbox.split(','), function (value) {
                        return parseFloat(value);
                    });
                    return ArrayData;
                },
                /**@TODO: replace string thru boolean in Settings **/
                LimitToBbox: ('False' == 'True'),
                LegendImageSrc: "https://wms.kbs-leipzig.de/cgi-bin/" + "lepi_de_get" + "?SERVICE=WMS&REQUEST=GetLegendGraphic&VERSION=1.3.0&FORMAT=image/png&WIDTH=20&HEIGHT=8&LAYER=tk25specdist&SLD_VERSION=1.1.0",
                OlServiceBase: "https://www.schmetterlinge-d.de:443/Services",
                EmptySelectionBoxMessage: "Suche nach Namen, z. B. 'Zitronenfalter'",
                presetComboBox: function (taxonId) {
                    $.ajax({
                        type: "POST",
                        url: GVM.OlServiceBase + "/Taxonomy.asmx/FindSpeciesComplex_Single",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ "taxonId": taxonId, "useScientificNames": 0 }),
                        dataType: "json",
                        success: function (resp) {
                            $("#taxonComboBox").data("kendoComboBox").dataSource.data([resp.d]);
                            $("#taxonComboBox").data("kendoComboBox").select(0);
                            var dataItem = $("#taxonComboBox").data("kendoComboBox").dataItem();
                            if (dataItem) {
                                evaluateSelectedTaxon(dataItem);
                            }
                        },
                        error: function (result) {
                            console.log(result);
                        }
                    });
                },
                getQueryParams: function (qs) {
                    var qs = document.location.search;
                    qs = qs.split('+').join(' ');
                    var params = {},
                        tokens,
                        re = /[?&]?([^=]+)=([^&]*)/g;

                    while (tokens = re.exec(qs)) {
                        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
                    }

                    if (params.tab2) {
                        this.Tab2 = true;
                        $("#tab1").removeClass('k-state-active');
                        $("#tab2").addClass('k-state-active');
                        $("#tab3").removeClass('k-state-active');
                    }
                    if (params.tab3) {
                        this.Tab3 = true;
                        $("#tab1").removeClass('k-state-active');
                        $("#tab3").addClass('k-state-active');
                        $("#tab2").removeClass('k-state-active');
                    }
                    if (!params.tab2 && !params.tab3) {
                        $("#tab1").addClass('k-state-active');
                    }

                    if (params.Id) {
                        this.TaxonId = parseFloat(Number(params.Id));
                        if (this.TaxonId < 0) {
                            this.IsConcept = true;
                        }
                        this.presetComboBox(this.TaxonId);
                    } else if (params.id) {

                        this.TaxonId = parseFloat(Number(params.id));
                        if (this.TaxonId < 0) {
                            this.IsConcept = true;
                        }
                        this.presetComboBox(this.TaxonId);

                    }

                    return params;
                },

                init: function () {
                    if (this.HideRegionSelection) {
                        $("#_selectStateButton").hide();
                        $("#_resetSateButton").hide();
                    }

                    $("#legendImage").attr('src', this.LegendImageSrc);

                    this.getQueryParams();

                    if (this.IsAuthenticated) {
                        $("#th_isAuthenticated").show();
                    }

                    $("#_resetSateButton").hide();

                    $("#switch").kendoSwitch({
                        change: function (e) {
                            GVM.groupEvidences(e.checked);
                        },
                        checked: true,
                        messages: {
                            checked: "Zusammengefasst",
                            unchecked: "Einzelmeldungen"
                        }
                    });

                    $("#obseverList").hide();
                    $("#obseverListGrouped").show();

                },
                totalStats: [],
                spanStats: [],
                groupEvidences: function(group) {

                    if (group) {
                        $("#obseverList").hide();
                        $("#obseverListGrouped").show();
                    
                    } else {
                        $("#obseverList").show();
                        $("#obseverListGrouped").hide();
                    }
                },
                refreshStats: function () {
                    if (!selectedDateFrom || selectedDateFrom == null) {
                        selectedDateFrom = 0;
                    }
                    if (!selectedDateTo || selectedDateTo == 9999) {
                        selectedDateTo = selectedDateFrom ? new Date().getFullYear() : 9999;
                    }

                    let spanTkCount = this.spanStats.length;
                    let totalTkCount = this.totalStats.length;

                    let spanEvidenceCount = spanTkCount > 0 ? this.spanStats.reduce((a, b) => a + b.Tk25Count, 0) : 0;
                    let totalEvidenceCount = totalTkCount > 0 ? this.totalStats.reduce((a, b) => a + b.Tk25Count, 0) : 0;

                    this.evidenceStats.set("showDiff", selectedDateFrom != 0 && selectedDateTo != 9999 && GVM.TaxonId && spanTkCount > 0);

                    this.evidenceStats.set("totalTk25Count", totalTkCount);
                    this.evidenceStats.set("totalEvidenceCount", totalEvidenceCount);
                    this.evidenceStats.set("spanTk25Count", spanTkCount);
                    this.evidenceStats.set("spanEvidenceCount", spanEvidenceCount);

                    this.evidenceStats.set("diffTk25Count", Math.round((spanTkCount / totalTkCount) * 100.0, 0) + "%");
                    this.evidenceStats.set("diffEvidenceCount", Math.round((spanEvidenceCount / totalEvidenceCount) * 100.0, 0) + "%");

                    console.log(selectedDateFrom);

                    this.evidenceStats.set("compareTo", selectedDateFrom + " bis " + selectedDateTo);
                    //this.evidenceStats.set("compareTo", 11 + " bis " + 22);

                },
                evidenceStats: new kendo.data.ObservableObject({ showDiff: false, compareTo: 0, totalTk25Count: 0, totalEvidenceCount: 0, spanTk25Count: 0, spanEvidenceCount: 0, diffTk25Count: "", diffEvidenceCount: "" }),
            }
        );

        /** Document Ready**/
        $(document).ready(function () {

            GVM.init();

            $("#_dateFromTextbox").kendoNumericTextBox({
                format: "####",
                label: {
                    content: "Jahr von",
                    floating: true
                },
                change: filterByDateFrom,
                value: localStorage.getItem('EvidenceMap_dateFrom') ?? null,
            });

            $("#_dateToTextbox").kendoNumericTextBox({
                format: "####",
                label: {
                    content: "Jahr bis",
                    floating: true
                },
                change: filterByDateTo,
                value: localStorage.getItem('EvidenceMap_dateTo') ?? null,
            });


            GVM.buildSeriesScript().then((seriesData) => {

                $("#phaenogrammChart").kendoChart({
                    title: {
                        text: "Phänogrammchart",
                        visible: false,
                    },
                    legend: {
                        position: "bottom",
                        visible: true,
                    },
                    seriesDefaults: {
                        type: "column",
                        stack: true,

                    },
                    series: seriesData,
                    valueAxis: {
                        minorGridLines: {
                        },
                    },
                    categoryAxis: [{
                        labels: {
                            template: kendo.template("#= getCategoryLabel(value) #"),
                            step: 3,
                            skip: 1,
                        },
                        categories: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36],
                        majorGridLines: {
                            visible: true,
                            step: 3,

                        }
                    }],
                });

                refreshPhaenogram();

            });

            $("#addImageButton").kendoButton({
                click: function (e) {
                    /*
                    var newItem = { UploadCode: 0, Title: "", Copyright: "", Description: "Beschreibung hier", Index: 0, IsPinned: true, ImageId: 0, ImagePath: "", FileFormat: 0 };
                    image_dataSource.add(newItem);
                    var listView = $("#photoListview").data("kendoListView");
                    //listView.add(newItem);
                    //itemWithID = image_dataSource.at(1);
                    listView.setDataSource(image_dataSource);
                    //listView.edit(image_dataSource.at(0));
                    e.preventDefault();
                    listView.edit((listView.element.children().first()));
                    //TODO: bugfix here
                    */
                    var newItem = { UploadCode: 0, Title: "", Copyright: "", Description: "Beschreibung hier", Index: 99, IsPinned: false, ImageId: 0, ImagePath: "", FileFormat: 0 };
                    var newItemResult = image_dataSource.add(newItem);
                    //GVM.plv.edit(GVM.plv.children().last());
                    var t = setTimeout(function () {
                        $("#photoListview").data("kendoListView").edit($("#photoListview > div > div[data-uid=" + newItemResult.uid + "]"));

                    }, 300);
                }
            });


            var ddl = $("#taxonComboBox").kendoComboBox({
                placeholder: GVM.EmptySelectionBoxMessage,
                noDataTemplate: "Keine Ergebnisse",
                dataTextField: "TaxonName",
                dataValueField: "TaxonId",
                template: templateString,
                dataSource: {
                    serverFiltering: true,
                    type: "json",
                    transport: {
                        read: function (options) {
                            $.ajax({
                                type: "POST",
                                url: GVM.OlServiceBase + "/Taxonomy.asmx/FindSpeciesComplex",
                                contentType: "application/json; charset=utf-8",
                                data: JSON.stringify({ "context": { "Text": $("#taxonComboBox").data('kendoComboBox').text(), "NumberOfItems": 0, "showall": 1, "useScientificNames": false } }),
                                dataType: "json",
                                success: function (resp) {
                                    options.success(resp.d);
                                },
                                error: function (result) {
                                    options.error(result);
                                }
                            });
                        }
                    },
                    schema: {
                        model: { id: "TaxonId" }
                    }
                },
                autoBind: false,
                select: function (e) {
                    $("#tabstrip").data("kendoTabStrip").select(0);
                    evaluateSelectedTaxon(e.dataItem);
                },
                serverFiltering: true,
                filter: "contains",
                minLength: 3
            }).data("kendoComboBox");

            $("#tabstrip").kendoTabStrip({
                allowEdit: false,
                show: function (e) {
                    var t = setTimeout(function () {
                        var currentUrl = window.location.href;
                        if (currentUrl.indexOf("tab") != -1) {
                            var newUrl = currentUrl.replace(new RegExp("tab[0-9]", "g"), e.item.id);
                            window.history.pushState({ path: newUrl }, '', newUrl);
                        }
                        if (e.contentElement.id == "evidencePhotos") {
                            initPhotoListview(GVM.taxonAcl.Edit);
                        }
                        else {
                            initEvidenceMap();
                        }
                    }, 100);
                },
                animation: {
                    open: {
                        effects: "fadeIn"
                    }
                }
            });


            var t = setTimeout(function () {
                if (GVM.Tab2) {
                    initPhotoListview(GVM.taxonAcl.Edit);
                } else {
                    initEvidenceMap();
                }
            }, 350);


            kendo.bind($("#obseverView"), observerViewModel);
            /**
            *** Phaenogramm
            **/
            kendo.bind("#evidenceStatistics", GVM.evidenceStats);

        });


        /**
        ** Taxon/Species Selection
        */
        function evaluateSelectedTaxon(dataItem) {

            var template = kendo.template(templateStringHtml);
            $("#taxonName").html(template(dataItem));

            var taxonId = Number(dataItem.TaxonId);

            var currentUrl = window.location.href;
            var newUrl = "";

            GVM.TaxonId = parseInt(taxonId);

            if (GVM.TaxonId != 0) {
                var currentUrl = window.location.href;
                if (currentUrl.indexOf("Id") != -1) {
                    newUrl = currentUrl.replace(/Id=\d+/gi, "Id=" + GVM.TaxonId)
                } else {
                    newUrl = currentUrl += "?Id=" + GVM.TaxonId
                }
            } else {
                urlSplit = currentUrl.split("Id=");
                newUrl = urlSplit[0];
            }
            window.history.pushState({ path: newUrl }, '', newUrl);

            GVM.getTaxonAcl(GVM.TaxonId).then(() => {
                if (GVM.taxonAcl.Edit) {
                    $("#th_hasEditRight").show();
                } else {
                    $("#th_hasEditRight").hide();
                }

                if (taxonId < 0) {
                    var conceptId = taxonId * -1;
                    createProtectionStateInfo(conceptId);
                } else {
                    createLepiForumLink(taxonId);
                    createProtectionStateInfo(taxonId);
                }
                refreshStatistics();
                GVM.loadTaxonInfo();
            });

            

            $('#_selectedSpecies').val(taxonId);
            
        }

        function GetStateImage(female, state) {
            if (state) {
                switch (state) {
                    case 1:
                        return "/assets/dist/images/ident_green" + (female ? "_r" : "") + ".png";
                    case 2:
                        return "/assets/dist/images/ident_yellow" + (female ? "_r" : "") + ".png";
                    case 3:
                        return "/assets/dist/images/ident_red" + (female ? "_r" : "") + ".png";
                    case 4:
                        return "/assets/dist/images/ident_grey" + (female ? "_r" : "") + ".png";
                }
            }
            return "/assets/dist/images/ident_blank.png";
        }

        function GetStateImageTitle(female, state) {
            if (state) {
                switch (state) {
                    case 1:
                        return `${female ? 'weiblich' : 'männlich'}: Allein nach äußeren Merkmalen schon mit bloßem Auge oder bei geringer Vergrößerung (10x) mit einer Lupe bestimmbar`;
                    case 2:
                        return `${female ? 'weiblich' : 'männlich'}: Nach äußeren Merkmalen bei geringer (10x) bis mittlerer (30x) Vergrößerung mit einer Lupe sowie unter Nutzung von Fachliteratur bestimmbar`;
                    case 3:
                        return `${female ? 'weiblich' : 'männlich'}: Nur nach Untersuchung von Genitalmerkmalen mithilfe eines Stereomikroskopes bestimmbar`;
                    case 4:
                        return `${female ? 'weiblich' : 'männlich'}: Allenfalls für einen Experten mit viel Erfahrung, Fachliteratur und Vergleichsmaterial bestimmbar`;
                }
            }
            return "";
        }

        var templateStringHtml = "<img title='#= GetStateImageTitle(0,IdentificationLevelMale)#' src='#= GetStateImage(0,IdentificationLevelMale)#'>"
            + "<img title='#= GetStateImageTitle(1,IdentificationLevelFemale)#' src='#= GetStateImage(1,IdentificationLevelFemale)#'>"
            + "&nbsp;<span>#=TaxonNameHtml#</span>";

        var templateString = "<img title='#= GetStateImageTitle(0,IdentificationLevelMale)#' src='#= GetStateImage(0,IdentificationLevelMale)#'>"
            + "<img title='#= GetStateImageTitle(1,IdentificationLevelFemale)#' src='#= GetStateImage(1,IdentificationLevelFemale)#'>"
            + "&nbsp;<span>#=TaxonName#</span>";


        function createProtectionStateInfo(taxonId) {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    type: "GET",
                    url: baseUrl + "api/taxonomy/protectionState",
                    contentType: "application/json; charset=utf-8",
                    data: { "taxonId": taxonId },
                    dataType: "json",
                    success: function (resp) {
                        var psiModel = kendo.observable({ ProtectionStateContent: resp.d });
                        kendo.bind($('#protectionStateInfo'), psiModel);
                        $('#protectionStateInfo').show();
                        resolve();
                    },
                    error: function (result) {
                        console.warn("error creating protection state info: " + result);
                        reject(result);
                    }
                });
            });
        }

        function createLepiForumLink(taxonId) {
            return new Promise(function (resolve,reject) {
                $.ajax({
                    type: "POST",
                    url: GVM.OlServiceBase + "/Taxonomy.asmx/GetTaxonFullNameByTaxonIdForLepiWikiLink",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ "taxonId": taxonId }),
                    dataType: "json",
                    success: function (resp) {
                        if (!GVM.IsConcept && resp.d != null) {
                            $("#_lepiHyperlink").attr("href", "https://www.lepiforum.de/lepiwiki.pl?" + resp.d.replace(" ", "_"));
                            $("#_lepiHyperlink").show();
                        }
                        resolve();
                    },
                    error: function (result) {
                        console.warn("error creating lepiforum link" + result);
                        reject(result);
                    }
                });
            });
            
        }


        function getContentPage(allowEdit, taxonId) {

            var descriptionViewModel = kendo.observable({
                AuthorsSummary: "",
                DescriptionContent: "",
                DiagnosisContent: "",
                PageId: "",
                PageTitle: "",
                pageData: new kendo.observable({
                    AuthorsSummary: "",
                    DescriptionContent: "",
                    DiagnosisContent: "",
                    PageId: null,
                    PageTitle: "",
                    IsNew: true,
                    ExternalDescriptionUrl: "",
                    TaxonId: 0
                }),
                pageDataShadow: new kendo.observable({
                    AuthorsSummary: "",
                    DescriptionContent: "",
                    DiagnosisContent: "",
                    PageId: null,
                    PageTitle: "",
                    IsNew: true,
                    ExternalDescriptionUrl: "",
                    TaxonId: 0,
                }),
                getPageData: function () {
                    return this.pageData;
                },
                AllowEdit: false,
                read: function () {
                    var that = this;
                    return new Promise((resolve, reject) => {
                        $.ajax({
                            type: "POST",
                            url: GVM.OlServiceBase + "/Cms.asmx/GetContentPageContent",
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify({ "taxonId": taxonId, "raw": true, "includeImages": false }),
                            dataType: "json",
                            success: function (resp) {
                                console.log(resp);
                                if (resp.d) {
                                    delete resp.d.__type;
                                }
                                if (resp.d) {
                                    if (typeof (resp.d["ExternalDescriptionUrl"]) !== 'undefined') {
                                        var iFrame = document.getElementById("_descriptionIFrame");
                                        iFrame.src = resp.d["ExternalDescriptionUrl"];
                                        iFrame.setAttribute("src", resp.d["ExternalDescriptionUrl"]);
                                        $("#tab4").show();
                                        $("#tab3").hide();
                                        //$("#tabstrip").data("kendoTabStrip").remove("#tab3");
                                        //iFrame.contentWindow.location.reload(true);
                                        //iFrame.src = resp.d["ExternalDescriptionUrl"];
                                    }
                                }
                                else {
                                    $("#tab4").hide();
                                    $("#tab3").show();
                                }
                                resolve(resp.d);
                            },
                            error: function (error) {
                                console.log(error);
                                reject(error);
                            }
                        })
                    })
                },
                update: function () {
                    var that = this;
                    if (that.pageData.__type) {
                        delete (that.pageData.__type);
                    }
                    if (that.pageData.TaxonId == 0) {
                        that.pageData.TaxonId = GVM.TaxonId;
                    }
                    $.ajax({
                        type: "POST",
                        url: GVM.OlServiceBase + "/Cms.asmx/UpdateContentPageContent",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ "contentobj": that.pageData }),
                        dataType: "json",
                        success: function (resp) {
                            that.pageData = resp.d;

                            kendo.bind($("#descriptionDet"), descriptionViewModel);
                            kendo.bind($("#descriptionDet-Edit"), descriptionViewModel);

                            $("#descriptionDet-Edit").hide();
                            $("#descriptionDet").show();
                            $('#succ').fadeIn('slow', function () {
                                $(this).delay(1500).fadeOut('slow');
                            });
                            //console.log(this.pageData);
                        },
                        error: function (error) {
                            $('#err').fadeIn('slow', function () {
                                $(this).delay(3000).fadeOut('slow');
                            });
                            console.log(error);
                        }
                    });
                },
                edit: function () {
                    this.pageDataShadow = this.pageData;
                    $("#descriptionDet").hide();
                    $("#descriptionDet-Edit").show();
                },
                hasChanges: false,
                save: function (e) {
                    e.preventDefault();
                    this.update();
                    this.set("hasChanges", false);
                },
                cancel: function () {
                    this.pageData = this.pageDataShadow;
                    $("#descriptionDet-Edit").hide();
                    $("#descriptionDet").show();
                },
                change: function () {
                    this.set("hasChanges", true);
                }
            });

            descriptionViewModel.read()
                .then(function (val) {
                    descriptionViewModel.AllowEdit = GVM.taxonAcl.Edit;
                    if (val != null) {
                        descriptionViewModel.pageData = Object.assign({}, val);
                    } else {
                        descriptionViewModel.pageData.TaxonId = GVM.TaxonId;
                    }
                    kendo.bind($("#descriptionDet"), descriptionViewModel);
                    kendo.bind($("#descriptionDet-Edit"), descriptionViewModel);
                    $("#descriptionDet").show();
                    if (GVM.taxonAcl.Edit) {
                        $("#enterEditMode").show();
                    }
                });
        }

        function updateControls(bool_allowEdit) {
            //data {"allowEdit"}
            var listView = $("#photoListview").data("kendoListView");
            // refreshes the ListView                    
            if (listView) {
                listView.refresh();
            }
        }


        /**
        ** PhotoList
        **/
        function showImage(e) {
            //debugger;
        }

        function photoListview_onChange(e) {
            $("#photoListview").data("kendoListview").refresh();
        }

        var initListView = true;
        var image_dataSource;
        var imageViewModel = new kendo.observable({ selected: null, imgSource: "", allowEdit: false });

        var fileFormatDatasource = [{ FileFormatId: 0, FileFormatName: "Bild" }, { FileFormatId: 1, FileFormatName: "Video" }, { FileFormatId: 2, FileFormatName: "Audio" }];

        function initPhotoListview(tab_allowEdit) {
            if (initListView) {

                initListView = false;

                kendo.bind($("#imagePopupForm"), imageViewModel);

                $("#imagePopupForm").kendoWindow({
                    visible: false,
                });

                image_dataSource = new kendo.data.DataSource({
                    schema: {
                        model: {
                            id: "ImageId",
                            fields: {
                                ImageId: { type: "number", nullable: false },
                                ImagePath: { nullable: false, default: "" },
                                Copyright: { nullable: true },
                                Description: { nullable: true },
                                UploadCode: { nullable: true },
                                Title: { nullable: true },
                                Index: { nullable: true },
                                FileFormat: { nullable: false, default: 1 },
                                IsPinned: { type: "boolean", default: false }
                            },
                        }
                    },
                    sort: [
                        // sort by "category" in descending order and then by "name" in ascending order
                        { field: "IsPinned", dir: "desc" },
                        { field: "Index", dir: "asc" },
                        { field: "DateCreated", dir: "desc" }
                    ],
                    transport: {
                        read: {
                            url: baseUrl + 'api/taxonomy/GetImages',
                            type: "POST",
                            cache: false,
                            contentType: "application/json",
                        },
                        update: {
                            url: baseUrl + 'api/taxonomy/SaveImageData',
                            type: "POST",
                            cache: false,
                            contentType: "application/json",
                        },
                        create: {
                            url: baseUrl + 'api/taxonomy/SaveImageData',
                            type: "POST",
                            cache: false,
                            contentType: "application/json",
                        },
                        destroy: {
                            url: baseUrl + 'api/taxonomy/DeleteImageData',
                            type: "POST",
                            cache: false,
                            contentType: "application/json",
                        },
                        parameterMap: function (data, type) {
                            return JSON.stringify({ taxonId: $("#_selectedSpecies").val(), item: data, operation: type, clientId: GVM.PortalClientId });
                        },
                    },
                    change: function (e) {
                        if (typeof ($("#photoListview").data("kendoListview")) !== 'undefined') {
                            $("#photoListview").data("kendoListview").refresh();
                        }
                        var t = setTimeout(function () {
                            if (tab_allowEdit) {
                                $("#addImageButton").show();
                                $(".editImageButton").show();
                                $(".deleteImageButton").show();
                            } else {
                                $("#addImageButton").hide();
                                $(".editImageButton").hide();
                                $(".deleteImageButton").hide();
                            }
                        }, 500);

                    },
                    pageSize: 21,
                });

                $("#pager").kendoPager({
                    dataSource: image_dataSource
                });

                GVM.plv = $("#photoListview").kendoListView({
                    dataSource: image_dataSource,
                    //selectable: "true",
                    change: photoListview_onChange,
                    editTemplate: kendo.template($("#foto-editTemplate").html()),
                    edit: function (e) {
                        if (typeof (e) !== 'undefined') {

                        } else {
                            e.preventDefault();
                        }
                    },
                    remove: function (e) {
                        if (!confirm("Bild löschen?")) {
                            e.preventDefault();
                        }
                    },

                    dataBound: function (e) {

                        $(".imageSpan").bind("click", function (e) {
                            var uid = $(e.currentTarget).data("uid");
                            var di = image_dataSource.getByUid(uid);

                            imageViewModel.set("selected", di); //update the viewModel

                            $("#popupImage").attr("src", "/ShowImage.aspx?cache=true&src=" + encodeURI(di.ImagePath) + "&width=640&height=480&bgColor=White");
                            $("#imagePopupForm").data("kendoWindow").open().center();

                        });

                        $.each(image_dataSource.data(), function (i, v) {
                            if (!v.isExtendet) {
                                $.extend(v, {
                                    setUploadCode: function (ev) {
                                        if (ev.operation == "remove") {
                                            this.set("UploadCode", -1);
                                        }

                                        if (ev.operation == "upload") {
                                            this.set("UploadCode", ev.response);
                                        }

                                    },
                                    getUploadCode: function (ev) {
                                        ev.data = { codeID: this.UploadCode };
                                    },
                                });
                                v.UploadCode = 0;
                                v.isExtendet = true;
                                v.dirty = false;
                            }
                        });
                        //$("#photoListview").data("kendoListview").refresh();
                    },
                    template: kendo.template($("#foto-template").html())
                });

            }
            var t = setTimeout(function () {
                if (tab_allowEdit) {
                    $("#addImageButton").show();
                    $(".editImageButton").show();
                    $(".deleteImageButton").show();
                } else {
                    $("#addImageButton").hide();
                    $(".editImageButton").hide();
                    $(".deleteImageButton").hide();
                }
            }, 500);
        }

        function getCategoryLabel(cat) {
            switch (cat) {
                case 2:
                    return "Jan";
                case 5:
                    return "Feb";
                case 8:
                    return "Mrz";
                case 11:
                    return "Apr";
                case 14:
                    return "Mai";
                case 17:
                    return "Jun";
                case 20:
                    return "Jul";
                case 23:
                    return "Aug";
                case 26:
                    return "Sep";
                case 29:
                    return "Okt";
                case 32:
                    return "Nov";
                case 35:
                    return "Dez";
            }

            return "";
        }

        var phaenogramData = [];
        var selectedStateId = null;

        function refreshPhaenogram() {

            $.ajax({
                url: baseUrl + 'api/taxonomy/phaenogramData',
                type: "GET",
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                //@TODO: replace through global
                data: { speciesId: $("#_selectedSpecies").val(), yearFrom: selectedDateFrom, yearTo: selectedDateTo, stateId: selectedStateId == null ? -1 : selectedStateId },
                success: function (result) {
                    phaenogramData = result;
                    console.log(phaenogramData);
                    var chart = $("#phaenogrammChart").data("kendoChart");
                    for (var j = 0; j < chart.options.series.length; j++) {
                        chart.options.series[j].data = phaenogramData[j].ItemCount;
                    }
                    chart.refresh();
                }
            });
        }


        /**
        ** Map
        **/
        var observerViewModel = kendo.observable({
            evidences: [],
            evidencesGrouped: [],
            enableDetailList: false,
            enableGroupedList: true,
            tk25Name: "(nicht ausgewählt)"
        });

        var selectedDateFrom = localStorage.getItem('EvidenceMap_dateFrom') ?? 0;
        var selectedDateTo = localStorage.getItem('EvidenceMap_dateTo') ?? (selectedDateFrom ? new Date().getFullYear() : 9999);
        //var GVM.tk25Features, GVM.evidenceLayer, GVM.adminVectorSource, GVM.adminEnvelopeLayer, interaction, GVM.natbsLayer;
        var tk25baseFeatures;

        var initMap = true;
        function initEvidenceMap() {
            if (!initMap) {
                return;
            }

            initClientMap(GVM);
            refreshStatistics();

            initMap = false;

            //GVM.tk25Features.on("postcompose", ol_featureSelected);
        }

        function showStateSelection(sender, args) {
            GVM.adminEnvelopeLayer.setVisible(true);
        }

        function resetStateSelection(sender, args) {

            let map = GVM.mapInstance;
            var ia = map.getInteractions().getArray();

            for (var i = 1; i < 9; i++) {
                ia[i].setActive(true);
            }
            GVM.interaction.getFeatures().clear();
            GVM.selectedAreaFeature = null;
            map.getView().fit(GVM.adminVectorSource.getExtent(), map.getSize());
            selectedStateId = null;
            $("#statsView").find("h5").text("STATISTIK");
            $("#_selectStateButton").show();
            $("#_resetSateButton").hide();

            refreshPhaenogram();
            refreshStatistics();
        }

        function selectState(feature) {
            //var extent = map.getView().getExtent();
            GVM.mapInstance.getView().fit(feature.getGeometry().getExtent(), GVM.mapInstance.getSize());
            var extent = feature.getGeometry().getExtent();
            var zoomLevel = GVM.mapInstance.getView().getZoom();

            var ia = GVM.mapInstance.getInteractions().getArray();

            for (var i = 1; i < 9; i++) {
                ia[i].setActive(false);
            }

            var props = feature.getProperties();
            selectedStateId = props["id"];

            GVM.adminEnvelopeLayer.setVisible(false);
            GVM.interaction.getFeatures().clear();
            GVM.interaction.getFeatures().push(feature);
            GVM.selectedAreaFeature = feature;

            let stateName = props.name;
            $("#statsView").find("h5").text("STATISTIK (" + stateName + ")");

            $("#_selectStateButton").hide();
            $("#_resetSateButton").show();

        }

        function refreshStatistics() {
            let speciesId = parseInt(GVM.TaxonId);
            let yearFrom = parseInt(selectedDateFrom);
            let yearTo = parseInt(selectedDateTo);

            if (yearFrom && (!yearTo||yearTo==9999)) {
                yearTo = new Date().getFullYear();
            }

            $.when(
                $.ajax({
                    url: baseUrl + "api/records/GetEvidenceStatisticsByTk25",
                    contentType: "application/json; charset=utf-8",
                    data: { speciesId: speciesId, dateFrom: 0, dateTo: 9999, stateId: selectedStateId??-1 },
                }),
                $.ajax({
                    url: baseUrl + "api/records/GetEvidenceStatisticsByTk25",
                    contentType: "application/json; charset=utf-8",
                    data: { speciesId: speciesId, dateFrom: yearFrom ?? -1, dateTo: yearTo ?? -1, stateId: selectedStateId ?? -1 },
                })).done(function (total, span) {

                    GVM.totalStats = total[0];
                    GVM.spanStats = span[0];
                    GVM.refreshStats();

                });
        }

        function ol_featureSelected(e) {

            if (e.selected.length == 0) {
                $("#phaenogramView").show();
                $("#obseverView").hide();
                return;
            }

            var props = e.selected[0].getProperties();
            //@TODO:make global - cf. ReportList
            //Map ClientId to "Quelle" if DisplayName not set
            //var source_mapping = new Map();
            //source_mapping.set("376B5F99-FFE9-4C7A-8830-B880845FF873".toLowerCase(), "InSax");
            //source_mapping.set("78FA3031-678D-4437-8BC6-2C4932E15CE6".toLowerCase(), "LDB BB");
            //source_mapping.set("FE212AB8-5DD9-4404-9732-3C66724EBF83".toLowerCase(), "Schmett D");

            if (e.selected[0].getId().startsWith("admin_envelope")) {
                selectState(e.selected[0]);
                e.selected.pop();

                refreshPhaenogram();
                refreshStatistics();
                
            } else if (e.selected[0].getId().startsWith("tk25KML")) {

                if ($("#_selectedSpecies").val() == "0") {
                    GVM.interaction.getFeatures().clear();
                   
                    return;
                }

                $.ajax({
                    url: GVM.OlServiceBase + '/Taxonomy.asmx/GetEvidencesByTk25Id',
                    type: "POST",
                    cache: false,
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    //@TODO: replace
                    data: JSON.stringify({ speciesId: $("#_selectedSpecies").val(), yearFrom: selectedDateFrom, yearTo: selectedDateTo, tk25Id: props.tk25_id, clientId: GVM.PortalClientId }),
                    success: function (result) {

                        observerViewModel.set("evidences", []);

                        if (observerViewModel.evidences.length > 0) {
                            observerViewModel.evidences.splice(0, observerViewModel.evidences.length);
                        }

                        $.each(result.d, function (i, v) {
                            if (!result.d[i].DisplayName) {
                                observerViewModel.evidences.push({ dateYear: result.d[i].Year, observer: result.d[i].Name, adviceId: result.d[i].AdviceId, clientName: result.d[i].ClientNameShort, ClientId: result.d[i].ClientId });
                            } else {
                                observerViewModel.evidences.push({ dateYear: result.d[i].Year, observer: result.d[i].Name, adviceId: result.d[i].AdviceId, clientName: result.d[i].DisplayName, ClientId: result.d[i].ClientId });
                            }
                        });

                        var dataSource = new kendo.data.DataSource({
                            data: observerViewModel.evidences,
                            contentElement: "",
                            group: [
                                { field: 'dateYear', dir: 'desc' },
                                { field: 'observer', dir: 'desc' }
                            ]
                        });
                        dataSource.fetch();

                        observerViewModel.set("evidencesGrouped", dataSource);

                        observerViewModel.set("tk25Name", props.tk25_id.substring(0, 4) + " " + props.tk25_name);
                        $("#phaenogramView").hide();
                        $("#obseverView").show();
                    }
                });
            } else {

            }
            //alert(.tk25_name);
        }

        function filterByDateTo() {
            selectedDateTo = this.value() ?? 9999;
            localStorage.setItem('EvidenceMap_dateTo', selectedDateTo);
            resetSelection();
            refreshMap();
            refreshStatistics();
            refreshPhaenogram();
        }

        function refreshMap() {

            if ($("#evidenceMap") && GVM.evidenceLayer) {
                console.log("GVM.evidenceLayer");
                var params = GVM.evidenceLayer.getSource().getParams();
                params.t = new Date().getMilliseconds();
                params.datefrom = selectedDateFrom;
                params.dateto = selectedDateTo;
                params.taxonid = (parseInt(GVM.TaxonId) < 0 ? "0" : GVM.TaxonId);
                params.conceptid = (parseInt(GVM.TaxonId) > 0 ? "0" : $("#_selectedSpecies").val().replace("-", ""));
                GVM.evidenceLayer.getSource().updateParams(params);

                //tk25SourceBlur
                //GVM.tk25Features
                //tk25SourceBlur
                //GVM.tk25Features
                /*
                console.log(GVM.tk25Features);
                params = GVM.tk25Features.getSource().getParams();
                params.taxonid = $("#_selectedSpecies").val();
                GVM.tk25Features.getSource().updateParams(params);
                if (typeof (GVM.tk25Features) !== 'undefined') {
                    GVM.tk25Features.getSource().clear(true);
                    GVM.tk25Features.getSource().refresh();
                }
                */
            }

            if (GVM.tk25blurredOnlyFeatures) {
                //clear -> auto-reload
                GVM.tk25blurredOnlyFeatures.getSource().clear();
            }
        }

        function updateContentPage() {

        }

        function filterByDateFrom() {
            selectedDateFrom = this.value() ?? 0;
            selectedDateTo = this.value() && selectedDateTo == 9999 ? new Date().getFullYear() : selectedDateTo;
            localStorage.setItem('EvidenceMap_dateFrom', selectedDateFrom);

            resetSelection();
            refreshPhaenogram();

            var params = GVM.evidenceLayer.getSource().getParams();
            params.t = new Date().getMilliseconds();
            params.datefrom = selectedDateFrom;
            GVM.evidenceLayer.getSource().updateParams(params);

            console.log(GVM.tk25Features);
            if (GVM.tk25Features) {
                GVM.tk25Features.getSource().clear(true);
                GVM.tk25Features.getSource().refresh();
            }
            refreshStatistics();
        }

        function resetSelection() {
            if (typeof (interaction) != 'undefined') {
                interaction.getFeatures().clear();
            }
            $("#phaenogramView").show();
            $("#obseverView").hide();
        }

        function nameLoaded() {

            resetSelection();
            refreshMap();
            refreshPhaenogram();
            kendo.ui.progress($("#evidenceMap"), false);
            var listView = $("#photoListview").data("kendoListView");
            // refreshes the ListView
            if (listView)
                listView.refresh();
            //$find("_speciesSelectionComboBox").clearSelection();
        }

        function nameLoading() {
            kendo.ui.progress($("#evidenceMap"), true);
        }

        function hideResetButton(sender) {
            sender.set_visible(false);
        }

        $("#_toggleNatbsButton").on("change", function () {
            var val = $(this).is(':checked') ? 1 : 0;
            if (val > 0) {
                GVM.natbsLayer.setOpacity(0.5);
            } else {
                GVM.natbsLayer.setOpacity(0);
            }
        })
    </script>


    <!--TEMPLATES-->
    <script id="row-template" type="text/x-kendo-template">
            <tr>
                <td data-bind="text: dateYear">
                </td>
                <td data-bind="text: observer"></td>
		        <td data-bind="text: clientName"></td>		        
                    # if (GVM.IsAuthenticated) { #
                        <td><a href="User/AdviceTask.aspx?selectedAdvices=#:adviceId#"  title="Anfrage senden"><i class="far fa-comment-dots"></i></a></td>
                    # } #
                    # if (GVM.IsAuthenticated && GVM.taxonAcl.Edit) { #
                        # if (ClientId == "cc1f6810-e20c-4c16-aa08-3ba7058dc00c") { #
                            <td><a target="_blank" href="Admin/EvidenceEdit.aspx?ID=#:adviceId#"  title="Bearbeiten"><i class="fa fa-edit"></i></a></td>
                        # } else if(ClientId == "fe212ab8-5dd9-4404-9732-3c66724ebf83") { #
                            <td><a target="_blank" href="https://www.lepidoptera.de/Lepi/Admin/EvidenceEdit.aspx?ID=#:adviceId#"  title="Bearbeiten"><i class="fa fa-edit"></i></a></td>
                        # } #
                    # } #
            </tr>
    </script>
    <script id="row-template-grouped" type="text/x-kendo-template">
            
                # for (var i = 0; i < data.items.length; i++) { #
                    <tr>
                        <td>#=data.value#</td>
                        <td>#= data.items[i].value#</td>
                        <td>#= data.items[i].items[0].clientName#</td>
                        <td>#= data.items[i].items.length#</td>
                    </tr>
                # } #
            
    </script>
    <script id="tk25-template" type="text/x-kendo-template">
	        <b>
                <div data-bind="text: tk25Name" style="margin:4px 0 4px 0"></div>
	        </b>
    </script>

    <script id="foto-template" type="text/x-kendo-template">
	        <div class="image_wrap">
	            <span class="imageSpan" data-uid="#: uid#">
	                <img src="/ShowImage.aspx?cache=true&src=#= encodeURI(ImagePath)#&width=198&height=148&bgColor=White"  />
                    </br>
                    <div style="padding:5px;">
                    <b>#:Title#</b>#=IsPinned? "&nbsp;<i title='Angeheftet' class='fas fa-thumbtack'></i>":"" #<br />
	                #:Description#<br/>
	                &copy; #:Copyright#<br/>
                    </div>
    	        </span>
                <div>
                    <a class="k-button k-edit-button editImageButton" style="display:none;" href="\\#"><span class="k-icon k-i-pencil"></span></a>
		            <a class="k-button k-delete-button deleteImageButton" style="display:none;" href="\\#"><span class="k-icon k-i-trash"></span></a>
                </div>
	        </div>
    </script>

    <script id="foto-editTemplate" type="text/x-kendo-template">
            <div class="image_wrap new">
	            <span style="display: block;width:300px;font-size:12px;font-style:normal;">
	                Titel<br/>
	                <input class="k-textbox"  data-bind="value:Title" style="width:100%"/><br/>
	                Copyright<br/>
	                <input class="k-textbox"  data-bind="value:Copyright"  style="width:100%" /><br/>
	                Index für Steckbrief<br/>
	                <input data-role="numerictextbox" data-min="0" data-format="n0" data-bind="value:Index" /><br/>
	                Beschreibung<br/>
	                <input data-role="textbox" data-bind="value:Description"  style="width:100%" /><br/>
	                <br/>
                    Angeheftet<br/>
                    <input name="IsPinned" data-bind="value:IsPinned" type="checkbox" class="ckbox" /><br/>
	                <input name="image"
                                   type="file"
                                   data-role="upload"
                                   data-multiple="false"
                                   data-async="{ saveUrl: GVM.OlServiceBase + '/BiodivGeo.svc/UploadTaxonImage', removeUrl: GVM.OlServiceBase + '/BiodivGeo.svc/UploadTaxonImage', autoUpload: true }"
                                   data-bind="events: { upload: getUploadCode, remove: getUploadCode, success: setUploadCode }"
				                   data-localization="{ select: 'Bild hochladen',cancel: 'Abbrechen',headerStatusUploaded: 'fertig!', headerStatusUploading: 'übertrage Daten',}"
				                    />
	                <br/>
	                Dateiformat
	                <br/>
	                <input id="fileFormatCombobox" data-bind="value:FileFormat" 
					                data-role="combobox"
					                data-value-field="FileFormatId"
					                data-text-field="FileFormatName"
					                data-value-primitive="true"
					                data-source="fileFormatDatasource"
                    />
                    <div class=row>
                        <div class="col col-xs-6">
	                        <a class="k-button k-update-button" href="\\#"><span class="k-icon k-i-floppy"></span></a>
                        </div>
                        <div class="col col-xs-6">
	                        <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-i-undo"></span></a>
                        </div>
                    </div>
	            </span>
        </div>
    </script>

                        </div>
                    </div>
                </div>
            </main>
            <style>
    footer {
        height: 36px !important;
        min-height: unset;
        bottom: 0px;
        position: fixed;
        left:0;
        right:0;
    }
    #footerfull img {
        
    }
</style>
<footer>
    <div class="container" id="footerfull" style="color: white">
        <div class="row p-1">
            <div class="col-12 col-md-12 justify-content-center">
                
                    <a style="text-align: center !important" href="Content.aspx?goto=IMPRESSUM">Impressum</a>
                
            </div>
        </div>
    </div>
</footer>
        </div>
    

<script type="text/javascript">
//<![CDATA[
window.__TsmHiddenField = $get('_scriptManager_TSM');Sys.Application.add_init(function() {
    $create(Telerik.Web.UI.RadAjaxManager, {"_updatePanels":"","ajaxSettings":[],"clientEvents":{OnRequestStart:"",OnResponseEnd:""},"defaultLoadingPanelID":"","enableAJAX":true,"enableHistory":false,"links":[],"styles":[],"uniqueID":"ctl00$_telerikAjaxManager","updatePanelsRenderMode":0}, null, null, $get("ctl00__telerikAjaxManager"));
});
//]]>
</script>
</form>
</body>
</html>
 contentType 9 text/html url 67 https://www.schmetterlinge-d.de:443/Lepi/EvidenceMap.aspx?Id=443442 responseCode 3 200 