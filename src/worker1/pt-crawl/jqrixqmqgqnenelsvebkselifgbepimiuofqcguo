jqrixqmqgqnenelsvebkselifgbepimiuofqcguo length 5 12610 page 12610 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<TITLE>Identity-Based Encryption</TITLE>
</HEAD>

<body bgcolor="#B0D0D0">

<p align="center"><img src="../stanford_seal64.gif" alt="Stanford"
width="64" height="64"> </p>

<H1 align=center><font color="#0000FF" face="Arial">IBE Secure E-mail
</font></H1>

<table align="center" cellpadding="5">
  <tr>
    <td><a href="#description">Description</a></td>
    <td><a href="#publications">Publications</a></td>
    <td><a href="#technical">Technical Summary</a></td>
    <td><a href="#staff">Project Staff</a></td>
  </tr>
</table>
<HR>
<a name="downloads"></a><H2>Downloads</H2>

<UL>
<LI>Stanford <A href="http://crypto.stanford.edu/pbc/">
Pairings Based Crypto</A> (PBC) library source code.
<BR> &nbsp;

<LI> An <A href=http://www.voltage.com/ibe_dev/>IBE toolkit</a> is also
available from <a href=http://www.voltage.com>Voltage Security</a>.
<BR> &nbsp;

<LI> <A href=http://indigo.ie/~mscott/>MIRACL</A> is a big number library 
that includes a pairing implementation.
</UL>

<HR>

<a name="description"></a><H2>Description</H2>

An Identity Base Encryption (IBE) scheme is a public-key cryptosystem
where any string is a valid public key. In particular, email addresses
and dates can be public keys.  The IBE email system is based on the
first practical <a href="http://crypto.stanford.edu/~dabo/abstracts/ibe.html">
Identity-Based Encryption scheme</a> (IBE).  The cryptosystem has
chosen ciphertext security in the random oracle model assuming an
elliptic curve variant of the computational Diffie-Hellman
problem. 

<p>The IBE email system has some nice properties such as:
<ul>
  <li>Senders can send mail to recipients who have not yet setup
a public key,&nbsp;</li>
  <li>When sending email there is no need for an online lookup to obtain the recipient's certificate,&nbsp;</li>
  <li>Senders can send email that can only be read at some specified time in the future, and&nbsp;</li>
  <li>The system proactively refreshes the recipient's private key every short 
time period.&nbsp;</li>
</ul>

More information is given <a href="#technical">below</a>.  The main
objective of this project is to encourage use of encrypted
email. 

<HR>

<a name="publications"></a><H2>Publications</H2>
<UL>
  <LI><A href="http://crypto.stanford.edu/~dabo/pubs/abstracts/bfibe.html">Identity 
  based encryption from the Weil pairing</A> by <A 
  href="http://crypto.stanford.edu/~dabo/">D. Boneh</A> and <A 
  href="http://www.cs.ucdavis.edu/~franklin/">M. Franklin</A> <BR>
  SIAM J. of Computing, Vol. 32, No. 3, pp. 586-615, 2003. <BR>
  Extended abstract in proc. of Crypto '2001, LNCS
  Vol. 2139, Springer-Verlag, pp. 213-229, 2001. 
</LI></UL>
<HR>

<a name="technical"></a><H2>Technical Summary</H2>

In 1984 Shamir asked for a public key encryption scheme
in which the public key can be an arbitrary string.   Encryption
schemes of this type are called Identity Based Encryption (IBE).
Shamir's original motivation for identity-based encryption was to
simplify certificate management in e-mail systems.  When Alice sends
mail to Bob at <I>bob@hotmail.com</I> she simply encrypts her message
using the public key string ``bob@hotmail.com''.  There is no
need for Alice to obtain Bob's public key certificate.  When Bob
receives the encrypted mail he contacts a third party, which we call
the Private Key Generator (PKG).  Bob authenticates himself to the PKG
in the same way he would authenticate himself to a CA and obtains his
private key from the PKG.  Bob can then read his e-mail.  Note that
unlike the existing secure e-mail infrastructure, Alice can send
encrypted mail to Bob even if Bob has not yet setup his public key
certificate.  However, in this scenario the IBE system
provides key escrow since the PKG knows Bob's private key.  Other
applications (discussed below) do not require key escrow.
In more detail, an IBE scheme consists of four algorithms: 
(1) <b>Setup</b> generates global system parameters and a master-key, 
(2) <b>Extract</b> uses the master-key to generate the private key 
corresponding to an arbitrary public key string ID, 
(3) <b>Encrypt</b> encrypts messages using the public key ID, and 
(4) <b>Decrypt</b> decrypts messages using the corresponding private key.

<p>
Since the problem was posed in 1984 there have been several proposals
for IBE schemes.  However, none of these are fully
satisfactory. Some solutions require that users not collude.  Other
solutions require the PKG to spend a long time for each private key
generation request.  Some solutions require tamper resistant hardware.
It is fair to say that, until now, constructing a usable IBE system was an
open problem. 

<p>
The IBE email system uses a new fully functional identity-based encryption
scheme. The performance of the cryptosystem is comparable to the performance
of ElGamal encryption.  The security of the system is
based on a natural analogue of the computational Diffie-Hellman
assumption on elliptic curves.  Based on this assumption we show that
the new system has chosen ciphertext security in the random oracle
model.  Using standard techniques from threshold
cryptography the PKG in the system can be
distributed so that the  <I>master-key</I> is never available in a
single location.   This enhances security of the master-key stored 
at the PKG.




<H2>Applications for Identity-Based Encryption</H2>

The original motivation for identity-based encryption is to help the
deployment of a public key infrastructure.  
More generally, IBE can simplify systems that manage a large number of
public keys.  Rather than storing a big database of public keys the system
can either derive these public keys from usernames, or simply use the
integers {1, ... ,n} as distinct public keys.  We discuss
several specific applications below.

<H3>Revocation of Public Keys</H3>

Public key certificates contain a preset expiration date.  In an IBE
system key expiration can be done by having Alice encrypt e-mail sent to Bob 
using the public key:
<I> bob@hotmail.com || current-year </I>.  In doing so Bob can use
his private key during the current year only.  Once a year Bob 
needs to obtain a new private key from the PKG.  Hence, we get
the effect of annual private key expiration.  Note that unlike the 
existing PKI, Alice does not need to obtain a new certificate from Bob 
every time Bob refreshes his certificate.

<p>
One could potentially make this approach more granular by encrypting
e-mail for Bob using <I> bob@hotmail.com || current-date </I>.  This
forces Bob to obtain a new private key every day.  This might be feasible
in a corporate PKI where the PKG is maintained by the corporation. With
this approach key revocation is quite simple: when Bob leaves the company
and his key needs to be revoked, the corporate PKG is instructed to
stop issuing private keys for Bob's e-mail address.  
The interesting property is that Alice does not need to communicate
with any third party to obtain Bob's daily public key.  This approach
enables Alice to send messages into the future: Bob will only be able
to decrypt the e-mail on the date specified by Alice.


<H3>Delegation of Decryption Keys</H3>

Another application for IBE systems is delegation of
decryption capabilities.  We give two example applications. In both
applications the user Bob plays the role of the PKG.  Bob runs
the setup algorithm to generate his own IBE system parameters
<I>params</I> and his own <I>master-key</I>.  Here we view
<I>params</I> as Bob's public key.  Bob obtains
a certificate from a CA for his public key <I>params</I>.
When Alice wishes to send mail to Bob she first obtains Bob's
public key <I>params</I> from Bob's public key certificate.  Note
that Bob is the only one who knows his <I>master-key</I> and hence
there is no key-escrow with this setup.

<p>
<B>Delegation to a laptop.</B>  Suppose Alice encrypts mail to Bob
using the current date as the IBE encryption key (she uses Bob's 
<I>params</I> as the IBE system parameters).  Since Bob has the
<I>master-key</I> he can extract the private key corresponding to
this IBE encryption key and then decrypt the message.  Now, suppose
Bob goes on a trip for seven days.  Normally, Bob would put his private key
on his laptop.  If the laptop is stolen the private key is compromised.
When using the IBE system Bob could simply install on his laptop the seven 
private keys corresponding to the seven days of the trip.  If the laptop
is stolen, only the private keys for those seven days are compromised.  The
<I>master-key</I> is unharmed. 

<p>
<B>Delegation of duties.</B>  Suppose Alice encrypts mail
to Bob using the subject line as the IBE encryption key.  Bob can
decrypt mail using his <I>master-key</I>.  Now, suppose Bob has several
assistants each responsible for a different task (e.g. one is
`purchasing', another is `human-resources', etc.).  Bob gives one
private key to each of his assistants corresponding to the assistant's
responsibility.  Each assistant can then decrypt messages whose
subject line falls within its responsibilities, but it cannot decrypt
messages intended for other assistants.  Note that Alice only obtains
a single public key from Bob (<I>params</I>) and she uses that public
key to send mail with any subject line of her choice.  The mail can
only be read by the assistant responsible for that subject.



<!--
<H2>The IBE system</H2>

The Boneh-Franklin IBE system <a href="http://crypto.stanford.edu/~dabo/abstracts/ibe.html">appeared</a> in Crypto '2001.
The system works with points on an 
elliptic curve. There is a group action defined on the points,
so we can "multiply" a point
<I> P </I> by an integer
<I> a </I> to obtain another point
<I> aP </I>.
At the heart of the system is a bilinear mapping based on the 
Weil pairing, i.e. a function
<I> f </I> that takes two points and outputs a number, and has the property
<I> f(aP,&nbsp;bQ) = f(P,&nbsp;Q)^ab </I> for any points
<I> P, Q </I> and for any integers
<I> a, b </I>.
<P>The master secret is some integer
<I> x </I> known only to the private key generator. 
The system parameters contains two points,
<I> P </I> and
<I> xP </I>. A public key is a point
<I> Q </I>
(a string can easily be hashed to a point on an elliptic curve) and the 
corresponding private key is the point
<I> xQ </I>.
<P>Then to encrypt, the sender picks a random
<I> r </I> and uses
<I> g = f(Q,&nbsp;xP)^r </I> as a session key, and sends
<I> rP </I> to the receiver. If the receiver has not already done so, it
requests its private key from the private key generator.
The receiver can then compute
<I> g </I> since
<I>  f(xQ,&nbsp;rP) = f(Q,&nbsp;xP)^r </I>.
<P>On the other hand, an eavesdropper sees only
<I> P, xP, rP </I> and
<I>  Q </I>, and
it is difficult to compute
<I> g </I> with just this information.
<P>In fact, it can be shown (in the random oracle model)
that an attacker cannot efficiently compute
<I> g </I> if
the <B> Bilinear-Diffie-Hellman assumption </B> is true, that is,
it is impossible to efficiently
determine
<I> f(P, P)^abc </I> given
<I> P, aP, bP </I> and
<I> cP </I>.
<P>
(This description has been simplified: the system actually uses an extra
level of hashing in order to obtain chosen-ciphertext security.)
<P>
Note that the master-key stored at the PKG can be split into
multiple pieces using techniques from threshold cryptography.
Each piece of the master-key is stored in a different location and there
is never a need to recombine these pieces.  The resulting distributed
PKG can issue keys without ever reconstructing the master-key in a single
location.
<P>
Several other fields are appended to an email address before it counts
as a valid ID; these include a date field (for key expiration; in this
system it is only changed yearly but in real life shorter timespans
are more desirable), a version field and a system ID field.
-->

<HR>

<a name="staff"></a><H2>Project Staff</H2>
<UL>
  <LI><A href="http://www.stanford.edu/~dabo">Dan Boneh</A> 
  <LI><A href="http://www.cs.ucdavis.edu/~franklin/">Matt Franklin</A></LI>
  <LI><A href="http://www-cs-students.stanford.edu/~blynn">Ben Lynn</A> 
  <LI><A href="http://crypto.stanford.edu/~mpauker/">Matt Pauker</A> 
  <LI><A href="http://crypto.stanford.edu/~rkacker/">Rishi Kacker</A> 
  <LI><A href="http://http://www.ics.uci.edu/~gts/">Gene Tsudik</A></LI>
</UL>
<HR>

<A href="http://crypto.stanford.edu">Applied crypto group</A>
<p><i>
Last update:
Mon Apr  8 03:58:58 PDT 2002
blynn
</i>
</BODY>
</HTML>
 contentType 9 text/html url 36 https://crypto.stanford.edu:443/ibe/ responseCode 3 200 