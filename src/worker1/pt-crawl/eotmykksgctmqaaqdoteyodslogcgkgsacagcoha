eotmykksgctmqaaqdoteyodslogcgkgsacagcoha length 6 169829 page 169829 <!DOCTYPE html><!-- Last Published: Wed Apr 10 2024 17:53:09 GMT+0000 (Coordinated Universal Time) --><html data-wf-domain="webflow.semanticscholar.org" data-wf-page="6584745360a4872a287a891b" data-wf-site="605236bb767e9a5bb229c63c" lang="en"><head><meta charset="utf-8"/><title>Tutorial | Semantic Scholar Academic Graph API</title><meta content="Quick guide to get started with Semantic Scholar Academic Graph API." name="description"/><meta content="Tutorial | Semantic Scholar Academic Graph API" property="og:title"/><meta content="Quick guide to get started with Semantic Scholar Academic Graph API." property="og:description"/><meta content="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/60a2cb67437bf2de419d5137_s2-og.png" property="og:image"/><meta content="Tutorial | Semantic Scholar Academic Graph API" property="twitter:title"/><meta content="Quick guide to get started with Semantic Scholar Academic Graph API." property="twitter:description"/><meta content="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/60a2cb67437bf2de419d5137_s2-og.png" property="twitter:image"/><meta property="og:type" content="website"/><meta content="summary_large_image" name="twitter:card"/><meta content="width=device-width, initial-scale=1" name="viewport"/><link href="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/css/semanticscholar.de0f8ed73.min.css" rel="stylesheet" type="text/css"/><link href="https://fonts.googleapis.com" rel="preconnect"/><link href="https://fonts.gstatic.com" rel="preconnect" crossorigin="anonymous"/><script src="https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js" type="text/javascript"></script><script type="text/javascript">WebFont.load({  google: {    families: ["Lato:100,100italic,300,300italic,400,400italic,700,700italic,900,900italic","Roboto Slab:300,regular,500,700","Roboto:300,regular,500,700,900","Roboto Mono:regular","Roboto Mono:100,200,300,regular"]  }});</script><script type="text/javascript">!function(o,c){var n=c.documentElement,t=" w-mod-";n.className+=t+"js",("ontouchstart"in o||o.DocumentTouch&&c instanceof DocumentTouch)&&(n.className+=t+"touch")}(window,document);</script><link href="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/609add8e5f5ce7570f656904_favicon.png" rel="shortcut icon" type="image/x-icon"/><link href="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/609adda9bd029148c37023a9_webclip.png" rel="apple-touch-icon"/><link href="/api/1/user/webflow.css" rel="stylesheet" type="text/css">

<!-- Heap Analytics Snippet -->
<script type="text/javascript">
      window.heap=window.heap||[],heap.load=function(e,t){window.heap.appid=e,window.heap.config=t=t||{};var r=t.forceSSL||"https:"===document.location.protocol,a=document.createElement("script");a.type="text/javascript",a.async=!0,a.src=(r?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(a,n);for(var o=function(e){return function(){heap.push([e].concat(Array.prototype.slice.call(arguments,0)))}},p=["addEventProperties","addUserProperties","clearEventProperties","identify","removeEventProperty","setEventProperties","track","unsetEventProperty"],c=0;c<p.length;c++)heap[p[c]]=o(p[c])};
      heap.load("2424575119");
</script>
<!--End Heap Analytics Snippet-->

<style type="text/css">
  
	/* Auth */
	.site-header__navigation-auth {
		display: var(--has-auth--block) !important;
  	}
	.site-header__navigation-not-auth {
		display: var(--no-auth--none) !important;
  	}
  
	/* Dropdown Menu Top Bar */
	.dropdown .dropdown__menu:before{
    	border-color: transparent transparent #1857B6 transparent;
		border-style: solid;
		border-width: 0 8px 8px 8px;
		content:"";
		height: 0;
		position: absolute;
		right: 12px;
		top: -12px;
		width: 0;
	}
  
	/* Embedded Newsletter Hubspot Form */
	.newsletter .hbspt-form label{
		margin: 0;
	}
	.newsletter .hbspt-form .hs-form {
		align-items: end;
		display: flex;
	}
	.newsletter .hbspt-form .hs-form-field {
		flex: 1;
		position: relative;
	}
	.newsletter .hbspt-form .hs-form-field .hs-input {
		border: 1px solid #546973;	
		font-size: 16px;
		height: 36px;
		line-height: 36px;
		padding: 8px;
		width: 100%;
	}
	.newsletter .hbspt-form .hs-form-field .hs-input.error {
		border-color: #a92020;
	}
	.newsletter .hbspt-form .hs-form-field .hs-error-msgs {
		background: #a92020;
		bottom: -44px;
		left: 4px;
		list-style: none;
		margin: 0;
		padding: 6px 12px;
		position: absolute;
	}
	.newsletter .hbspt-form .hs-form-field .hs-error-msgs:after {
		border-color: transparent transparent transparent #a92020;	
		border-style: solid;
		border-width: 8px 0 0 8px;
		content: "";
		height: 0;
		left: 0;
		position: absolute;
		top: -8px;
		width: 0;
	}
	.newsletter .hbspt-form .hs-form-field .hs-error-msg {
		color: #fff;
		font-size: 14px;
	}
	.newsletter .hbspt-form .hs-submit {
		flex: 0 0 auto;
	}
	.newsletter .hbspt-form .hs-submit .hs-button {
		background: #1857B6;
		border: none;
		border-radius: 0 3px 3px 0;
		color: #fff;
		cursor: pointer;
		font-size: 14px;
		height: 36px;
		line-height: 36px;
		margin: 0;
		padding: 0 14px;
		transition: background-color 250ms cubic-bezier(.25, .46, .45, .94);
	}
	.newsletter .hbspt-form .hs-submit .hs-button:hover {
		background: #0f3875;
	}
	.newsletter .hbspt-form .hs_error_rollup {
		display: none;
	}
	.newsletter .hbspt-form .submitted-message{
		border: 1px solid #1857B6;
		border-radius: 3px;
		padding: 12px;
	}
	.newsletter .hbspt-form .submitted-message p {
		color: #fff;
		margin: 0;
		text-align: left !important;
	}
	.newsletter-embed--accessibility .hbspt-form label{
    	color: #fff;
      	font-family: "Roboto Slab", Serif;
		font-size: 18px;
      	font-weight: 400;
	    text-align: center;
      	padding-bottom: 12px;
  	}
  
  	/* Paper Object */
	.paper{
		filter: drop-shadow(0 1px 2px rgba(0,0,0,.1));
	}
	.paper:after{
		background: #D9DADB;
		clip-path: polygon(0 0, 100% 100%, 0 100%);
		content: " ";
		height: 24px;
		position: absolute;
		right: 0;
		top: 0;
		width: 24px;
	}
	.paper__content{
		clip-path: polygon(0 0, calc(100% - 24px) 0%, 100% calc(0% + 24px), 100% 100%, 0% 100%);
	}
  
  
  	/* Testimonials */
  	.testimonial__citation:after{
		content: "";
		position: absolute;
	    top: 36px;
		width: 0;
		height: 0;
		border-style: solid;
		border-width: 8px 0 8px 8px;
		border-color: transparent transparent transparent #f5f6f7;
		left: -24px;
  	}
  
  	.testimonial__citation.testimonial__citation--alt:after{
		left: auto;
    	right: -24px;
	    border-width: 8px 8px 8px 0;
    	border-color: transparent #f5f6f7 transparent transparent; 
	}
  
  	@media screen and (max-width: 767px){
		.testimonial__citation:after{
			display: none;
      	}
  }
</style></head><body class="body"><header class="site-header site-header--fixed"><div class="site-header__content"><a href="https://www.semanticscholar.org" class="site-header__logo w-inline-block"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6053b48e21b11570b9788241_s2-logo-small.svg" loading="lazy" alt="Semantic Scholar" height="36" class="logo-small"/><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/605274dd4af9b0ca8ac84182_s2-logo.svg" loading="lazy" alt="Semantic Scholar" height="36" class="logo-large"/></a><div class="site-header__search w-form"><form id="wf-form-Search" name="wf-form-Search" data-name="Search" action="https://www.semanticscholar.org/search" method="get" class="search__form" data-wf-page-id="6584745360a4872a287a891b" data-wf-element-id="6ab03a1e-944e-9291-1968-b70fe5f1160b"><input class="search__field w-input" maxlength="256" name="q" data-name="q" placeholder="Search over 214 million papers from all fields of science" type="text" id="q"/><input type="submit" data-wait="Please wait..." class="search__submit w-button" value="Search"/></form><div class="w-form-done"><div>Thank you! Your submission has been received!</div></div><div class="w-form-fail"><div>Oops! Something went wrong while submitting the form.</div></div></div><div class="site-header__navigation site-header__navigation-auth"><div class="site-header__navigation-wrapper"><a data-w-id="6ab03a1e-944e-9291-1968-b70fe5f11616" href="#" class="site-header__navigation-close w-inline-block"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/60908306c5938d99543d2b58_close.svg" loading="lazy" alt=""/></a><div data-hover="false" data-delay="0" class="site-header__navigation dropdown w-dropdown"><div class="site-header__navigation dropdown button button--secondary w-dropdown-toggle"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/605b9e8398d437113ca1d650_icon-account.svg" loading="lazy" alt="Icon - Account" height="12" class="dropdown image"/><div class="dropdown icon w-icon-dropdown-toggle"></div><div class="dropdown dropdown__text">Account</div></div><nav class="dropdown dropdown__menu w-dropdown-list"><a href="https://www.semanticscholar.org/me/research" class="dropdown dropdown__link w-inline-block"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/62dafc4d8c585c6c25f98ce9_menu-icon-dashboard.svg" loading="lazy" width="18" height="18" alt="" class="dropdown dropdown__image"/><div>Research Dashboard</div></a><a href="https://www.semanticscholar.org/me/recommendations" class="dropdown dropdown__link w-inline-block"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/62dafc4d4e4b2383249840d1_menu-icon-feeds.svg" loading="lazy" width="18" height="18" alt="" class="dropdown dropdown__image"/><div>Research Feeds</div></a><a href="https://www.semanticscholar.org/me/library/all" class="dropdown dropdown__link w-inline-block"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/62dafc4c42e988c961b5809a_menu-icon-library.svg" loading="lazy" width="18" height="18" alt="" class="dropdown dropdown__image"/><div>Library</div></a><a href="https://www.semanticscholar.org/me/account" class="dropdown dropdown__link dropdown__link--section w-inline-block"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/62dafc4d3f5f3076275ec271_menu-icon-settings.svg" loading="lazy" width="18" height="18" alt="" class="dropdown dropdown__image"/><div>Settings</div></a><a href="https://www.semanticscholar.org/me/research" class="dropdown dropdown__link w-inline-block"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/62dafc4c2ab4d9438fee8d1c_menu-icon-logout.svg" loading="lazy" width="18" height="18" alt="" class="dropdown dropdown__image"/><div>Sign Out</div></a></nav></div></div><a data-w-id="6ab03a1e-944e-9291-1968-b70fe5f11630" href="#" class="site-header__navigation-open">Menu</a></div><div class="site-header__navigation site-header__navigation-not-auth"><div class="site-header__navigation-wrapper"><a data-w-id="6ab03a1e-944e-9291-1968-b70fe5f11634" href="#" class="site-header__navigation-close w-inline-block"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/60908306c5938d99543d2b58_close.svg" loading="lazy" alt=""/></a><a href="https://www.semanticscholar.org/sign-in" class="site-header__navigation button button--secondary w-button">Sign In</a><a href="https://www.semanticscholar.org/sign-in" class="site-header__navigation button w-button">Create Free Account</a></div><a data-w-id="6ab03a1e-944e-9291-1968-b70fe5f11662" href="#" class="site-header__navigation-open">Menu</a></div></div></header><main class="main"><div class="section-navigation"><div class="section-navigation__container"><div class="section-navigation__intro"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/624235ea65058666ddc08d70_S2AG.svg" loading="lazy" alt="Logo for Semantic Scholar Academic Graph API" class="section-navigation__logo"/><a href="/product/api" class="section-navigation__title">Semantic Scholar API</a></div><ul role="list" class="section-navigation__links"><li><a href="/product/api" class="section-navigation__link">Overview</a></li><li><a href="/product/api/tutorial" aria-current="page" class="section-navigation__link w--current">Tutorial</a></li><li><a href="https://api.semanticscholar.org/api-docs/" class="section-navigation__link">Documentation</a></li><li><a href="/product/api/gallery" class="section-navigation__link">Gallery</a></li><li><a href="https://www.semanticscholar.org/paper/The-Semantic-Scholar-Open-Data-Platform-Kinney-Anastasiades/cb92a7f9d9dbcf9145e32fdfa0e70e2a6b828eb1" target="_blank" class="section-navigation__link section-navigation__link__cta">Cite the Paper</a></li></ul></div></div><div class="blade blade--white"><div class="blade__grid blade__grid--2-1 blade__grid--v-centered"><div class="blade__content"><h1>Semantic Scholar API - Tutorial</h1><p class="p__intro p__intro--header"><strong>Get Started with Semantic Scholar API</strong></p><p class="p__intro">Learn to search for papers and authors, download datasets, and more</p></div><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6462a2d97df4b1fcdf6b814e_api-tutorials.png" loading="lazy" id="w-node-c3d2d69f-2104-52d5-a5b6-7621789aedfe-287a891b" sizes="(max-width: 479px) 95vw, (max-width: 991px) 94vw, 31vw" alt="Quick guide to get started with Semantic Scholar API" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6462a2d97df4b1fcdf6b814e_api-tutorials-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6462a2d97df4b1fcdf6b814e_api-tutorials-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6462a2d97df4b1fcdf6b814e_api-tutorials.png 1000w"/></div></div><div id="Documentation" class="blade"><div class="blade__grid"><div class="card"><ul role="list" class="navigation__anchor w-list-unstyled"><li class="navigation__anchor-item"><a href="#start" data-section="start" class="navigation_anchor-link"><strong>Getting Started Guide</strong></a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#checklist" data-section="start" class="navigation_anchor-link">Checklist before making an API request</a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#endpoint" data-section="start" class="navigation_anchor-link">How do I know the endpoint URL?</a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#base-urls" data-section="start" class="navigation_anchor-link">Base URLs</a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#request" data-section="start" class="navigation_anchor-link">How do I make an API Request?</a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#key" data-section="start" class="navigation_anchor-link">How do I use an API Key?</a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#error" data-section="start" class="navigation_anchor-link">Common Error Codes</a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#pagination" data-section="start" class="navigation_anchor-link">Pagination</a></li><li class="navigation__anchor-item navigation__anchor-item--header"><a href="#paper" data-section="paper" class="navigation_anchor-link"><strong>Academic Graph: Paper</strong></a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#searching-and-retrieving-paper-details" data-section="paper" class="navigation_anchor-link">Searching and Retrieving Paper Details</a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#using-paper-search-with-external-ids" data-section="paper" class="navigation_anchor-link">Using Paper Search with External IDs</a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#filtering-search-results" data-section="paper" class="navigation_anchor-link">Filtering Search Results</a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#using-search-query-operators" data-section="paper" class="navigation_anchor-link">Using Search Query Operators</a></li><li class="navigation__anchor-item navigation__anchor-item--header"><a href="#author" data-section="author" class="navigation_anchor-link"><strong>Academic Graph: Author</strong></a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#searching-and-retrieving-author-details" data-section="author" class="navigation_anchor-link">Searching and Retrieving Author Details</a></li><li class="navigation__anchor-item navigation__anchor-item--header"><a href="#recommendations" data-section="recommendations" class="navigation_anchor-link"><strong>Recommendations</strong></a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#retrieving-paper-recommendations" data-section="recommendations" class="navigation_anchor-link">Retrieving Paper Recommendations</a></li><li class="navigation__anchor-item navigation__anchor-item--header"><a href="#datasets" data-section="datasets" class="navigation_anchor-link"><strong>Datasets</strong></a></li><li class="navigation__anchor-item navigation__anchor-item--nested"><a href="#retrieving-releases-datasets-and-download-links" data-section="datasets" class="navigation_anchor-link">Retrieving Releases, Datasets, and Download Links</a></li><li class="navigation__anchor-item navigation__anchor-item--nested-copy"><a href="#updating-datasets-with-Incremental-diffs" data-section="datasets" class="navigation_anchor-link">Updating Datasets with Incremental Diffs</a></li><li class="navigation__anchor-item navigation__anchor-item--nested-copy"><a href="#Suggestions-for-Working-with-Downloaded-Datasets" data-section="datasets" class="navigation_anchor-link">Suggestions for Working with Downloaded Datasets</a></li></ul></div><div id="w-node-_6ab34d5c-779c-d883-f516-9b39b8fa3a82-287a891b" class="accordion"><div id="start" class="accordion__section"><h2 class="accordion__header">Getting Started Guide</h2><div class="accordion__content accordion__content--open"><p>The Semantic Scholar REST API uses standard HTTP verbs, response codes, and authentication. Our Getting Started Guide will teach you how to interact with the Semantic Scholar API by sending a request and analyzing the response. All code examples are shown in Python. For those who would prefer a code-free experience, you can try out the API using interactive tools like Postman (a popular, free API Testing platform). We have included additional visuals of how each request would look like in Postman for your reference.</p><h3 id="checklist" class="documentation__header margin-top--none">Checklist before making an API request</h3><ul role="list"><li>Do you know the endpoint and its URL?</li><li>Do you know the request parameters?</li><li>Do you need an API key?</li></ul><p>See below for how to obtain each piece of information!<br/></p><h3 id="endpoint" class="documentation__header">How do I know the endpoint URL?</h3><p>An API endpoint URL consists of two main parts:<br/></p><ul role="list"><li><strong>Base URL</strong>: Tells the API where to start looking for the data you want. Each Semantic Scholar service has its own base URL, which you can find below.<br/></li><li><strong>Resource path</strong>: Specifies the entity or action you want to perform.</li></ul><p>For example, the <em>paper relevance search</em> endpoint in the Academic Graph API would have the following URL:<br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b12d016d1fc01d52f2d_GS_endpointUrlExample.png" loading="lazy" sizes="(max-width: 479px) 87vw, (max-width: 767px) 89vw, (max-width: 991px) 90vw, 800px" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b12d016d1fc01d52f2d_GS_endpointUrlExample-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b12d016d1fc01d52f2d_GS_endpointUrlExample-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b12d016d1fc01d52f2d_GS_endpointUrlExample.png 1034w" alt="a diagram displaying the base url [https://api.semanticscholar.org/graph/v1/] and resource path [/paper/search]"/><h3 id="base-urls" class="documentation__header">Base URLs</h3><ul role="list"><li><strong>Academic Graph Service</strong>: <a href="https://api.semanticscholar.org/graph/v1">https://api.semanticscholar.org/graph/v1</a><br/></li><li><strong>Recommendation Service</strong>: <a href="https://api.semanticscholar.org/recommendations/v1">https://api.semanticscholar.org/recommendations/v1</a></li><li><strong>Datasets Service</strong>: <a href="https://api.semanticscholar.org/datasets/v1/">https://api.semanticscholar.org/datasets/v1/</a> </li><li><strong>Peer Review Service</strong>: <a href="https://api.semanticscholar.org/peer-review/submission-pool/">https://api.semanticscholar.org/peer-review/</a></li></ul><h3 id="request" class="documentation__header">How do I make an API Request?</h3><p>Once you have your endpoint URL, use our <a href="https://api.semanticscholar.org/api-docs/" target="_blank">API documentation</a> to determine any input parameters you are required to send with your request, and the format in which they must be sent. For example, the <em>author search </em>endpoint requires us to specify the ‘<em>author id</em>’ as a <strong>path parameter</strong> and to specify the details we want about an author as a <strong>query parameter</strong>.<br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b12c135b5551d70123c_GS_RequestExampleVisual.png" loading="lazy" sizes="(max-width: 479px) 87vw, (max-width: 767px) 89vw, (max-width: 991px) 90vw, 800px" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b12c135b5551d70123c_GS_RequestExampleVisual-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b12c135b5551d70123c_GS_RequestExampleVisual-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b12c135b5551d70123c_GS_RequestExampleVisual-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b12c135b5551d70123c_GS_RequestExampleVisual.png 1272w" alt=""/><p>Once you have your endpoint URL and the required input parameters, you are ready to send your request! Each programming language has its own way of making an API request. Below you will find examples of how to send a request to the <em>paper relevance search</em> endpoint in Python and in Postman.<br/></p><p class="margin-top--m"><strong>Python Example:</strong><br/></p><pre contenteditable="false" id="w-node-d0b48fdc-5d98-e9be-75db-2ca5c4d2f153-287a891b" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab"># Define the API endpoint URL</span><span>
</span><span>url = </span><span style="color:#abe338">&#x27;https://api.semanticscholar.org/graph/v1/paper/search&#x27;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># More specific query parameter</span><span>
</span><span>query_params = {</span><span style="color:#abe338">&#x27;query&#x27;</span><span>: </span><span style="color:#abe338">&#x27;quantum computing&#x27;</span><span>}
</span>
<span></span><span style="color:#d4d0ab"># Directly define the API key (Reminder: Securely handle API keys in production environments)</span><span>
</span><span>api_key = </span><span style="color:#abe338">&#x27;your api key goes here&#x27;</span><span>  </span><span style="color:#d4d0ab"># Replace with the actual API key</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Define headers with API key</span><span>
</span><span>headers = {</span><span style="color:#abe338">&#x27;x-api-key&#x27;</span><span>: api_key}
</span>
<span></span><span style="color:#d4d0ab"># Send the API request</span><span>
</span>response = requests.get(url, params=query_params, headers=headers)

<span></span><span style="color:#d4d0ab"># Check response status</span><span>
</span><span></span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span>   response_data = response.json()
<span>   </span><span style="color:#d4d0ab"># Process and print the response data as needed</span><span>
</span><span>   </span><span style="color:#f5ab35">print</span><span>(response_data)
</span><span></span><span style="color:#dcc6e0">else</span><span>:
</span><span>   </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;Request failed with status code </span><span class="hljs-subst" style="color:#abe338">{response.status_code}</span><span style="color:#abe338">: </span><span class="hljs-subst" style="color:#abe338">{response.text}</span><span style="color:#abe338">&quot;</span><span>)</span></code></pre><p class="margin-top--m"><strong>Postman Request Example:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b1366a1f826f6deda1a_GS_PostmanRequestExample.png" loading="lazy" sizes="(max-width: 479px) 87vw, (max-width: 767px) 89vw, (max-width: 991px) 90vw, 800px" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b1366a1f826f6deda1a_GS_PostmanRequestExample-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b1366a1f826f6deda1a_GS_PostmanRequestExample-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b1366a1f826f6deda1a_GS_PostmanRequestExample.png 1066w" alt="" class="margin-bottom--m"/><p><strong>Response:</strong> A successful response from the paper relevance search endpoint would look like the example below. The first three fields (<em>total, offset, next</em>) are <a href="#pagination">pagination data</a> we can use to page through our results. The <em>data</em> field is a list of objects, each containing information about a paper.</p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b126d1555b4cf233eb8_GS_postmanResponseExample.png" loading="lazy" sizes="(max-width: 479px) 87vw, (max-width: 767px) 89vw, (max-width: 991px) 90vw, 800px" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b126d1555b4cf233eb8_GS_postmanResponseExample-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b126d1555b4cf233eb8_GS_postmanResponseExample-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b126d1555b4cf233eb8_GS_postmanResponseExample-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b126d1555b4cf233eb8_GS_postmanResponseExample.png 1170w" alt=""/><h3 id="key" class="documentation__header">How do I use an API Key?</h3><p>Although not every endpoint requires authentication via an API key, as a best practice we recommend always including your key with every request. Doing so will help Semantic Scholar better support you in the event you need additional help or debugging support. Additionally, all unauthenticated users share a limit of 5,000 requests per 5 minutes. <br/><br/>To authenticate via an API key, include your key in a custom header called “<strong>x-api-key</strong>”, as shown in the Python example below:<br/></p><div class="card card--warning margin-bottom--sm"><p><strong>Warning: </strong>It is advised to store and retrieve your API key values through environment variables instead of hard-coding them.</p></div><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#d4d0ab">#define a custom header called x-api-key</span><span>
</span><span>headers = {</span><span style="color:#abe338">&#x27;x-api-key&#x27;</span><span>: </span><span style="color:#abe338">&#x27;your-api-key-goes-here&#x27;</span><span>}</span></code></pre><p><br/>To include an API key as a header in Postman, you can switch to the Headers tab:<br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b13c579b98d282cd754_GS_PostmanApikeyHeader.png" loading="lazy" sizes="(max-width: 479px) 87vw, (max-width: 767px) 89vw, (max-width: 991px) 90vw, 800px" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b13c579b98d282cd754_GS_PostmanApikeyHeader-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b13c579b98d282cd754_GS_PostmanApikeyHeader-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b13c579b98d282cd754_GS_PostmanApikeyHeader-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65553b13c579b98d282cd754_GS_PostmanApikeyHeader.png 1086w" alt=""/><h3 id="error" class="documentation__header">Common Error Codes</h3><div id="w-node-_0e70eaf4-94f9-ed02-75f2-67c6d3d6ea33-287a891b" class="table table--white table--3"><div class="table__cell table__cell--header"><p class="table__header">Error Code</p></div><div class="table__cell table__cell--header"><p class="table__header">Status</p></div><div class="table__cell table__cell--header"><p class="table__header">Description</p></div><div class="table__cell"><p>400</p></div><div class="table__cell"><p>Bad Request</p></div><div class="table__cell"><p>The server could not understand your request. Check your parameters.</p></div><div class="table__cell"><p>401</p></div><div class="table__cell"><p>Unauthorized</p></div><div class="table__cell"><p>You&#x27;re not authenticated or your credentials are invalid.</p></div><div class="table__cell"><p>403</p></div><div class="table__cell"><p>Forbidden</p></div><div class="table__cell"><p>The server understood the request but refused it. You don&#x27;t have permission to access the requested resource.</p></div><div class="table__cell"><p>404</p></div><div class="table__cell"><p>Not Found</p></div><div class="table__cell"><p>The requested resource or endpoint does not exist.</p></div><div class="table__cell"><p>429</p></div><div class="table__cell"><p>Too Many Requests</p></div><div class="table__cell"><p>You&#x27;ve hit the rate limit, slow down your requests.</p></div><div class="table__cell"><p>500</p></div><div class="table__cell"><p>Internal Server Error</p></div><div class="table__cell"><p>Something went wrong on the server’s side</p></div></div><h3 id="pagination" class="documentation__header margin-top--none margin-bottom--sm">Pagination</h3><p>Pagination is a technique used in APIs to manage and retrieve large sets of data in smaller, manageable chunks. This is particularly useful when dealing with extensive datasets to improve efficiency and reduce the load on both the client and server.<br/></p><p><strong>Key Parameters:</strong></p><ul role="list"><li><strong>Limit:</strong> Specifies the maximum number of items (e.g., papers) to be returned in a single API response. For example, in the request <a href="https://api.semanticscholar.org/graph/v1/paper/search?query=halloween&amp;limit=3">https://api.semanticscholar.org/graph/v1/paper/search?query=halloween&amp;limit=3</a>, the <strong>limit=3</strong> indicates that the response should include a maximum of 3 papers.<br/>‍<br/></li><li><strong>Offset: </strong>Represents the starting point from which the API should begin fetching items. It helps skip a certain number of items. For example, <strong>if offset=10</strong>, the API will start retrieving items from the 11th item onward.<br/>‍</li><li><strong>Next:</strong> A token or identifier provided in the response, pointing to the next set of items. It allows fetching the next page of results. For example, the next field in the response will contain information needed for the client to request the next set of items.</li></ul><p>The client requests the API for the first page of results. The API responds with the specified number of items (<em>limit</em>) along with the total number of items (<em>total</em>). If there are more items to retrieve, the response includes a next token. The client can use the next token in subsequent requests to get the next page of results until all items are fetched. This way, pagination allows clients to retrieve large datasets efficiently, page by page, based on their needs.</p><h4><strong>Example Request</strong></h4><p>The following request asks the API to find papers related to &quot;halloween&quot; with a limit of 3 papers per response:<br/><a href="https://api.semanticscholar.org/graph/v1/paper/search?query=halloween&amp;limit=3" target="_blank">https://api.semanticscholar.org/graph/v1/paper/search?query=halloween&amp;limit=3</a></p><h4><strong>Example Response</strong></h4><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be3ad8eca318aa27f5152_Screen%20Shot%202023-11-20%20at%202.49.29%20PM.png" loading="lazy" sizes="(max-width: 479px) 87vw, (max-width: 767px) 89vw, (max-width: 991px) 90vw, 800px" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be3ad8eca318aa27f5152_Screen%20Shot%202023-11-20%20at%202.49.29%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be3ad8eca318aa27f5152_Screen%20Shot%202023-11-20%20at%202.49.29%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be3ad8eca318aa27f5152_Screen%20Shot%202023-11-20%20at%202.49.29%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be3ad8eca318aa27f5152_Screen%20Shot%202023-11-20%20at%202.49.29%20PM.png 1488w" alt=""/><ul role="list"><li><strong>total:</strong> Indicates that there are a total of 3063 papers related to &quot;halloween&quot; in the Semantic Scholar database<br/></li><li><strong>offset:</strong> Shows that the current response starts from the first paper (position 0)</li><li><strong>next: </strong>Contains a token (in this case, 3) that the client can use to fetch the next set of papers</li></ul></div></div><div id="paper" class="accordion__section"><h2 class="accordion__header">Academic Graph: Paper</h2><div class="accordion__content"><h2 id="searching-and-retrieving-paper-details" class="documentation__header margin-top--none margin-bottom--sm">Searching and Retrieving Paper Details</h2><p><strong>Use Case</strong>: Search for papers using keywords and get additional details about a specific paper that interests you. The <em>paper relevance search</em> endpoint will perform a keyword search for papers using our <a href="https://medium.com/ai2-blog/building-a-better-search-engine-for-semantic-scholar-ea23a0b661e7">custom-trained ranker</a>.<br/></p><p><strong>Step 1</strong>: First search for papers you are interested in, using the paper relevance search endpoint.<br/></p><ul role="list"><li><strong>Endpoint:</strong> <a href="https://api.semanticscholar.org/graph/v1/paper/search?query=halloween">https://api.semanticscholar.org/graph/v1/paper/search</a><br/></li><li><strong>Request:</strong><br/></li></ul><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/graph/v1/paper/search?query=semantic%20scholar%20platform&amp;limit=3">https://api.semanticscholar.org/graph/v1/paper/search?query=semantic%20scholar%20platform&amp;limit=3</a></p><p>The request above contains the following parameters:</p><div class="table table--4 margin-bottom--sm"><div id="w-node-_424c2cc7-e429-6968-d3f2-33632a1c8ce9-287a891b" class="table__cell table__cell--header"><p class="table__header">Parameter Name</p></div><div id="w-node-_0f3a001a-4eee-fba9-94ce-e584f7b2590d-287a891b" class="table__cell table__cell--header"><p class="table__header">Type</p></div><div id="w-node-ae57ce64-9a9f-a37b-1ac6-7eeabe9db1ab-287a891b" class="table__cell table__cell--header"><p class="table__header">Value</p></div><div id="w-node-_19d3e014-0d58-1a5c-69d3-3c6ffd49ca6a-287a891b" class="table__cell table__cell--header"><p class="table__header">Description</p></div><div id="w-node-_65cac9a6-57c1-cf14-88c1-6cf50744a7db-287a891b" class="table__cell"><p>query</p></div><div id="w-node-c68a1dce-57dd-2848-b57f-bcc27336f266-287a891b" class="table__cell"><p>query</p></div><div id="w-node-fcaa15a4-6f09-530b-65f5-779d8a907871-287a891b" class="table__cell"><p>semantic scholar platform</p></div><div id="w-node-_8e0b9249-c11d-9c12-f867-8769efe0094b-287a891b" class="table__cell"><p>Keyword to search. Here we are searching for papers related to the Semantic Scholar platform</p></div><div id="w-node-_3d44e6e9-b505-b926-3410-0a919da749f1-287a891b" class="table__cell"><p>limit</p></div><div id="w-node-_35ddf59a-52f4-df3d-088d-504dfd9c9d01-287a891b" class="table__cell"><p>query</p></div><div id="w-node-_20d72d0a-54ee-2b2c-2800-51676a5fa155-287a891b" class="table__cell"><p>3</p></div><div id="w-node-_827ea963-5c6d-0ece-5087-bba97d98d671-287a891b" class="table__cell"><p>Limit how many records we would like to retrieve at a time. In this case we would like to only retrieve 3 papers at a time. </p></div></div><p><strong>Python Example:</strong></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab"># Define the paper search endpoint URL</span><span>
</span><span>url = </span><span style="color:#abe338">&#x27;https://api.semanticscholar.org/graph/v1/paper/search&#x27;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Define the required query parameter and its value (in this case, the keyword we want to search for)</span><span>
</span>query_params = {
<span>    </span><span style="color:#abe338">&#x27;query&#x27;</span><span>: </span><span style="color:#abe338">&#x27;semantic scholar platform&#x27;</span><span>,
</span><span>    </span><span style="color:#abe338">&#x27;limit&#x27;</span><span>: </span><span style="color:#f5ab35">3</span><span>
</span>}

<span></span><span style="color:#d4d0ab"># Make the GET request with the URL and query parameters</span><span>
</span>searchResponse = requests.get(url, params=query_params)</code></pre><p><strong>Postman Request Example:</strong></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971a5ea728885b5df054c9_image2.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971a5ea728885b5df054c9_image2-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971a5ea728885b5df054c9_image2-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971a5ea728885b5df054c9_image2-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971a5ea728885b5df054c9_image2.png 1474w" alt="Postman Request"/><ul role="list"><li><strong>Response: </strong>Below you will find the response we received from the API. The first three fields (total, offset, next) are pagination data we can use to page through our results. The data field is a list of objects, each containing information about a paper. In the next step, let&#x27;s try to find out more information about the paper titled &quot;The Semantic Scholar Open Data Platform&quot; by using its paperId.</li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971ab3f96ac2728ee01a1a_image1.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971ab3f96ac2728ee01a1a_image1-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971ab3f96ac2728ee01a1a_image1-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971ab3f96ac2728ee01a1a_image1-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971ab3f96ac2728ee01a1a_image1-p-1600.png 1600w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971ab3f96ac2728ee01a1a_image1.png 1980w" alt="Postman Results"/><div class="card card--note margin-bottom--sm"><p><strong>NOTE:</strong> This endpoint supports pagination. Check out our <a href="#pagination">Pagination guide</a> for more information.<br/></p></div><p><strong>Step 2: </strong>Retrieve more details about the “The Semantic Scholar Open Data Platform” paper by using its paperId - cb92a7f9d9dbcf9145e32fdfa0e70e2a6b828eb1<br/></p><ul role="list"><li><strong>Endpoint:</strong> <a href="#" target="_blank">https://api.semanticscholar.org/graph/v1/paper/{paperId}</a><br/></li><li><strong>Request:</strong> <br/></li></ul><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/graph/v1/paper/cb92a7f9d9dbcf9145e32fdfa0e70e2a6b828eb1?fields=title,year,abstract,authors.name">https://api.semanticscholar.org/graph/v1/paper/cb92a7f9d9dbcf9145e32fdfa0e70e2a6b828eb1?fields=title,year,abstract,authors.name</a></p><p>The request above contains the following parameters:</p><div class="table table--4 margin-bottom--sm"><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042adc-287a891b" class="table__cell table__cell--header"><p class="table__header">Parameter Name</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042adf-287a891b" class="table__cell table__cell--header"><p class="table__header">Type</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042ae2-287a891b" class="table__cell table__cell--header"><p class="table__header">Value</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042ae5-287a891b" class="table__cell table__cell--header"><p class="table__header">Description</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042ae8-287a891b" class="table__cell"><p>paperId</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042aeb-287a891b" class="table__cell"><p>path</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042aee-287a891b" class="table__cell"><p class="table__paragraph">cb92a7f9d9dbcf9145e32fdfa0e70e2a6b828eb1</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042af1-287a891b" class="table__cell"><p>ID of the paper to be retrieved. In this example we are using the Semantic Scholar Paper ID, but the API also supports <a href="#alternative-paperid">external paper IDs</a>*.</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042af4-287a891b" class="table__cell"><p>fields</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042af7-287a891b" class="table__cell"><p>query</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042afa-287a891b" class="table__cell"><p>title,year,abstract,<br/>authors.name</p></div><div id="w-node-_06a5b770-8a63-4456-2606-e6fffe042afd-287a891b" class="table__cell"><p>Comma Separated Value (CSV) list of details about the paper we would like to know. In this example, we are asking for the paper’s title, year of publication, abstract, and the names of its authors</p></div></div><p class="margin-top--m"><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab"># Define the paper search endpoint URL</span><span>
</span><span>url = </span><span style="color:#abe338">&#x27;https://api.semanticscholar.org/graph/v1/paper/search&#x27;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Define the required query parameter and its value (in this case, the keyword we want to search for)</span><span>
</span>query_params = {
<span>    </span><span style="color:#abe338">&#x27;query&#x27;</span><span>: </span><span style="color:#abe338">&#x27;semantic scholar platform&#x27;</span><span>,
</span><span>    </span><span style="color:#abe338">&#x27;limit&#x27;</span><span>: </span><span style="color:#f5ab35">3</span><span>
</span>}

<span></span><span style="color:#d4d0ab"># Define a separate function to make a request to the paper details endpoint using a paper_id. This function will be used later on (after we call the paper search endpoint).</span><span>
</span><span></span><span class="hljs-function" style="color:#dcc6e0">def</span><span class="hljs-function"> </span><span class="hljs-function" style="color:#00e0e0">get_paper_data</span><span class="hljs-function">(</span><span class="hljs-function" style="color:#f5ab35">paper_id</span><span class="hljs-function">):</span><span>
</span><span>  url = </span><span style="color:#abe338">&#x27;https://api.semanticscholar.org/graph/v1/paper/&#x27;</span><span> + paper_id
</span>
<span>  </span><span style="color:#d4d0ab"># Define which details about the paper you would like to receive in the response</span><span>
</span><span>  paper_data_query_params = {</span><span style="color:#abe338">&#x27;fields&#x27;</span><span>: </span><span style="color:#abe338">&#x27;title,year,abstract,authors.name&#x27;</span><span>}
</span>
<span>  </span><span style="color:#d4d0ab"># Send the API request and store the response in a variable</span><span>
</span>  response = requests.get(url, params=paper_data_query_params)
<span>  </span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span><span>    </span><span style="color:#dcc6e0">return</span><span> response.json()
</span><span>  </span><span style="color:#dcc6e0">else</span><span>:
</span><span>    </span><span style="color:#dcc6e0">return</span><span> </span><span style="color:#f5ab35">None</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Make the GET request to the paper search endpoint with the URL and query parameters</span><span>
</span>search_response = requests.get(url, params=query_params)

<span></span><span style="color:#d4d0ab"># Check if the request was successful (status code 200)</span><span>
</span><span></span><span style="color:#dcc6e0">if</span><span> search_response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span>  search_response = search_response.json()

<span>  </span><span style="color:#d4d0ab"># Retrieve the paper id corresponding to the 1st result in the list</span><span>
</span><span>  paper_id = search_response[</span><span style="color:#abe338">&#x27;data&#x27;</span><span>][</span><span style="color:#f5ab35">0</span><span>][</span><span style="color:#abe338">&#x27;paperId&#x27;</span><span>]
</span>
<span>  </span><span style="color:#d4d0ab"># Retrieve the paper details corresponding to this paper id using the function we defined earlier.</span><span>
</span>  paper_details = get_paper_data(paper_id)

<span>  </span><span style="color:#d4d0ab"># Check if paper_details is not None before proceeding</span><span>
</span><span>  </span><span style="color:#dcc6e0">if</span><span> paper_details </span><span style="color:#dcc6e0">is</span><span> </span><span style="color:#dcc6e0">not</span><span> </span><span style="color:#f5ab35">None</span><span>:
</span>    
<span>    </span><span style="color:#d4d0ab"># Your code to work with the paper details goes here</span><span>
</span>    
<span>  </span><span style="color:#dcc6e0">else</span><span>:
</span><span>    </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">&quot;Failed to retrieve paper details.&quot;</span><span>)
</span>
<span></span><span style="color:#dcc6e0">else</span><span>:
</span><span>  </span><span style="color:#d4d0ab"># Handle potential errors or non-200 responses</span><span>
</span><span>  </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;Relevance Search Request failed with status code </span><span class="hljs-subst" style="color:#abe338">{search_response.status_code}</span><span style="color:#abe338">: </span><span class="hljs-subst" style="color:#abe338">{search_response.text}</span><span style="color:#abe338">&quot;</span><span>)</span></code></pre><p class="margin-top--m"><strong>Postman Request Example:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b6062de0a113430962d_image4.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b6062de0a113430962d_image4-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b6062de0a113430962d_image4-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b6062de0a113430962d_image4-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b6062de0a113430962d_image4-p-1600.png 1600w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b6062de0a113430962d_image4.png 1656w" alt="Postman Example"/><ul role="list" class="margin-top--m"><li><strong>Response: </strong>As requested, we received the paper&#x27;s title, abstract, year of publication, and authors&#x27; names in the response, shown below. </li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b8204067513237a2dd7_image3.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b8204067513237a2dd7_image3-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b8204067513237a2dd7_image3-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b8204067513237a2dd7_image3-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b8204067513237a2dd7_image3-p-1600.png 1600w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65971b8204067513237a2dd7_image3.png 1999w" alt="Postman Results"/><h2 id="using-paper-search-with-external-ids" class="documentation__header margin-top--none margin-bottom--sm">Using Paper Search with External IDs</h2><p>Semantic Scholar API also supports lookups through many external paper identifiers, in addition to the Semantic Scholar Paper ID. The table below lists the currently supported external IDs.</p><p id="alternative-paperid"><strong>Alternative Paper Identifiers and Examples:</strong><br/></p><p class="monospace monospace--block monospace--block-list"><span class="monospace__title">Semantic Scholar Paper ID</span> <a href="https://api.semanticscholar.org/0796f6cd7f0403a854d67d525e9b32af3b277331" target="_blank">https://api.semanticscholar.org/0796f6cd7f0403a854d67d525e9b32af3b277331</a><br/></p><p class="monospace monospace--block monospace--block-list"><span class="monospace__title">DOI</span> <a href="https://api.semanticscholar.org/10.1038/nrn3241" target="_blank">https://api.semanticscholar.org/10.1038/nrn3241</a><br/></p><p class="monospace monospace--block monospace--block-list"><span class="monospace__title">ArXiv ID</span> <a href="https://api.semanticscholar.org/arXiv:1705.10311" target="_blank">https://api.semanticscholar.org/arXiv:1705.10311</a><br/></p><p class="monospace monospace--block monospace--block-list"><span class="monospace__title">ACL ID</span> <a href="https://api.semanticscholar.org/ACL:W12-3903" target="_blank">https://api.semanticscholar.org/ACL:W12-3903</a><br/></p><p class="monospace monospace--block monospace--block-list"><span class="monospace__title">PubMed ID</span> <a href="https://api.semanticscholar.org/PMID:19872477" target="_blank">https://api.semanticscholar.org/PMID:19872477</a><br/></p><p class="monospace monospace--block monospace--block-list"><span class="monospace__title">Corpus ID</span> <a href="https://api.semanticscholar.org/CorpusID:37220927" target="_blank">https://api.semanticscholar.org/CorpusID:37220927</a><br/></p><p class="margin-top--m"><strong>Use Case</strong>: Earlier we saw how to retrieve a paper’s details using its Semantic Scholar Paper ID. In this example, let&#x27;s fetch details about a paper using its <em>arXiv </em>ID, one of the many external IDs supported by Semantic Scholar API:<br/></p><ul role="list"><li><strong>Endpoint:</strong> https://api.semanticscholar.org/graph/v1/paper/{paperId}<br/></li><li><strong>Request:</strong></li></ul><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/graph/v1/paper/arXiv:1705.10311?fields=title,year,abstract,authors.name" target="_blank">https://api.semanticscholar.org/graph/v1/paper/<strong>arXiv:1705.10311</strong>?fields=title,year,abstract,authors.name</a><br/></p><p>The request above contains the following parameters:</p><div class="table table--4 margin-bottom--sm"><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6da-287a891b" class="table__cell table__cell--header"><p class="table__header">Parameter Name</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6dd-287a891b" class="table__cell table__cell--header"><p class="table__header">Type</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6e0-287a891b" class="table__cell table__cell--header"><p class="table__header">Value</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6e3-287a891b" class="table__cell table__cell--header"><p class="table__header">Description</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6e6-287a891b" class="table__cell"><p>paperId</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6e9-287a891b" class="table__cell"><p>path</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6ec-287a891b" class="table__cell"><p>arXiv:1705.10311</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6ef-287a891b" class="table__cell"><p>ID of the paper to be retrieved. In this case our ID references a paper from an external source - <em>arXiv, </em>hence we supply the paper’s arXiv ID</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6f2-287a891b" class="table__cell"><p>fields</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6f5-287a891b" class="table__cell"><p>query</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6f8-287a891b" class="table__cell"><p>title,year,abstract,<br/>authors.name</p></div><div id="w-node-b5760f74-0fb3-0445-4b78-bfdbd2c6c6fb-287a891b" class="table__cell"><p>CSV list of details about the paper we would like to know. In this example, we are asking for the paper’s title, year of publication, abstract, and the names of its authors</p></div></div><p class="margin-top--m"><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab">#define external id</span><span>
</span><span>arXivId = </span><span style="color:#abe338">&quot;arXiv:1705.10311&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab">#construct request url</span><span>
</span><span>url = </span><span style="color:#abe338">&#x27;https://api.semanticscholar.org/graph/v1/paper/&#x27;</span><span> + arXivId
</span>
<span></span><span style="color:#d4d0ab">#Define which details about the paper you would like to receive in the response</span><span>
</span><span>paperDataQueryParams = {</span><span style="color:#abe338">&#x27;fields&#x27;</span><span>: </span><span style="color:#abe338">&#x27;title,year,abstract,authors.name&#x27;</span><span>}
</span>
<span></span><span style="color:#d4d0ab">#Send the API request and store the response in a variable</span><span>
</span>response = requests.get(url, params=paperDataQueryParams)

<span></span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span>    response = response.json()

<span>    </span><span style="color:#d4d0ab">#your code to work with the response goes here</span><span>
</span>
<span></span><span style="color:#dcc6e0">else</span><span>:
</span><span>    </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;response failed with errorcode:</span><span class="hljs-subst" style="color:#abe338">{response.status_code}</span><span style="color:#abe338">&quot;</span><span>)
</span><span>    </span><span style="color:#d4d0ab">#error handling code goes here</span></code></pre><ul role="list" class="margin-top--m"><li><strong>Response: </strong>In the response, we receive the fields we requested for the paper with arXiv ID <em>arXiv:1705.10311</em></li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657390d0725aeb68ac5614e7_Screen%20Shot%202023-12-08%20at%201.54.45%20PM.png" loading="lazy" id="w-node-e0edab84-3888-0ca6-d7e7-0bf825d1baf9-287a891b" sizes="100vw" alt="" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657390d0725aeb68ac5614e7_Screen%20Shot%202023-12-08%20at%201.54.45%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657390d0725aeb68ac5614e7_Screen%20Shot%202023-12-08%20at%201.54.45%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657390d0725aeb68ac5614e7_Screen%20Shot%202023-12-08%20at%201.54.45%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657390d0725aeb68ac5614e7_Screen%20Shot%202023-12-08%20at%201.54.45%20PM.png 1456w"/><h2 id="filtering-search-results" class="documentation__header margin-top--none margin-bottom--sm">Filtering Search Results</h2><p class="margin-top--m"><strong>Use Case</strong>: I want to search for papers on Natural Language Processing (NLP) that were published in Journals since 2018.<br/></p><ul role="list"><li><strong>Endpoint:</strong> <a href="https://api.semanticscholar.org/graph/v1/paper/search" target="_blank">https://api.semanticscholar.org/graph/v1/paper/search</a><br/></li><li><strong>Request:</strong></li></ul><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/graph/v1/paper/search?query=NLP&amp;limit=5&amp;publicationTypes=JournalArticle&amp;year=2018-&amp;fields=title,publicationTypes,publicationDate" target="_blank">https://api.semanticscholar.org/graph/v1/paper/search?<strong>query=NLP</strong>&amp;limit=5&amp;<strong>publicationTypes=JournalArticle&amp;year=2018-&amp;fields</strong>=title,publicationTypes,publicationDate</a><br/></p><p>The request above contains the following parameters:</p><div class="table table--4 margin-bottom--sm"><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e531c-287a891b" class="table__cell table__cell--header"><p class="table__header">Parameter Name</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e531f-287a891b" class="table__cell table__cell--header"><p class="table__header">Type</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e5322-287a891b" class="table__cell table__cell--header"><p class="table__header">Value</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e5325-287a891b" class="table__cell table__cell--header"><p class="table__header">Description</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e5328-287a891b" class="table__cell"><p>query</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e532b-287a891b" class="table__cell"><p>query</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e532e-287a891b" class="table__cell"><p>NLP</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e5331-287a891b" class="table__cell"><p>Keywords we want to search for. The response will contain papers related to <em>NLP</em></p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e5337-287a891b" class="table__cell"><p>limit</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e533a-287a891b" class="table__cell"><p>query</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e533d-287a891b" class="table__cell"><p>5</p></div><div id="w-node-_7d1272d2-719d-ef4d-5dc0-92747c6e5342-287a891b" class="table__cell"><p>Pagination parameter that lets us page through our results by limiting the number of records we would like to retrieve at a time. In this case, we would like to retrieve papers 5 at a time</p></div><div id="w-node-_88bd7322-c184-1aa4-ba4a-44148cc08d8b-287a891b" class="table__cell"><p>publicationTypes</p></div><div id="w-node-_87112cfe-ac16-b48a-33c3-47708882aed1-287a891b" class="table__cell"><p>query</p></div><div id="w-node-a14c6178-2d2e-d716-455a-aa8c3e2b9262-287a891b" class="table__cell"><p>JournalArticle</p></div><div id="w-node-_24847c8e-0b33-7fec-bcc2-b64a848d0c60-287a891b" class="table__cell"><p>Restrict our results to only contain papers that appear in Journals</p></div><div id="w-node-_90f7b0c1-20ef-1ae5-118c-43973065b91d-287a891b" class="table__cell"><p>year</p></div><div id="w-node-_42702521-b08c-1555-1cd9-820d5eea960c-287a891b" class="table__cell"><p>query</p></div><div id="w-node-_58f09dfb-eb7c-79b1-2f2a-f9fe62c59af6-287a891b" class="table__cell"><p>2018-</p></div><div id="w-node-_6c90e898-d73d-377e-fede-448c912ddb21-287a891b" class="table__cell"><p>Restrict our results to papers that were published after 2018 </p></div><div id="w-node-_5b129000-dad8-52a3-28fe-9f017ad88e16-287a891b" class="table__cell"><p>fields</p></div><div id="w-node-_79afc16e-5806-9bb9-bab3-d8df2866fba2-287a891b" class="table__cell"><p>query</p></div><div id="w-node-_74a1b0ff-1211-f681-2353-1b1dfcd1f190-287a891b" class="table__cell"><p>title,publicationTypes,<br/>publicationDate</p></div><div id="w-node-bf41b5ea-68a5-92f7-3056-455cac03f260-287a891b" class="table__cell"><p>CSV list of details about the paper we would like to know. In this example, we are asking for the paper’s title, publication type, and publication date (YYYY-MM-DD) if available</p></div></div><p class="margin-top--m"><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab"># Define the endpoint URL</span><span>
</span><span>url = </span><span style="color:#abe338">&quot;https://api.semanticscholar.org/graph/v1/paper/search&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Define the query parameters</span><span>
</span>query_params = {
<span>    </span><span style="color:#abe338">&#x27;query&#x27;</span><span>: </span><span style="color:#abe338">&#x27;NLP&#x27;</span><span>,
</span><span>    </span><span style="color:#abe338">&#x27;limit&#x27;</span><span>: </span><span style="color:#f5ab35">5</span><span>,
</span><span>    </span><span style="color:#abe338">&#x27;publicationTypes&#x27;</span><span>: </span><span style="color:#abe338">&#x27;JournalArticle&#x27;</span><span>,
</span><span>    </span><span style="color:#abe338">&#x27;year&#x27;</span><span>: </span><span style="color:#abe338">&#x27;2018-&#x27;</span><span>,
</span><span>    </span><span style="color:#abe338">&#x27;fields&#x27;</span><span>: </span><span style="color:#abe338">&#x27;title,publicationTypes,publicationDate&#x27;</span><span>
</span>}

<span></span><span style="color:#d4d0ab"># Make the request with the specified parameters</span><span>
</span>response = requests.get(url, params=query_params)

<span></span><span style="color:#d4d0ab"># Check if the request was successful (status code 200)</span><span>
</span><span></span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span><span>    </span><span style="color:#d4d0ab"># Convert response to JSON format</span><span>
</span>    response = response.json()

<span>    </span><span style="color:#d4d0ab">#code to process response data goes here</span><span>
</span>
<span></span><span style="color:#dcc6e0">else</span><span>:
</span><span>    </span><span style="color:#d4d0ab"># Handle potential errors or non-200 responses</span><span>
</span><span>    </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;Request failed with status code </span><span class="hljs-subst" style="color:#abe338">{response.status_code}</span><span style="color:#abe338">: </span><span class="hljs-subst" style="color:#abe338">{response.text}</span><span style="color:#abe338">&quot;</span><span>)</span></code></pre><ul role="list" class="margin-top--m"><li><strong>Response: </strong>As shown below, we only receive papers that meet our filter criteria (published after 2018 in Journals)</li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657394de5d7e2f346b6b6e24_Screen%20Shot%202023-12-08%20at%202.12.36%20PM.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657394de5d7e2f346b6b6e24_Screen%20Shot%202023-12-08%20at%202.12.36%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657394de5d7e2f346b6b6e24_Screen%20Shot%202023-12-08%20at%202.12.36%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657394de5d7e2f346b6b6e24_Screen%20Shot%202023-12-08%20at%202.12.36%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/657394de5d7e2f346b6b6e24_Screen%20Shot%202023-12-08%20at%202.12.36%20PM.png 1476w" alt=""/><h2 id="using-search-query-operators" class="documentation__header margin-top--none margin-bottom--sm">Using Search Query Operators</h2><p>Semantic Scholar’s <a href="https://api.semanticscholar.org/api-docs/#tag/Paper-Data/operation/get_graph_paper_bulk_search" target="_blank">Paper Bulk Search</a> supports a variety of operators that enable advanced filtering and precise specifications in search queries. All keywords in the search query are matched against the paper’s <em>title</em> and <em>abstract</em>. Refer to the <a href="https://api.semanticscholar.org/api-docs/#tag/Paper-Data/operation/get_graph_paper_bulk_search" target="_blank">API Documentation</a> for all operators supported. We have included examples of varying complexity below to help you get started.</p><p><strong>Example:</strong></p><p class="monospace monospace--block monospace--code-block">((cloud computing) | virtualization) +security -privacy</p><p><strong>Explanation:</strong> Matches papers containing the words  &quot;cloud” and “computing&quot;, or the word &quot;virtualization&quot; in their title or abstract. The paper title or abstract must also include the term &quot;security&quot; but should exclude the word &quot;privacy&quot;. For example, a paper with the title &quot;Ensuring Security in Cloud Computing Environments&quot; could be included, unless its abstract contains the word “privacy”.</p><p><strong>Request:</strong></p><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=%28cloud%20computing%20%7C%20virtualization%29%20%2Bsecurity%20-privacy&amp;fields=title,abstract" target="_blank"><strong>https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=%28%28cloud%20computing%29%20%7C%20virtualization%29%20%2Bsecurity%20-privacy&amp;fields=title,abstract</strong></a><strong> </strong></p><p class="margin-top--xl"><strong>Example:</strong></p><p class="monospace monospace--block monospace--code-block">&quot;red blood cell&quot; + artificial intelligence</p><p><strong>Explanation: </strong>Matches papers where the title or abstract contains the exact phrase “red blood cell” along with the words “artificial” and “intelligence”. For example, a paper with the title &quot;Applications of Artificial Intelligence in Healthcare&quot; would be included if it also contained the phrase “red blood cell” in its abstract.</p><p><strong>Request:</strong></p><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=%22red%20blood%20cell%22%20%2B%20artificial%20intelligence&amp;fields=title,abstract" target="_blank"><strong>https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=%22red%20blood%20cell%22%20%2B%20artificial%20intelligence&amp;fields=title,abstract</strong></a></p><p class="margin-top--xl"><strong>Example:</strong></p><p class="monospace monospace--block monospace--code-block">fish*</p><p><strong>Explanation: </strong>Matches papers where the title or abstract contains words with “fish” in their prefix, such as “fishtank”, “fishes”, or “fishy”. For example a paper with the title &quot;Ecology of Deep-Sea Fishes&quot; would be included.</p><p><strong>Request:</strong></p><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=fish%2A&amp;fields=title,abstract" target="_blank"><strong>https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=fish%2A&amp;fields=title,abstract</strong></a></p><p class="margin-top--xl"><strong>Example:</strong></p><p class="monospace monospace--block monospace--code-block">bugs~3</p><p><strong>Explanation: </strong>Matches<strong> </strong>papers where the title or abstract contains words with an edit distance of 3 from the word “bugs”, such as “buggy”, “but”, &quot;buns&quot;, “busg”, etc. An edit is the addition, removal, or change of a single character.</p><p><strong>Request:</strong></p><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=bugs~3&amp;fields=title,abstract" target="_blank"><strong>https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=bugs~3&amp;fields=title,abstract</strong></a></p><p class="margin-top--xl"><strong>Example:</strong></p><p class="monospace monospace--block monospace--code-block">“blue lake” ~3</p><p><strong>Explanation: </strong>Matches papers<strong> </strong>where the title or abstract contains phrases with up to 3 terms between the words specified in the phrase. For example, a paper titled “Preserving blue lakes during the winter” or with an abstract containing a phrase such as <strong>“</strong>blue fishes in the lake” would be included.</p><p><strong>Request:</strong></p><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=%22blue%20lake%22~3&amp;fields=title,abstract" target="_blank"><strong>https://api.semanticscholar.org/graph/v1/paper/search/bulk?query=%22blue%20lake%22~3&amp;fields=title,abstract</strong></a><strong> </strong></p></div></div><div id="author" class="accordion__section"><h2 class="accordion__header">Academic Graph: Author</h2><div class="accordion__content"><h2 id="searching-and-retrieving-author-details" class="documentation__header margin-top--none margin-bottom--sm">Searching and Retrieving Author Details</h2><p><strong>Use Case</strong>: You can search for an author by their <em>author id</em> or their <em>name</em>. Let&#x27;s search for an author by name and<strong> </strong>find out more details about the papers they have written .<br/></p><ul role="list"><li><strong>Endpoint:</strong> <a href="https://api.semanticscholar.org/graph/v1/author/search" target="_blank">https://api.semanticscholar.org/graph/v1/author/search</a><br/></li><li><strong>Request:</strong> <a href="https://api.semanticscholar.org/graph/v1/author/search" target="_blank">https://api.semanticscholar.org/graph/v1/author/search?query=Bob%20H.%20Smith&amp;fields=paperCount,papers.title,papers.fieldsOfStudy</a><br/></li></ul><p>The request above contains the following parameters:</p><div class="table table--4 margin-bottom--sm"><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5bf-287a891b" class="table__cell table__cell--header"><p class="table__header">Parameter Name</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5c2-287a891b" class="table__cell table__cell--header"><p class="table__header">Type</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5c5-287a891b" class="table__cell table__cell--header"><p class="table__header">Value</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5c8-287a891b" class="table__cell table__cell--header"><p class="table__header">Description</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5cb-287a891b" class="table__cell"><p>query</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5ce-287a891b" class="table__cell"><p>query</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5d1-287a891b" class="table__cell"><p>Bob H. Smith</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5d4-287a891b" class="table__cell"><p>Name of the author to be searched</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5d7-287a891b" class="table__cell"><p>fields</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5da-287a891b" class="table__cell"><p>query</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5dd-287a891b" class="table__cell"><p>paperCount, papers.title,<br/>papers.fieldsOfStudy</p></div><div id="w-node-f67f7dfc-3f5b-bf87-0365-dc2ff6c3b5e2-287a891b" class="table__cell"><p>Comma Separated Value (CSV) list of details about the author to be returned. We would like to know how many papers this author has written, all the titles of all the papers this author has written, and which field of study the paper belongs to</p></div></div><p class="margin-top--m"><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab"># Define the API endpoint URL</span><span>
</span><span>url = </span><span style="color:#abe338">&quot;https://api.semanticscholar.org/graph/v1/author/search&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Define the required query parameters</span><span>
</span>query_params = {
<span>    </span><span style="color:#abe338">&quot;query&quot;</span><span>: </span><span style="color:#abe338">&quot;Bob H. Smith&quot;</span><span>,
</span><span>    </span><span style="color:#abe338">&quot;fields&quot;</span><span>: </span><span style="color:#abe338">&quot;paperCount,papers.title,papers.fieldsOfStudy&quot;</span><span>
</span>}

<span></span><span style="color:#d4d0ab"># Make the GET request</span><span>
</span>response = requests.get(url, params=query_params)

<span></span><span style="color:#d4d0ab"># Check if the request was successful</span><span>
</span><span></span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span><span>    </span><span style="color:#d4d0ab"># Parse and work with the response data in JSON format</span><span>
</span>    data = response.json()

<span>    </span><span style="color:#d4d0ab"># Your code to process the data goes here</span><span>
</span>
<span></span><span style="color:#dcc6e0">else</span><span>:
</span><span>    </span><span style="color:#d4d0ab"># Handle the error, e.g., print an error message</span><span>
</span><span>    </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;Request failed with status code </span><span class="hljs-subst" style="color:#abe338">{response.status_code}</span><span style="color:#abe338">&quot;</span><span>)</span></code></pre><p class="margin-top--m"><strong>Postman Request Example:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e1cd1d5cffe6c602edad_Screen%20Shot%202023-11-17%20at%201.57.03%20PM.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e1cd1d5cffe6c602edad_Screen%20Shot%202023-11-17%20at%201.57.03%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e1cd1d5cffe6c602edad_Screen%20Shot%202023-11-17%20at%201.57.03%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e1cd1d5cffe6c602edad_Screen%20Shot%202023-11-17%20at%201.57.03%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e1cd1d5cffe6c602edad_Screen%20Shot%202023-11-17%20at%201.57.03%20PM-p-1600.png 1600w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e1cd1d5cffe6c602edad_Screen%20Shot%202023-11-17%20at%201.57.03%20PM.png 1672w" alt=""/><ul role="list"><li><strong>Response: </strong>In the response, we receive pagination data, the number of papers this author has written (<em>paperCount</em>), and the title and fieldOfStudy for each paper.</li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e205e628b169238c4c98_Screen%20Shot%202023-11-17%20at%201.58.10%20PM.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e205e628b169238c4c98_Screen%20Shot%202023-11-17%20at%201.58.10%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e205e628b169238c4c98_Screen%20Shot%202023-11-17%20at%201.58.10%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e205e628b169238c4c98_Screen%20Shot%202023-11-17%20at%201.58.10%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e205e628b169238c4c98_Screen%20Shot%202023-11-17%20at%201.58.10%20PM-p-1600.png 1600w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557e205e628b169238c4c98_Screen%20Shot%202023-11-17%20at%201.58.10%20PM.png 1672w" alt=""/></div></div><div id="recommendations" class="accordion__section"><h2 class="accordion__header">Recommendations</h2><div class="accordion__content"><h2 id="retrieving-paper-recommendations" class="documentation__header margin-top--none margin-bottom--sm">Retrieving Paper Recommendations</h2><p><strong>Use Case</strong>: I’m building a research tool and want to recommend other papers to my user based on the paper they are currently reading. How can the API help me do this?<br/></p><ul role="list"><li><strong>Endpoint:</strong> <a href="https://api.semanticscholar.org/recommendations/v1/papers/forpaper/{paperId}" target="_blank">https://api.semanticscholar.org/recommendations/v1/papers/forpaper/{paperId}</a><br/></li><li><strong>Request:</strong></li></ul><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/recommendations/v1/papers/forpaper/649def34f8be52c8b66281af98ae884c09aef38b?fields=title,year" target="_blank">https://api.semanticscholar.org/recommendations/v1/papers/forpaper/649def34f8be52c8b66281af98ae884c09aef38b?fields=title,year</a><br/></p><p>The request above contains the following parameters:</p><div class="table table--4 margin-bottom--sm"><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee35-287a891b" class="table__cell table__cell--header"><p class="table__header">Parameter Name</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee38-287a891b" class="table__cell table__cell--header"><p class="table__header">Type</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee3b-287a891b" class="table__cell table__cell--header"><p class="table__header">Value</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee3e-287a891b" class="table__cell table__cell--header"><p class="table__header">Description</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee41-287a891b" class="table__cell"><p>paperId</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee44-287a891b" class="table__cell"><p>path</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee47-287a891b" class="table__cell"><p>649def34f8be52c8b66281<br/>af98ae884c09aef38b</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee4a-287a891b" class="table__cell"><p>ID of the paper to base the recommendations on.</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee4d-287a891b" class="table__cell"><p>fields</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee50-287a891b" class="table__cell"><p>query</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee53-287a891b" class="table__cell"><p>title,year</p></div><div id="w-node-eee10a8a-ac4a-4275-2df4-67b715a8ee58-287a891b" class="table__cell"><p>Details about each recommended paper to be included in the response. In this case we just want to know the paper title and year of publication</p></div></div><p class="margin-top--m"><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab"># Define the base URL for the API</span><span>
</span><span>base_url = </span><span style="color:#abe338">&quot;https://api.semanticscholar.org/recommendations/v1/papers/forpaper/&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Define the paperId</span><span>
</span><span>paperId = </span><span style="color:#abe338">&quot;649def34f8be52c8b66281af98ae884c09aef38b&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Construct the full URL with the paperId as a path parameter</span><span>
</span>url = base_url + paperId

<span></span><span style="color:#d4d0ab"># Send a GET request to the URL</span><span>
</span>response = requests.get(url)

<span></span><span style="color:#d4d0ab"># Check if the request was successful</span><span>
</span><span></span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span><span>    </span><span style="color:#d4d0ab"># Parse the JSON response</span><span>
</span>    data = response.json()
  
<span>    </span><span style="color:#d4d0ab"># Extract the list of recommended papers from the response</span><span>
</span><span>    recommended_papers = data.get(</span><span style="color:#abe338">&quot;recommendedPapers&quot;</span><span>, [])
</span>
<span>    </span><span style="color:#d4d0ab"># Your code to work with the recommended papers list goes here</span><span>
</span>    
<span></span><span style="color:#dcc6e0">else</span><span>:
</span><span>    </span><span style="color:#d4d0ab"># Handle the error, e.g., print an error message</span><span>
</span><span>    </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;Request failed with status code </span><span class="hljs-subst" style="color:#abe338">{response.status_code}</span><span style="color:#abe338">&quot;</span><span>)</span></code></pre><p class="margin-top--m"><strong>Postman Request Example:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557fea6e12c99387ff6b67b_Screen%20Shot%202023-11-17%20at%203.59.12%20PM.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557fea6e12c99387ff6b67b_Screen%20Shot%202023-11-17%20at%203.59.12%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557fea6e12c99387ff6b67b_Screen%20Shot%202023-11-17%20at%203.59.12%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557fea6e12c99387ff6b67b_Screen%20Shot%202023-11-17%20at%203.59.12%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557fea6e12c99387ff6b67b_Screen%20Shot%202023-11-17%20at%203.59.12%20PM.png 1484w" alt=""/><ul role="list"><li><strong>Response:</strong> In the API response, we receive recommendations for papers similar to the one we specified in the request (<em>paperId</em> representing the paper titled <em>Construction of the Literature Graph in Semantic Scholar).</em></li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557feb54417794bcc8753e2_Screen%20Shot%202023-11-17%20at%203.59.27%20PM.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557feb54417794bcc8753e2_Screen%20Shot%202023-11-17%20at%203.59.27%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557feb54417794bcc8753e2_Screen%20Shot%202023-11-17%20at%203.59.27%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557feb54417794bcc8753e2_Screen%20Shot%202023-11-17%20at%203.59.27%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557feb54417794bcc8753e2_Screen%20Shot%202023-11-17%20at%203.59.27%20PM-p-1600.png 1600w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6557feb54417794bcc8753e2_Screen%20Shot%202023-11-17%20at%203.59.27%20PM.png 1848w" alt=""/></div></div><div id="datasets" class="accordion__section"><h2 class="accordion__header">Datasets</h2><div class="accordion__content"><h2 id="retrieving-releases-datasets-and-download-links" class="documentation__header margin-top--none margin-bottom--sm">Retrieving Releases, Datasets, and Download Links</h2><p><strong>Use Case</strong>: I want to work with Semantic Scholar data locally. How do I download your datasets?<br/></p><div id="w-node-ae90d9f4-211d-2d01-70b9-6647ae3e86e7-287a891b" class="card card--warning margin-bottom--xs"><p><strong>Warning:</strong> To download a dataset, you will need to provide your API key.</p></div><div class="card card--note margin-bottom--sm"><p><strong>Note:</strong> Semantic Scholar datasets (papers, authors, embeddings, abstracts, etc.) are grouped by releases. Each release is a snapshot in time containing a particular version of a dataset. The below steps illustrate how to find the list of available releases, the datasets available in a given release, and how to retrieve download links to those datasets.</p></div><p><strong>Step 1:</strong> Find list of available releases.</p><ul role="list"><li><strong>Endpoint:</strong> <a href="https://api.semanticscholar.org/datasets/v1/release/" target="_blank">https://api.semanticscholar.org/datasets/v1/release/</a><br/></li><li><strong>Request: </strong>No additional parameters required. Send a request to </li></ul><p class="monospace monospace--block"><a href="https://api.semanticscholar.org/datasets/v1/release/" target="_blank">https://api.semanticscholar.org/datasets/v1/release/</a></p><p><strong>Python Example:</strong></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab"># Define base URL for datasets API</span><span>
</span><span>base_url = </span><span style="color:#abe338">&quot;https://api.semanticscholar.org/datasets/v1/release/&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># To get the list of available releases make a request to the base url. No additional parameters needed.</span><span>
</span>response = requests.get(base_url)

<span></span><span style="color:#d4d0ab"># Check response status</span><span>
</span><span></span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span>   response_data = response.json()
<span>   </span><span style="color:#d4d0ab"># Process and print the response data as needed</span><span>
</span><span>   </span><span style="color:#f5ab35">print</span><span>(response_data)</span></code></pre><p><strong>Postman Request Example:</strong></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bd7880869f949d97ba1fb_Screen%20Shot%202023-11-20%20at%202.00.47%20PM.png" loading="lazy" width="600" id="w-node-dfa0a887-888f-0f37-2b25-6b321b26517f-287a891b" alt="" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bd7880869f949d97ba1fb_Screen%20Shot%202023-11-20%20at%202.00.47%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bd7880869f949d97ba1fb_Screen%20Shot%202023-11-20%20at%202.00.47%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bd7880869f949d97ba1fb_Screen%20Shot%202023-11-20%20at%202.00.47%20PM.png 1000w" sizes="100vw"/><ul role="list"><li><strong>Response: </strong>The response contains the list of releases available at the time the request was made.</li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bd7bb84b2a03165c620d7_Screen%20Shot%202023-11-20%20at%202.00.38%20PM.png" loading="lazy" width="400" sizes="100vw" alt="" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bd7bb84b2a03165c620d7_Screen%20Shot%202023-11-20%20at%202.00.38%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bd7bb84b2a03165c620d7_Screen%20Shot%202023-11-20%20at%202.00.38%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bd7bb84b2a03165c620d7_Screen%20Shot%202023-11-20%20at%202.00.38%20PM.png 914w"/><p class="margin-top--m"><strong>Step 2:</strong> Find datasets available in a given release. Let&#x27;s assume we want to find the datasets available in the <em>10/31/2023</em> release.</p><ul role="list"><li><strong>Endpoint:</strong> <a href="https://api.semanticscholar.org/datasets/v1/release/{release_id}" target="_blank">https://api.semanticscholar.org/datasets/v1/release/{release_id}</a><br/></li><li><strong>Request:</strong><br/></li></ul><p class="monospace monospace--block monospace--code-block"><a href="https://api.semanticscholar.org/datasets/v1/release/2023-10-31" target="_blank">https://api.semanticscholar.org/datasets/v1/release/2023-10-31</a><a href="https://api.semanticscholar.org/datasets/v1/release/2023-10-31" target="_blank">‍</a><br/></p><div class="card card--note margin-bottom--sm"><p><strong>NOTE: </strong>For this endpoint the <em>release_id</em> is simply the release date, which must be specified in the URL path<br/></p></div><div class="table table--4 margin-bottom--sm"><div id="w-node-_4f1d4ea9-584a-713a-e51f-d65ca505813f-287a891b" class="table__cell table__cell--header"><p class="table__header">Parameter Name</p></div><div id="w-node-_4f1d4ea9-584a-713a-e51f-d65ca5058142-287a891b" class="table__cell table__cell--header"><p class="table__header">Type</p></div><div id="w-node-_4f1d4ea9-584a-713a-e51f-d65ca5058145-287a891b" class="table__cell table__cell--header"><p class="table__header">Value</p></div><div id="w-node-_4f1d4ea9-584a-713a-e51f-d65ca5058148-287a891b" class="table__cell table__cell--header"><p class="table__header">Description</p></div><div id="w-node-_4f1d4ea9-584a-713a-e51f-d65ca505814b-287a891b" class="table__cell"><p>release_id</p></div><div id="w-node-_4f1d4ea9-584a-713a-e51f-d65ca505814e-287a891b" class="table__cell"><p>path</p></div><div id="w-node-_4f1d4ea9-584a-713a-e51f-d65ca5058151-287a891b" class="table__cell"><p>2023-10-31</p></div><div id="w-node-_4f1d4ea9-584a-713a-e51f-d65ca5058156-287a891b" class="table__cell"><p>Release ID (YYYY-MM-DD) represents the version of the dataset you are requesting. <br/></p></div></div><p><strong>Python Example:</strong></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span>base_url = </span><span style="color:#abe338">&quot;https://api.semanticscholar.org/datasets/v1/release/&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Get available releases</span><span>
</span>response = requests.get(base_url)

<span></span><span style="color:#d4d0ab"># Assume we want data from the latest release, which will correspond to the last item in the response list since releases are ordered chronologically. The last item in a list can be found using the index value computed by len() - 1. A short-hand for this is to use an index value of -1.</span><span>
</span><span>release_id = response.json()[-</span><span style="color:#f5ab35">1</span><span>]
</span>
<span></span><span style="color:#d4d0ab"># Make a request to get datasets available the latest release</span><span>
</span>datasets_response = requests.get(base_url + release_id)</code></pre><div class="card card--tip margin-bottom--sm"><p><strong>Tip: </strong>To retrieve datasets from the latest release, the release_id can also be set to “latest” instead of the actual date value. For example, the following would also be valid: <a href="https://api.semanticscholar.org/datasets/v1/release/2023-10-31" target="_blank">https://api.semanticscholar.org/datasets/v1/release/latest<br/>‍<br/></a>This only works for the latest release. For any earlier releases, the actual release date must be specified.<br/></p></div><p><strong>Postman Request Example:</strong></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdaeff947be0e9b7749b7_Screen%20Shot%202023-11-20%20at%202.16.33%20PM.png" loading="lazy" width="600" sizes="100vw" alt="" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdaeff947be0e9b7749b7_Screen%20Shot%202023-11-20%20at%202.16.33%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdaeff947be0e9b7749b7_Screen%20Shot%202023-11-20%20at%202.16.33%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdaeff947be0e9b7749b7_Screen%20Shot%202023-11-20%20at%202.16.33%20PM.png 936w"/><ul role="list"><li><strong>Response:</strong></li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdc2deb85e4b98b73c257_Screen%20Shot%202023-11-20%20at%202.19.07%20PM.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdc2deb85e4b98b73c257_Screen%20Shot%202023-11-20%20at%202.19.07%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdc2deb85e4b98b73c257_Screen%20Shot%202023-11-20%20at%202.19.07%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdc2deb85e4b98b73c257_Screen%20Shot%202023-11-20%20at%202.19.07%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdc2deb85e4b98b73c257_Screen%20Shot%202023-11-20%20at%202.19.07%20PM-p-1600.png 1600w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655bdc2deb85e4b98b73c257_Screen%20Shot%202023-11-20%20at%202.19.07%20PM.png 1816w" alt=""/><p class="margin-top--m"><strong>Step 3:</strong> Retrieve download links for a dataset of our choice. Let&#x27;s assume that we want to download the papers dataset that was returned in the response of the previous call to the datasets endpoint. The request would be structured as follows, but in this step, we will submit the request via Python (shown below), and we must use an API key.</p><ul role="list"><li><strong>Endpoint:</strong> <a href="https://api.semanticscholar.org/datasets/v1/release/{release_id}/dataset/{dataset_name}" target="_blank">https://api.semanticscholar.org/datasets/v1/release/{release_id}/dataset/{dataset_name}</a><br/></li><li><strong>Request:</strong> <a href="https://api.semanticscholar.org/datasets/v1/release/2023-10-31/dataset/papers" target="_blank">https://api.semanticscholar.org/datasets/v1/release/2023-10-31/dataset/papers</a><br/></li></ul><div class="card card--note margin-bottom--sm"><p><strong>NOTE: </strong>For this endpoint, the <em>release_id</em> is simply the release date (YYYY-MM-DD), which must be specified in the URL path<br/></p></div><p>The request above contains the following parameters:</p><div class="table table--4 margin-bottom--sm"><div id="w-node-f7bb8ab1-e933-d219-81c9-146a29e17414-287a891b" class="table__cell table__cell--header"><p class="table__header">Parameter Name</p></div><div id="w-node-f7bb8ab1-e933-d219-81c9-146a29e17417-287a891b" class="table__cell table__cell--header"><p class="table__header">Type</p></div><div id="w-node-f7bb8ab1-e933-d219-81c9-146a29e1741a-287a891b" class="table__cell table__cell--header"><p class="table__header">Value</p></div><div id="w-node-f7bb8ab1-e933-d219-81c9-146a29e1741d-287a891b" class="table__cell table__cell--header"><p class="table__header">Description</p></div><div id="w-node-f7bb8ab1-e933-d219-81c9-146a29e17420-287a891b" class="table__cell"><p>x-api-key</p></div><div id="w-node-f7bb8ab1-e933-d219-81c9-146a29e17423-287a891b" class="table__cell"><p>header</p></div><div id="w-node-f7bb8ab1-e933-d219-81c9-146a29e17426-287a891b" class="table__cell"><p>&lt;your api key&gt; <br/>‍<br/>*New users can <a href="https://www.semanticscholar.org/product/api#api-key-form" target="_blank">request an API key</a></p></div><div id="w-node-f7bb8ab1-e933-d219-81c9-146a29e17429-287a891b" class="table__cell"><p>To download a dataset, a user must authenticate themselves via an API key.<br/></p></div><div id="w-node-a09d73eb-30d7-1bc6-4660-fb9b76d80a45-287a891b" class="table__cell"><p>release_id<br/></p></div><div id="w-node-ddd7a568-3148-55f3-7f3a-7635782fde6d-287a891b" class="table__cell"><p>path<br/></p></div><div id="w-node-_00f2c3f7-6593-5e48-c8c6-d726d1cafee0-287a891b" class="table__cell"><p>2023-10-31<br/></p></div><div id="w-node-b8c2a388-376d-7a92-bf38-0f7ee459f664-287a891b" class="table__cell"><p>An ID to identify the release for which you are requesting datasets.<br/></p></div><div id="w-node-_90010b29-63ea-7e9b-592c-d229eacf2052-287a891b" class="table__cell"><p>dataset name<br/></p></div><div id="w-node-_2bd23361-c481-de6f-c5c6-90d627cda066-287a891b" class="table__cell"><p>path<br/></p></div><div id="w-node-d1f90a88-676c-9c32-a5bf-a5a4a6cc86ec-287a891b" class="table__cell"><p>papers<br/></p></div><div id="w-node-_746dba68-4d6f-9875-72de-b43dcf7e7d17-287a891b" class="table__cell"><p>The name of the dataset you want to download. <br/></p></div></div><p><strong>Python Example:</strong></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span>base_url = </span><span style="color:#abe338">&quot;https://api.semanticscholar.org/datasets/v1/release/&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># This endpoint requires authentication via api key</span><span>
</span><span>api_key = </span><span style="color:#abe338">&quot;your api key goes here&quot;</span><span>
</span><span>headers = {</span><span style="color:#abe338">&quot;x-api-key&quot;</span><span>: api_key}
</span>
<span></span><span style="color:#d4d0ab"># Get available releases</span><span>
</span>response = requests.get(base_url)

<span></span><span style="color:#d4d0ab"># Fetch latest release id</span><span>
</span><span>release_id = response.json()[-</span><span style="color:#f5ab35">1</span><span>]
</span>
<span></span><span style="color:#d4d0ab"># Define dataset name you want to download</span><span>
</span><span>dataset_name = </span><span style="color:#abe338">&#x27;papers&#x27;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Send the GET request and store the response in a variable</span><span>
</span><span>download_links_response = requests.get(base_url + release_id + </span><span style="color:#abe338">&#x27;/dataset/&#x27;</span><span> + dataset_name, headers=headers)
</span>
<span></span><span style="color:#d4d0ab"># Check response status</span><span>
</span><span></span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span>   response_data = download_links_response.json()
<span>   </span><span style="color:#d4d0ab"># Process and print the response data as needed</span><span>
</span><span>   </span><span style="color:#f5ab35">print</span><span>(response_data)</span></code></pre><p><strong>Postman Request Example:</strong></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be03f735a76a13d4a4fb0_Screen%20Shot%202023-11-20%20at%202.35.51%20PM.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be03f735a76a13d4a4fb0_Screen%20Shot%202023-11-20%20at%202.35.51%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be03f735a76a13d4a4fb0_Screen%20Shot%202023-11-20%20at%202.35.51%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be03f735a76a13d4a4fb0_Screen%20Shot%202023-11-20%20at%202.35.51%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be03f735a76a13d4a4fb0_Screen%20Shot%202023-11-20%20at%202.35.51%20PM.png 1296w" alt=""/><ul role="list" class="margin-top--m"><li><strong>Response: </strong>The response contains the data set name, description, a README with license and usage information, and temporary, pre-signed download links for the dataset files.</li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be047f947be0e9b7aab23_Screen%20Shot%202023-11-20%20at%202.38.16%20PM.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be047f947be0e9b7aab23_Screen%20Shot%202023-11-20%20at%202.38.16%20PM-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be047f947be0e9b7aab23_Screen%20Shot%202023-11-20%20at%202.38.16%20PM-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be047f947be0e9b7aab23_Screen%20Shot%202023-11-20%20at%202.38.16%20PM-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/655be047f947be0e9b7aab23_Screen%20Shot%202023-11-20%20at%202.38.16%20PM.png 1388w" alt=""/><p class="margin-top--m"><strong>Complete Python Example:</strong><br/></p><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab"># Define base URL for datasets API</span><span>
</span><span>base_url = </span><span style="color:#abe338">&quot;https://api.semanticscholar.org/datasets/v1/release/&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># This endpoint requires authentication via api key</span><span>
</span><span>api_key = </span><span style="color:#abe338">&quot;YOUR_API_KEY&quot;</span><span>
</span><span>headers = {</span><span style="color:#abe338">&quot;x-api-key&quot;</span><span>: api_key}
</span>
<span></span><span style="color:#d4d0ab"># Make the initial request to get the list of releases</span><span>
</span>response = requests.get(base_url)

<span></span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span><span>    </span><span style="color:#d4d0ab"># Assume we want data from the latest release, which will correspond to the last item in the response list since releases are ordered chronologically</span><span>
</span><span>    release_id = response.json()[-</span><span style="color:#f5ab35">1</span><span>]
</span>
<span>    </span><span style="color:#d4d0ab"># Make a request to get datasets available in the latest release (this endpoint url is the release id appended to the base url)</span><span>
</span>    datasets_response = requests.get(base_url + release_id)

<span>    </span><span style="color:#dcc6e0">if</span><span> datasets_response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span><span>        </span><span style="color:#d4d0ab"># Fetch the datasets list from the response</span><span>
</span><span>        datasets = datasets_response.json()[</span><span style="color:#abe338">&#x27;datasets&#x27;</span><span>]
</span>
<span>        </span><span style="color:#d4d0ab"># Check if the &#x27;papers&#x27; dataset exists</span><span>
</span><span>        papers_dataset_exists = </span><span style="color:#f5ab35">any</span><span>(dataset.get(</span><span style="color:#abe338">&#x27;name&#x27;</span><span>) == </span><span style="color:#abe338">&#x27;papers&#x27;</span><span> </span><span style="color:#dcc6e0">for</span><span> dataset </span><span style="color:#dcc6e0">in</span><span> datasets)
</span>
<span>        </span><span style="color:#dcc6e0">if</span><span> papers_dataset_exists:
</span><span>            </span><span style="color:#d4d0ab"># Make a request to get download links for the &#x27;papers&#x27; dataset</span><span>
</span><span>            dataset_name = </span><span style="color:#abe338">&#x27;papers&#x27;</span><span>
</span><span>            download_links_response = requests.get(base_url + release_id + </span><span style="color:#abe338">&#x27;/dataset/&#x27;</span><span> + dataset_name, headers=headers)
</span>
<span>            </span><span style="color:#dcc6e0">if</span><span> download_links_response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span><span>                download_links = download_links_response.json()[</span><span style="color:#abe338">&quot;files&quot;</span><span>]
</span>
<span>                </span><span style="color:#d4d0ab"># Your code to process the download links goes here</span><span>
</span>
<span>            </span><span style="color:#dcc6e0">else</span><span>:
</span><span>                </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;Failed to get download links. Status code: </span><span class="hljs-subst" style="color:#abe338">{download_links_response.status_code}</span><span style="color:#abe338">&quot;</span><span>)
</span><span>        </span><span style="color:#dcc6e0">else</span><span>:
</span><span>            </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">&quot;The &#x27;papers&#x27; dataset does not exist in the list.&quot;</span><span>)
</span><span>    </span><span style="color:#dcc6e0">else</span><span>:
</span><span>        </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;Failed to get datasets. Status code: </span><span class="hljs-subst" style="color:#abe338">{datasets_response.status_code}</span><span style="color:#abe338">&quot;</span><span>)
</span><span></span><span style="color:#dcc6e0">else</span><span>:
</span><span>    </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;Failed to get releases. Status code: </span><span class="hljs-subst" style="color:#abe338">{response.status_code}</span><span style="color:#abe338">&quot;</span><span>)</span></code></pre><h2 id="updating-datasets-with-Incremental-diffs" class="documentation__header margin-top--none"><strong>Updating Datasets with Incremental Diffs</strong></h2><p>Semantic Scholar Datasets are updated every release, and ensuring your data stays current is crucial for leveraging the latest research information. When working with datasets locally, it is possible to miss the most recent updates. Given the substantial size of these datasets, downloading a new copy with each release may not be practical. With the <em>Incremental Diffs</em> endpoint we can fetch a concise list of diffs between two versions of a dataset, enabling efficient updates. </p><p>Each &quot;diff&quot; represents changes between two sequential releases, and contains two lists of files: an &quot;updated&quot; list and a &quot;deleted&quot; list. Records in the &quot;updated&quot; list need to be inserted or replaced by their primary key (usually <em>corpus id)</em>. Records in the &quot;deleted&quot; list should be removed from your dataset.<br/><br/>Let&#x27;s see an example:</p><p><strong>Use Case: </strong>Assume our <em>authors</em> dataset was downloaded on 10/31/2023, but the latest available release is 11/07/2023. Let’s fetch the updates to the <em>authors</em> dataset between 10/31 and 11/07.</p><ul role="list"><li><strong>Endpoint: </strong><a href="https://api.semanticscholar.org/datasets/v1/diffs/%7Bstart_release_id%7D/to/%7Bend_release_id%7D/%7Bdataset_name">https://api.semanticscholar.org/datasets/v1/diffs/{start_release_id}/to/{end_release_id}/{dataset_name</a>} </li><li><strong>Request: </strong>*NOTE: A valid API key is required for this endpoint <a href="https://api.semanticscholar.org/datasets/v1/diffs/%7Bstart_release_id%7D/to/%7Bend_release_id%7D/%7Bdataset_name">https://api.semanticscholar.org/datasets/v1/diffs/2023-10-31/to/2023-11-07/authors</a></li></ul><p>The request above will contain the following parameters: <br/></p><div class="card card--note margin-bottom--sm"><p><strong>NOTE: </strong>Release ID is simply the release date (YYYY-MM-DD)<br/></p></div><div class="table table--4 margin-bottom--sm"><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60b3-287a891b" class="table__cell table__cell--header"><p class="table__header">Parameter Name</p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60b6-287a891b" class="table__cell table__cell--header"><p class="table__header">Type</p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60b9-287a891b" class="table__cell table__cell--header"><p class="table__header">Value</p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60bc-287a891b" class="table__cell table__cell--header"><p class="table__header">Description</p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60bf-287a891b" class="table__cell"><p>x-api-key</p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60c2-287a891b" class="table__cell"><p>header</p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60c5-287a891b" class="table__cell"><p>&lt;your-api-key&gt;<br/></p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60ce-287a891b" class="table__cell"><p>This endpoint requires users to authenticate via their Semantic Scholar API Key. Click <a href="https://www.semanticscholar.org/product/api#api-key-form">here</a> to request one if you haven’t already.<br/></p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60d2-287a891b" class="table__cell"><p>start_release_id<br/></p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60d6-287a891b" class="table__cell"><p>path<br/></p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60da-287a891b" class="table__cell"><p>2023-10-31<br/></p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60de-287a891b" class="table__cell"><p>Release ID (YYYY-MM-DD) that represents the version of your current dataset.<br/></p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60e2-287a891b" class="table__cell"><p>end_release_id<br/></p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60e6-287a891b" class="table__cell"><p>path<br/></p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60ea-287a891b" class="table__cell"><p>2023-11-07<br/></p></div><div id="w-node-_555dff99-45ae-be2a-f2a2-2d7d6e1d60ee-287a891b" class="table__cell"><p>Release ID (YYYY-MM-DD) that represents the version of the dataset you would like to update to. The <em>end_release_id</em> date must fall after <em>start_release_id</em>. In this example, we want our dataset to be up-to-date as of 11/07/2023. <br/></p></div><div id="w-node-_254a7066-ff7a-416a-265e-292200a326c3-287a891b" class="table__cell"><p>dataset_name<br/></p></div><div id="w-node-f2474691-9e6f-88a9-a93d-83cd4155d4d6-287a891b" class="table__cell"><p>path<br/></p></div><div id="w-node-df9dcfe5-2dea-e3f2-53e0-e2d5b56ab90f-287a891b" class="table__cell"><p>authors<br/></p></div><div id="w-node-e12f8a48-60a1-ac9b-edec-47a8f97a4324-287a891b" class="table__cell"><p>Name of the dataset you would like to update (papers, authors, tldrs, etc.)<br/></p></div></div><p class="margin-top--m"><strong>Complete Python Example:</strong><br/></p><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> requests
</span>
<span></span><span style="color:#d4d0ab"># Set the path parameters</span><span>
</span><span>start_release_id = </span><span style="color:#abe338">&quot;2023-10-31&quot;</span><span>
</span><span>end_release_id = </span><span style="color:#abe338">&quot;2023-11-07&quot;</span><span>
</span><span>dataset_name = </span><span style="color:#abe338">&quot;authors&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Set the API key. For best practice, store and retrieve API keys via environment variables</span><span>
</span><span>api_key = </span><span style="color:#abe338">&quot;&lt;your-api-key&gt;&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Construct the complete endpoint URL with the path parameters</span><span>
</span><span>url = </span><span style="color:#abe338">f&quot;https://api.semanticscholar.org/datasets/v1/diffs/</span><span class="hljs-subst" style="color:#abe338">{start_release_id}</span><span style="color:#abe338">/to/</span><span class="hljs-subst" style="color:#abe338">{end_release_id}</span><span style="color:#abe338">/</span><span class="hljs-subst" style="color:#abe338">{dataset_name}</span><span style="color:#abe338">&quot;</span><span>
</span>
<span></span><span style="color:#d4d0ab"># Make sure to include your api key in a header</span><span>
</span><span>headers = {</span><span style="color:#abe338">&quot;x-api-key&quot;</span><span>: api_key}
</span>
<span></span><span style="color:#d4d0ab"># Make the API request</span><span>
</span>response = requests.get(url, headers=headers)

<span></span><span style="color:#d4d0ab"># Check if the request was successful (status code 200)</span><span>
</span><span></span><span style="color:#dcc6e0">if</span><span> response.status_code == </span><span style="color:#f5ab35">200</span><span>:
</span><span>    </span><span style="color:#d4d0ab"># Extract the diffs from the response</span><span>
</span><span>    diffs = response.json()[</span><span style="color:#abe338">&#x27;diffs&#x27;</span><span>]
</span>
<span>    </span><span style="color:#d4d0ab">#Your code to work with the diffs goes here</span><span>
</span>    
<span></span><span style="color:#dcc6e0">else</span><span>:
</span><span>    </span><span style="color:#d4d0ab"># Handle potential errors or non-200 responses</span><span>
</span><span>    </span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">f&quot;Request failed with status code </span><span class="hljs-subst" style="color:#abe338">{response.status_code}</span><span style="color:#abe338">: </span><span class="hljs-subst" style="color:#abe338">{response.text}</span><span style="color:#abe338">&quot;</span><span>)</span></code></pre><p class="margin-top--m"><strong>Response: </strong>Our response returns a diff containing two sets of files. Each file in the <em>update_files</em> list contains records that must be inserted or replaced (by primary key) in your current dataset. Each file in the <em>delete_files</em> list contains records that must be removed from your current dataset.<br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6584a5de65866f1255d31b92_image3.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6584a5de65866f1255d31b92_image3-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6584a5de65866f1255d31b92_image3-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6584a5de65866f1255d31b92_image3-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6584a5de65866f1255d31b92_image3-p-1600.png 1600w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6584a5de65866f1255d31b92_image3.png 1638w" alt=""/><div class="card card--note"><p><strong>NOTE: </strong>Each &quot;diff&quot; represents changes between two <em>sequential</em> releases. Since the next release after 10/31/23 was on 11/07/23, our API response only contained a single diff object. If we wanted to instead update our 10/31 dataset to the following 11/14/23 release, we would have received two diff objects. The first diff would contain a set of files representing the changes from 10/31 to 11/07, and the second diff would contain changes from 11/07 to 11/14.<br/></p></div><h2 id="Suggestions-for-Working-with-Downloaded-Datasets" class="documentation__header">Suggestions for Working with Downloaded Datasets</h2><p>Explore the following sections for inspiration on leveraging your downloaded data. Please be aware that the tools, libraries, and frameworks mentioned below are not a comprehensive list and their performance will vary based on the size of your data and machine’s capabilities. If you are unsure of which tool is best suited to your needs, we have included some guidelines to help you decide. They are all external tools with no affiliation to Semantic Scholar, and are simply offered as suggestions to facilitate your initial exploration of our data.<br/></p><div class="card card--note"><p><strong>NOTE: </strong>All Semantic Scholar Datasets are delivered in JSON format<br/></p></div><h3 id="exploring-datasets" class="documentation__sub-header">Exploring Datasets</h3><h4 class="margin-bottom--sm">Command Line</h4><p>The<strong> </strong><span class="monospace">more</span> command:<br/><br/>Perhaps the simplest mechanism to view your downloaded data without installing any external tool or library is via the command line through commands like <span class="monospace">more</span>. This command is used to display the contents of a file in a paginated manner and lets you page through the contents of your downloaded file in chunks without loading up the entire dataset. It shows one screen of text at a time and allows you to navigate through the file using the following keyboard commands:<br/></p><ul role="list"><li><strong>Spacebar</strong>: Move forward one screen.</li><li><strong>Enter: </strong>Move forward one line.</li></ul><p><strong>Example</strong>: Assume we have downloaded the papers dataset, and renamed the file to “papersDataset”. Using the <span class="monospace">more</span> command would produce the first ‘screen’ of text. To view the next screen, we could press <em>Spacebar</em>. To only view the next line of text we could press <em>Enter</em>.<br/></p><ul role="list"><li><strong>Command</strong>: <span class="monospace">more papersDataset</span></li><li><strong>Output:</strong></li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659454c9457f8c0452e28db5_image7.png" loading="lazy" alt="more papersDataset output"/><p>The <a href="https://jqlang.github.io/jq/" target="_blank">jq</a> tool<br/><br/>&#x27;<a href="https://jqlang.github.io/jq/" target="_blank">jq</a>&#x27; is a lightweight and flexible command-line tool for exploring and manipulating JSON data. With <em>jq</em>, you can easily view formatted json output, select and view specific fields, filter data based on conditions, and more.<br/><br/>‍<strong>Example</strong>: Let&#x27;s assume we have downloaded the papers dataset and named our file “PapersDataset”. The <em>jq </em>command to format output is <span class="monospace">jq ‘.’ &lt;file-name&gt;.</span><strong> </strong>Let’s use jq to view our formatted paper data:<br/></p><ul role="list"><li><strong>Command</strong>: <span class="monospace">jq . PapersDataset</span></li><li><strong>Output:</strong></li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659455b9acf84e2f7019920b_image13.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659455b9acf84e2f7019920b_image13-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659455b9acf84e2f7019920b_image13.png 653w" alt="jq . papersDataset output"/><h4 class="margin-bottom--sm">Python Pandas Library</h4><p><a href="https://pandas.pydata.org/docs/index.html" target="_blank">Pandas</a> is a powerful and easy-to-use data analysis and manipulation library available in Python. Using Pandas, you can effortlessly import, clean, and explore your data. One of the key structures in Pandas is a <a href="https://pandas.pydata.org/docs/user_guide/dsintro.html#dataframe" target="_blank">DataFrame</a>, which can be thought of as a table of information, akin to a spreadsheet with rows and columns. Each column has a name, similar to a header in Excel, and each row represents a set of related data. With a DataFrame, tasks like sorting, filtering, and analyzing your data become straightforward. In the following sections, we will see how to leverage basic Pandas functions to view and explore our Semantic Scholar data in a DataFrame.<br/></p><p>The <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.head.html#pandas-dataframe-head"><strong>head</strong></a> function: In Pandas you can use the <em>head( )</em> function to view the initial few rows of your dataframe.<br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> pandas </span><span style="color:#dcc6e0">as</span><span> pd
</span>
<span></span><span style="color:#d4d0ab"># Read JSON file into Pandas DataFrame. The ‘lines’ parameter indicates that our file contains one json object per line</span><span>
</span><span>df = pd.read_json(</span><span style="color:#abe338">&#x27;publication venues dataset&#x27;</span><span>, lines=</span><span style="color:#f5ab35">True</span><span>)
</span>
<span></span><span style="color:#d4d0ab"># Print the first few rows of the DataFrame</span><span>
</span><span></span><span style="color:#f5ab35">print</span><span>(df.head())</span></code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945831f2fb6b7e8199199d_image4.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945831f2fb6b7e8199199d_image4-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945831f2fb6b7e8199199d_image4.png 774w" alt="Pandas head output"/><div class="card card--note margin-bottom--sm"><p><strong>NOTE: </strong>You will notice that this is a very wide dataframe, where each column represents a field in our json object (e.g. id, name, issn, url, etc.). By default pandas only shows the first and last columns. To view all the columns, you can configure the pandas display settings before printing your output, with <span class="monospace">pd.set_option(&#x27;display.max_columns&#x27;, None)</span><br/></p></div><p>The <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.count.html#pandas-dataframe-count"><strong>count</strong></a> function: We can use the <em>count( )</em> function to count the number of rows that have data in them (e.g. not null). This can be useful to test the quality of your dataset.<br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#d4d0ab"># Display count of non-null values for each column</span><span>
</span><span></span><span style="color:#f5ab35">print</span><span>(df.count())</span></code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659459ad86a6cba3dcdbaf42_image17.png" loading="lazy" alt="Pandas count output"/><h4 class="margin-bottom--sm">Apache Spark (via Python)</h4><p><a href="https://spark.apache.org/">Apache Spark</a> is a fast and powerful processing engine that can analyze large-scale data faster than traditional methods via in-memory caching and optimized query execution. Spark offers APIs for a variety of programming languages, so you can utilize its capabilities regardless of the language you are coding in. In our examples we will showcase the <a href="https://spark.apache.org/docs/latest/api/python/index.html">Spark Python API</a>, commonly known as <em>PySpark</em>. Let’s see how to use PySpark functions to start viewing and exploring our data:<br/></p><p>The <a href="https://spark.apache.org/docs/latest/api/python/reference/pyspark.sql/api/pyspark.sql.DataFrame.show.html#pyspark-sql-dataframe-show"><strong>show</strong> </a>function: PySpark’s <em>show( )</em> function is similar to <em>print( )</em> or <em>head( ) </em>in pandas and will display the first few rows of data. Let’s load up our <em>publication venues</em> data into a PySpark DataFrame and see how it looks<br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">from</span><span> pyspark.sql </span><span style="color:#dcc6e0">import</span><span> SparkSession
</span>
<span></span><span style="color:#d4d0ab"># Create a Spark session</span><span>
</span><span>spark = SparkSession.builder.appName(</span><span style="color:#abe338">&quot;dataset_exploration&quot;</span><span>).getOrCreate()
</span>
<span></span><span style="color:#d4d0ab"># Read the dataset file named &#x27;publication venues dataset&#x27; into a PySpark DataFrame. Depending on the directory you are working from you may need to include the complete file path.</span><span>
</span><span>df = spark.read.json(</span><span style="color:#abe338">&quot;publication venues dataset&quot;</span><span>)
</span>
<span></span><span style="color:#d4d0ab"># Display the first few rows</span><span>
</span>df.show()</code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945aa7757080f139e86549_image14.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945aa7757080f139e86549_image14-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945aa7757080f139e86549_image14-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945aa7757080f139e86549_image14.png 1134w" alt="Apache Spark Show output"/><p>The <a href="https://spark.apache.org/docs/latest/api/python/reference/pyspark.sql/api/pyspark.sql.DataFrame.printSchema.html#pyspark-sql-dataframe-printschema"><strong>printSchema </strong></a>function: PySpark offers a handy <em>printSchema( )</em> function if you want to explore the structure of your data<br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#d4d0ab"># Display the object schema</span><span>
</span>
df.printSchema()</code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945b8dacf84e2f701d43e4_image18.png" loading="lazy" alt="Apache Spark print schema output"/><h4 class="margin-bottom--sm">MongoDB</h4><p><a href="https://www.mongodb.com/">MongoDB</a> is a fast and flexible database tool built for exploring and analyzing large scale datasets. Think of it as a robust digital warehouse where you can efficiently organize, store, and retrieve large volumes of data. In addition, MongoDB is a NoSQL database that stores data in a flexible schema-less format, scales horizontally, supports various data models, and is optimized for performance. MongoDB offers both <a href="https://www.mongodb.com/try/download/community">on-premise</a> and fully managed cloud options (<a href="https://www.mongodb.com/atlas">Atlas</a>) and can be accessed via the Mongo shell or a GUI (known as <a href="https://www.mongodb.com/products/tools/compass">Mongo Compass</a>). You can check out our guide on <a href="https://docs.google.com/document/d/1Ej5vCd-LZiOxo03b0D7XwgFKQt82v9yz2LaBgWrQQvE/edit#heading=h.2pwe9hxzxy1m">setting up Mongo</a> if you need help getting started. In the example below, we have imported a <em>papers </em>dataset into a Mongo Atlas cluster and show you how to leverage the Mongo Compass GUI to view and explore your data.<br/></p><p>Once you have imported your data, you can view it via Compass as shown in the example below. You can leverage the <a href="https://www.mongodb.com/docs/compass/current/">Compass documentation</a> to discover all its capabilities. We have listed some key items on the user interface to get you acquainted:<br/></p><ul role="list"><li>Data can be viewed in the default list view (shown below), object view, or table view by toggling the button on the upper right hand corner. In the list view, each ‘card’ displays a single record, or in this case a paper object. Notice that MongoDB appends its own ID, known as <em>ObjectId</em> to each record.</li><li>You can filter and analyze your data using the filter pane at the top of the screen, and click on the <em>Explain</em> button to see how your filters were applied to obtain your result set. Note that since Mongo is a NoSQL database, it has a slightly different query language from SQL to use for filtering and manipulation.</li><li>The default tab is the <em>Documents</em> tab where you can view and scroll through your data. You can also switch to the <em>Aggregations tab </em>to transform, filter, group, and perform aggregate operations on your dataset. In the <em>Schema</em> tab, Mongo provides an analysis of the schema of your dataset. When you click on the <em>Indexes</em> tab, you will find that the default index for searches is Mongo’s <em>ObjectId</em>. If you believe you will perform frequent searches using another attribute (e.g. <em>corpusid)</em>, you can add an additional index to optimize performance.</li><li>You can always add more data to your dataset via the green <em>Add Data </em>button right under the filter query bar<em> </em></li></ul><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945c8bb49bc14ebd8513d0_image8.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945c8bb49bc14ebd8513d0_image8-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945c8bb49bc14ebd8513d0_image8-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945c8bb49bc14ebd8513d0_image8-p-1080.png 1080w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945c8bb49bc14ebd8513d0_image8-p-1600.png 1600w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65945c8bb49bc14ebd8513d0_image8.png 1655w" alt="MongoDB UI"/><h5>Setting Up MongoDB</h5><p>You have the option of installing MongoDB onto your machine, or using their managed database-as-a-service option on the cloud, otherwise known as <a href="https://www.mongodb.com/atlas">Atlas</a>. Once you set up your database, you can download the GUI tool (<a href="https://www.mongodb.com/products/tools/compass">Mongo Compass</a>) and connect it to your database to visually interact with your data. If you are new to mongo and want to just explore, you can setup a free cluster on Atlas with just a few easy steps:<br/></p><p><strong>Set Up a Free Cluster on MongoDB Atlas:</strong><br/></p><ol role="list"><li>Sign Up/Login:<br/>1.1. Visit the MongoDB Atlas website.<br/>1.2. Sign up for a new account or log in if you already have one.</li><li>Create a New Cluster:<br/>2.1. After logging in, click on &quot;Build a Cluster.&quot;<br/>2.2. Choose the free tier (M0) or another desired plan.<br/>2.3. Select your preferred cloud provider and region.</li><li>Configure Cluster:<br/>3.1. Set up additional configurations, such as cluster name and cluster tier.<br/>3.2. Click &quot;Create Cluster&quot; to initiate the cluster deployment. It may take a few minutes.</li></ol><p><strong>Connect to MongoDB Compass:</strong><br/></p><ol role="list"><li>Download and Install MongoDB Compass:<br/>1.1. Download MongoDB Compass from the official website.<br/>1.2. Install the Compass application on your computer.</li><li>Retrieve Connection String:<br/>2.1. In MongoDB Atlas, go to the &quot;Clusters&quot; section.<br/>2.2. Click on &quot;Connect&quot; for your cluster.<br/>2.3. Choose &quot;Connect Your Application.&quot;<br/>2.4. Copy the connection string.</li><li>Connect Compass to Atlas:<br/>3.1. Open MongoDB Compass.<br/>3.2. Paste the connection string in the connection dialog.<br/>3.3. Modify the username, password, and database name if needed.<br/>3.4. Click &quot;Connect.&quot;</li></ol><p><strong>Import Data:</strong><br/></p><ol role="list"><li>Create a Database and Collection:<br/>1.1. In MongoDB Compass, navigate to the &quot;Database&quot; tab.<br/>1.2. Create a new database and collection by clicking &quot;Create Database&quot; and &quot;Add My Own Data.&quot;</li><li>Import Data:<br/>2.1. In the new collection, click &quot;Add Data&quot; and choose &quot;Import File.&quot;<br/>2.2. Select your JSON or CSV file containing the data.<br/>2.3. Map fields if necessary and click &quot;Import.&quot;</li><li>Verify Data:<br/>3.1. Explore the imported data in MongoDB Compass to ensure it&#x27;s displayed correctly.</li></ol><p>Now, you have successfully set up a free cluster on MongoDB Atlas, connected MongoDB Compass to the cluster, and imported data into your MongoDB database. This process allows you to start working with your data using MongoDB&#x27;s powerful tools.<br/></p><div class="card card--tip"><p><strong>TIP: </strong>We recommend checking the Mongo website for the latest installation instructions and FAQ in case you run into any issues.<br/></p></div><h3 id="Filtering-and-Analyzing-Datasets" class="documentation__sub-header">Filtering and Analyzing Datasets</h3><h4 class="margin-bottom--sm">Python Pandas</h4><p><strong>Filtering: </strong>We can filter our data by specifying conditions. For example, let’s assume we have loaded our authors&#x27; dataset into a dataframe, and want to filter by authors who have written at least 5 papers and been cited at least 10 times. After applying this filter, let&#x27;s select and display only the <em>authorid</em>, <em>name</em>, <em>papercount</em>, and <em>citationcount</em> fields <br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#d4d0ab">#filter dataframe by authors who have more than 5 publications and have been cited at least 10 times</span><span>
</span><span>df = df[(df.papercount &gt;= </span><span style="color:#f5ab35">5</span><span>) &amp; (df.citationcount &gt;= </span><span style="color:#f5ab35">10</span><span>)]
</span>
<span></span><span style="color:#d4d0ab"># Select and print a subset of the columns in our filtered dataframe</span><span>
</span><span></span><span style="color:#f5ab35">print</span><span>(df[[</span><span style="color:#abe338">&#x27;authorid&#x27;</span><span>, </span><span style="color:#abe338">&#x27;name&#x27;</span><span>, </span><span style="color:#abe338">&#x27;papercount&#x27;</span><span>, </span><span style="color:#abe338">&#x27;citationcount&#x27;</span><span>]])</span></code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659467173c5db5bf0ec05946_image12.png" loading="lazy" alt="Python Pandas Filtering Output"/><p><strong>Sorting</strong>: Pandas offers a variety of sorting functions to organize our data. In the example below, we use the <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html#pandas-dataframe-sort-values"><em>sort_values( )</em></a> function to sort the dataframe by the “name” column and only display the <em>authorid </em>and <em>name</em> columns. The default is ascending order, so in this case our output will list authors in alphabetical order.   e can filter our data by specifying conditions. For example, let’s assume we have loaded our authors&#x27; dataset into a dataframe, and want to filter by authors who have written at least 5 papers and been cited at least 10 times. After applying this filter, let&#x27;s select and display only the <em>authorid</em>, <em>name</em>, <em>papercount</em>, and <em>citationcount</em> fields <br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#d4d0ab">#Let&#x27;s sort our authors in alphabetical order</span><span>
</span><span>df = df.sort_values(by=</span><span style="color:#abe338">&#x27;name&#x27;</span><span>)</span></code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6594676bbfe185b021779b9c_image6.png" loading="lazy" alt="Python Pandas Sorting Output"/><p><strong>Checking for missing values</strong>: Let’s say we want to assess the quality of our data by checking for missing (null) values. We can count how many missing values we have by using the <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.isnull.html#pandas-dataframe-isnull">isnull()</a> and <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html#pandas-dataframe-sum">sum()</a> functions.<br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#d4d0ab"># Count and print the number of missing values for each author attribute</span><span>
</span><span></span><span style="color:#f5ab35">print</span><span>(df.isnull().</span><span style="color:#f5ab35">sum</span><span>())</span></code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659467bbec1d5d39423ebfa2_image2.png" loading="lazy" alt="Python Pandas Checking for missing values Output"/><h4 class="margin-bottom--sm">Apache Spark (via Python)</h4><p><strong>Summary Statistics</strong>: PySpark offers a handy <a href="https://spark.apache.org/docs/3.1.1/api/python/reference/api/pyspark.sql.DataFrame.describe.html#pyspark-sql-dataframe-describe"><em>describe( )</em></a> function to delve into and display summary statistics for the specified columns in our dataset. In this example we describe the papercount, <em>citationcount</em>, and orderBy attributes of our author data. In the results we can see the average papercount of authors in this dataset, along with their average <em>citationcount</em>, <em>hindex</em>, and other common statistical measures.<br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span>df.describe([</span><span style="color:#abe338">&quot;papercount&quot;</span><span>, </span><span style="color:#abe338">&quot;citationcount&quot;</span><span>, </span><span style="color:#abe338">&quot;hindex&quot;</span><span>]).show()</span></code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6594681f97fb083e30e5b889_image5.png" loading="lazy" alt="Apache Spark Summary Statistics Output"/><p><strong>Sorting:</strong> Let’s try sorting our data using PySpark. We can call the <a href="https://spark.apache.org/docs/3.1.1/api/python/reference/api/pyspark.sql.DataFrame.orderBy.html#pyspark-sql-dataframe-orderby">orderBy( )</a> function and specify the column we want to sort by, in this case papercount. We also call the desc() function to sort in descending order (from highest to lowest papercount). We also only want to display the <em>authorid, name, and papercount </em>fields, and display the top 3 records.<br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span>df = df.orderBy(col(</span><span style="color:#abe338">&quot;papercount&quot;</span><span>).desc())
</span><span>df.select(</span><span style="color:#abe338">&quot;authorid&quot;</span><span>, </span><span style="color:#abe338">&quot;name&quot;</span><span>, </span><span style="color:#abe338">&quot;papercount&quot;</span><span>).show(</span><span style="color:#f5ab35">3</span><span>)</span></code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65946a3beb365dc2cda25cee_image10.png" loading="lazy" alt="Apache Spark Summary Sorting Output"/><h4 class="margin-bottom--sm">MongoDB</h4><p><a href="https://www.mongodb.com/docs/compass/current/query/filter/"><strong>Querying, Filtering, and Sorting</strong></a><strong> in Mongo: </strong>Using the Mongo Compass GUI we can filter and sort our dataset per our needs. For example, let&#x27;s see which papers in Medicine were cited the most in the last 5 years, and exclude any papers with under 50 citations. In the <em>project </em>field we choose which fields we would like to display in the output, and we sort in descending order by <em>citationcount </em><br/></p><p><strong>Example:</strong><br/></p><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-json" style="white-space:pre"><span>{
</span>   &#x27;s2fieldsofstudy.category&#x27;: &#x27;Medicine&#x27;,
   &#x27;citationcount&#x27;: {
<span>       &#x27;$gte&#x27;: </span><span style="color:#f5ab35">50</span><span>
</span>   },
   &#x27;year&#x27;: {
<span>       &#x27;$gte&#x27;: </span><span style="color:#f5ab35">2019</span><span>,
</span><span>       &#x27;$lte&#x27;: </span><span style="color:#f5ab35">2023</span><span>
</span>   }
}</code></pre><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6594740968bc21f84a11da81_image11.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6594740968bc21f84a11da81_image11-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6594740968bc21f84a11da81_image11-p-800.png 800w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6594740968bc21f84a11da81_image11.png 1005w" alt="MongoDB"/><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65947442eea5f60bdc1b7328_image16.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65947442eea5f60bdc1b7328_image16-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/65947442eea5f60bdc1b7328_image16.png 673w" alt="MongoDB Output"/><h4 class="margin-bottom--sm">Command Line (jq)</h4><p>Let&#x27;s say you want to filter publication venues that are only journals. You can use <em>jq</em> to filter json objects by a condition, as shown below:<br/></p><p><strong>Command: </strong><span class="monospace">jq ‘ . | select(has(“type”) and .type == “journal”)’ publicationVenues</span><br/></p><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659474d82ee7700345492769_image1.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659474d82ee7700345492769_image1-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/659474d82ee7700345492769_image1.png 630w" alt="jq Output"/><h3 id="Working-with-Multiple-Datasets" class="documentation__sub-header">Working with Multiple Datasets</h3><p>Oftentimes we may want to combine information from multiple datasets to gather insights. Consider the following example:<br/></p><p><strong>Use case: </strong>Let’s delve into a publication venue, such as the “Journal of the Geological Society”, and learn more about the papers that have been published in it. Perhaps we would like to gather the names of authors who have published a paper in this journal, but only those whose papers have been cited at least 15 times. We can combine information from the <em>publication venues</em> dataset and the <em>papers </em>dataset to find the authors that meet this criteria. To do this, we can load our datasets into pandas dataframes and retrieve the publication venue ID associated with the “Journal of the Geological Society” from the <em>publication venues</em> dataset. Then we can search the <em>papers </em>dataset for papers that have a <em>citationcount</em> of at least 15 and are tagged to that venue ID. Finally we can collect the names of authors associated with each of those papers that met our criteria. From this point you can explore other possibilities, such as viewing other papers published by those authors, checking out their homepage on the Semantic Scholar website, and more.<br/></p><p><strong>Python Example:</strong><br/></p><pre contenteditable="false" class="code-block margin-bottom--sm w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-python" style="white-space:pre"><span style="color:#dcc6e0">import</span><span> pandas </span><span style="color:#dcc6e0">as</span><span> pd
</span>
<span></span><span style="color:#d4d0ab"># Create Pandas DataFrames</span><span>
</span><span>papers_df = pd.read_json(</span><span style="color:#abe338">&#x27;papersDataset&#x27;</span><span>, lines=</span><span style="color:#f5ab35">True</span><span>)
</span><span>venues_df = pd.read_json(</span><span style="color:#abe338">&#x27;publicationVenuesDataset&#x27;</span><span>, lines=</span><span style="color:#f5ab35">True</span><span>)
</span>
<span></span><span style="color:#d4d0ab"># Find the venue id for our publication venue of interest - &quot;Journal of the Geological Society&quot;</span><span>
</span><span>publication_venue_id = venues_df.loc[venues_df[</span><span style="color:#abe338">&quot;name&quot;</span><span>] == </span><span style="color:#abe338">&quot;Journal of the Geological Society&quot;</span><span>, </span><span style="color:#abe338">&quot;id&quot;</span><span>].values[</span><span style="color:#f5ab35">0</span><span>]
</span>
<span></span><span style="color:#d4d0ab"># Filter papers based on the venue id with a citation count of at least 15</span><span>
</span>filtered_geology_papers = papers_df.loc[
<span>    (papers_df[</span><span style="color:#abe338">&quot;publicationvenueid&quot;</span><span>] == publication_venue_id) &amp; (papers_df[</span><span style="color:#abe338">&quot;citationcount&quot;</span><span>] &gt;= </span><span style="color:#f5ab35">15</span><span>)
</span>]

<span></span><span style="color:#d4d0ab"># Traverse the list of authors for each paper that met our filter criteria and collect their names into a list</span><span>
</span>author_names = []
<span></span><span style="color:#dcc6e0">for</span><span> authors_list </span><span style="color:#dcc6e0">in</span><span> filtered_geology_papers[</span><span style="color:#abe338">&quot;authors&quot;</span><span>]:
</span><span>    author_names.extend(author[</span><span style="color:#abe338">&quot;name&quot;</span><span>] </span><span style="color:#dcc6e0">for</span><span> author </span><span style="color:#dcc6e0">in</span><span> authors_list)
</span>
<span></span><span style="color:#d4d0ab"># Print the resulting author names, with each name on a new line</span><span>
</span><span></span><span style="color:#f5ab35">print</span><span>(</span><span style="color:#abe338">&quot;Authors associated with papers from the Journal of the Geological Society:&quot;</span><span>)
</span><span></span><span style="color:#f5ab35">print</span><span>(*author_names, sep=</span><span style="color:#abe338">&quot;\n&quot;</span><span>)</span></code></pre><p><strong>Output:</strong><br/></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6594759dbfe185b0217fe46c_image15.png" loading="lazy" sizes="100vw" srcset="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6594759dbfe185b0217fe46c_image15-p-500.png 500w, https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6594759dbfe185b0217fe46c_image15.png 614w" alt="Multiple Datasets Output"/><h3 id="Which-Tool-Should-I-Use" class="documentation__sub-header">Which Tool Should I Use?</h3><p>You may be wondering which of the tools we discussed is right for you. The answer depends on the size of the datasets you are working with, the complexity of your analysis, and the operations you are looking to perform, and your machine’s capabilities, including processing power and available memory.<br/></p><p>The Python Pandas library is typically more useful when your data can fit into memory and you are performing relatively simple operations like filtering, sorting, and basic aggregations. You can also utilize the optional <em>chunksize</em> parameter to read and process your data in smaller, more manageable chunks.<br/></p><p>If your dataset size is significantly larger than available memory, you can use parallel computing tools such as the Python <em>Dask</em> library or <em>Apache Spark</em>.<br/></p><ul role="list"><li>Dask integrates easily with Pandas and can handle complex larger than memory computations by efficiently distributing computations across multiple cores.<br/></li><li>For very large datasets that exceed the capacity of a single machine, Apache Spark is a distributed computing framework that can scale horizontally across a cluster of machines.</li></ul><p>If your data is too large for in-memory processing, you can resort to database systems like MongoDB, PostgreSQL, and others that are specifically designed to handle large datasets. Many of these other tools offer cloud based solutions that can scale easily according to your needs.<br/></p></div></div></div></div></div><section id="api-form" class="blade blade--dark"><div class="blade__grid blade__grid--full"><div id="w-node-_1817117b-9c29-1007-b535-11341765bc29-287a891b" class="blade__content"><div class="card card--m card--centered"><div class="w-embed w-script"><!--[if lte IE 8]>
<script charset="utf-8" type="text/javascript" src="//js.hsforms.net/forms/v2-legacy.js"></script>
<![endif]-->
<script charset="utf-8" type="text/javascript" src="//js.hsforms.net/forms/v2.js"></script>
<script>
  hbspt.forms.create({
	region: "na1",
	portalId: "5910970",
	formId: "105f3885-cfd8-4b57-a570-6174c5c1650a"
});
</script></div></div></div></div></section></main><div class="cta__blade"><h4 class="cta__header">Join the Semantic Scholar API Community Slack Channel</h4><a href="https://join.slack.com/t/semanticschol-xyj3882/shared_invite/zt-1on75e4jr-c0sXVlxEovvtMRQDnTZYAQ" target="_blank" class="button button--hero w-button">Get Started</a></div><div class="post__list"><h4 class="post__list-heading">Latest News &amp; Updates</h4><div class="w-dyn-list"><div role="list" class="post__grid w-dyn-items"><div role="listitem" class="post w-dyn-item"><a href="https://blog.allenai.org/case-study-iterative-design-for-skimming-support-5563dbe0899e" target="_blank" class="post__link w-inline-block"><div class="post__image-wrapper"><img src="https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/652055861194e6fc6bb5983a_skimming_2.0.png" loading="lazy" alt="Case Study: Iterative Design for Skimming Support" sizes="(max-width: 479px) 85vw, (max-width: 767px) 84vw, (max-width: 991px) 88vw, 22vw" srcset="https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/652055861194e6fc6bb5983a_skimming_2.0-p-500.png 500w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/652055861194e6fc6bb5983a_skimming_2.0-p-800.png 800w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/652055861194e6fc6bb5983a_skimming_2.0-p-1080.png 1080w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/652055861194e6fc6bb5983a_skimming_2.0-p-1600.png 1600w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/652055861194e6fc6bb5983a_skimming_2.0-p-2000.png 2000w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/652055861194e6fc6bb5983a_skimming_2.0-p-2600.png 2600w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/652055861194e6fc6bb5983a_skimming_2.0-p-3200.png 3200w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/652055861194e6fc6bb5983a_skimming_2.0.png 5834w" class="post__image"/></div><h4 class="post__title">Case Study: Iterative Design for Skimming Support</h4><div class="post__meta"><div class="post__date">Oct 6, 2023</div><div class="post__read-time">7 min read</div></div><p class="post__intro">How might we help researchers quickly assess the relevance of scientific literature? Take a closer look at Skimming, Semantic Reader’s latest AI feature, and the collaborative design process behind it.</p></a><div class="post__author">Cassidy Trier</div></div><div role="listitem" class="post w-dyn-item"><a href="https://blog.allenai.org/behind-the-scenes-of-semantic-scholars-new-author-influence-design-d7e007ba6a84" target="_blank" class="post__link w-inline-block"><div class="post__image-wrapper"><img src="https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64de863a294e5ef80fee0187_Screen%20Shot%202023-02-06%20at%2011.36.31%20AM.png" loading="lazy" alt="Behind the Scenes of Semantic Scholar’s New Author Influence Design" sizes="(max-width: 479px) 85vw, (max-width: 767px) 84vw, (max-width: 991px) 88vw, 22vw" srcset="https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64de863a294e5ef80fee0187_Screen%20Shot%202023-02-06%20at%2011.36.31%20AM-p-500.png 500w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64de863a294e5ef80fee0187_Screen%20Shot%202023-02-06%20at%2011.36.31%20AM-p-800.png 800w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64de863a294e5ef80fee0187_Screen%20Shot%202023-02-06%20at%2011.36.31%20AM-p-1080.png 1080w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64de863a294e5ef80fee0187_Screen%20Shot%202023-02-06%20at%2011.36.31%20AM-p-1600.png 1600w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64de863a294e5ef80fee0187_Screen%20Shot%202023-02-06%20at%2011.36.31%20AM-p-2000.png 2000w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64de863a294e5ef80fee0187_Screen%20Shot%202023-02-06%20at%2011.36.31%20AM.png 2150w" class="post__image"/></div><h4 class="post__title">Behind the Scenes of Semantic Scholar’s New Author Influence Design</h4><div class="post__meta"><div class="post__date">Aug 17, 2023</div><div class="post__read-time">5 min read</div></div><p class="post__intro">We released a new version of Author Influence interface to help scholars better discover other scholars in their fields. Here&#x27;s how we identified user insights and made those design choices.</p></a><div class="post__author">Cassidy Trier, Evie Cheng, Ashley Lee</div></div><div role="listitem" class="post w-dyn-item"><a href="https://www.nature.com/articles/d41586-023-01907-z" target="_blank" class="post__link w-inline-block"><div class="post__image-wrapper"><img src="https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64d15e16ad0f9fd89058273b_nature.webp" loading="lazy" alt="Artificial-intelligence search engines wrangle academic literature" sizes="(max-width: 479px) 85vw, (max-width: 767px) 84vw, (max-width: 991px) 88vw, 22vw" srcset="https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64d15e16ad0f9fd89058273b_nature-p-500.webp 500w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64d15e16ad0f9fd89058273b_nature-p-800.webp 800w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64d15e16ad0f9fd89058273b_nature-p-1080.webp 1080w, https://assets-global.website-files.com/605ba9b55a4a92803e45a32b/64d15e16ad0f9fd89058273b_nature.webp 1248w" class="post__image"/></div><h4 class="post__title">Artificial-intelligence search engines wrangle academic literature</h4><div class="post__meta"><div class="post__date">Aug 7, 2023</div><div class="post__read-time">5 min read</div></div><p class="post__intro">Nature had a chat with Dan Weld, Chief Scientist at Semantic Scholar, to discuss how search engines are helping scientists explore and innovate by making it easier to draw connections from a massive collection of scientific literature.</p></a><div class="post__author">Amanda Heidt</div></div></div></div></div><footer class="site-footer"><div class="site-footer__top"><div class="site-footer__top-container"><div class="site-footer__about"><h6 class="site-footer site-footer__title">What Is Semantic Scholar?</h6><p class="site-footer site-footer__text">Semantic Scholar is a free, AI-powered research tool for scientific literature, based at the Allen Institute for AI.</p><a href="/about" class="site-footer site-footer__link">Learn More</a></div><div class="site-footer__navigation"><ul role="list" class="site-footer site-footer__list w-list-unstyled"><li><h6 class="site-footer site-footer__title">About</h6></li><li><a href="/about" class="site-footer site-footer__link">About Us<br/></a></li><li><a href="/about/team" class="site-footer site-footer__link">Meet the Team<br/></a></li><li><a href="/about/publishers" class="site-footer site-footer__link">Publishers</a></li><li><a href="https://medium.com/ai2-blog/semantic-scholar/home" target="_blank" class="site-footer site-footer__link">Blog</a></li><li><a href="https://allenai.org/careers?team=semantic+scholar#current-openings" target="_blank" class="site-footer site-footer__link">AI2 Careers</a></li></ul><ul role="list" class="site-footer site-footer__list w-list-unstyled"><li><h6 class="site-footer site-footer__title">Product</h6></li><li><a href="/product" class="site-footer site-footer__link">Product Overview</a></li><li><a href="/product/semantic-reader" class="site-footer site-footer__link">Semantic Reader</a></li><li><a href="/product/scholars-hub" class="site-footer site-footer__link">Scholar&#x27;s Hub</a></li><li><a href="/product/beta-program" class="site-footer site-footer__link">Beta Program</a></li><li><a href="/product/release-notes" class="site-footer site-footer__link">Release Notes</a></li></ul><ul role="list" class="site-footer site-footer__list w-list-unstyled"><li><h6 class="site-footer site-footer__title">API</h6></li><li><a href="/product/api" class="site-footer site-footer__link">API Overview</a></li><li><a href="/product/api/tutorial" aria-current="page" class="site-footer site-footer__link w--current">API Tutorials</a></li><li><a href="https://api.semanticscholar.org/api-docs/" class="site-footer site-footer__link">API Documentation</a></li><li><a href="/product/api/gallery" class="site-footer site-footer__link">API Gallery</a></li></ul><ul id="w-node-_80db44ed-17f7-2024-a450-ff6046e68512-46e684e3" role="list" class="site-footer site-footer__list w-list-unstyled"><li><h6 class="site-footer site-footer__title">Research</h6></li><li><a href="https://allenai.org/papers?tag=Semantic%20Scholar" class="site-footer site-footer__link">Publications</a></li><li><a href="/research/research-team" class="site-footer site-footer__link">Researchers</a></li><li><a href="/research/careers" class="site-footer site-footer__link">Research Careers</a></li><li><a href="/research/prototypes" class="site-footer site-footer__link">Prototypes</a></li><li><a href="/resources" class="site-footer site-footer__link">Resources</a></li></ul><ul id="w-node-a1cfe8f5-f656-0f8f-b57f-f2c91de1b718-46e684e3" role="list" class="site-footer site-footer__list w-list-unstyled"><li><h6 class="site-footer site-footer__title">Help</h6></li><li><a href="https://www.semanticscholar.org/faq" class="site-footer site-footer__link">FAQ</a></li><li><a href="/about/librarians" class="site-footer site-footer__link">Librarians</a></li><li><a href="/product/tutorials" class="site-footer site-footer__link">Tutorials</a></li><li><a href="#" data-w-id="2cf6e605-c551-b5e7-40a2-70dbdd9705a1" class="site-footer site-footer__link site-footer__contact-trigger">Contact</a></li></ul></div></div></div><div class="site-footer__bottom"><div class="site-footer__bottom-container"><p class="site-footer__legal">Proudly built by <a href="https://allenai.org/" target="_blank" class="site-footer site-footer__link">AI2</a> with the help of our Collaborators<br/><a href="https://allenai.org/terms.html" target="_blank" class="site-footer site-footer__link">Terms of Service</a>  •  <a href="https://allenai.org/privacy-policy.html" target="_blank" class="site-footer site-footer__link">Privacy Policy</a>  •  <a href="/product/api/license" class="site-footer site-footer__link">API License Agreement</a></p><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/6053d171606f67180e4d4ee3_logo-ai2-footer.svg" loading="lazy" alt="" class="site-footer__logo"/></div></div><div class="contact-modal"><div class="contact-modal__container"><a data-w-id="094e8a79-f899-529e-250c-5240927de9d7" href="#" class="contact-modal__close w-inline-block"><img src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/61e9b4e329b9d877dee723c3_close-light.svg" loading="lazy" alt="Close" class="contact-modal__close-jewel"/></a><h4 class="margin-top--none">Contact Us</h4><div class="contact-modal__form-wrapper w-form"><form id="freshdesk-contact-form" name="wf-form-Contact" data-name="Contact" action="https://www.semanticscholar.org/api/1/feedback" method="post" class="contact-modal__form" data-wf-page-id="6584745360a4872a287a891b" data-wf-element-id="7663d2bf-5ed9-4856-37e4-a4966bfbf84f"><p class="margin-bottom--sm">Please visit our <a href="https://www.semanticscholar.org/faq">FAQ</a> to find helpful information before submitting your question.<br/></p><label for="contact-form-name">Your name</label><input class="w-input" maxlength="256" name="name" data-name="name" placeholder="" type="text" id="contact-form-name"/><label for="contact-form-email-2">Your email</label><input class="w-input" maxlength="256" name="email" data-name="email" placeholder="" type="email" id="contact-form-email" required=""/><label for="contact-form-subject">Subject<br/></label><input class="w-input" maxlength="256" name="subject" data-name="subject" placeholder="" type="text" id="contact-form-subject" required=""/><label for="contact-form-topic">Topic<br/></label><select id="contact-form-topic" name="topic" data-name="topic" required="" class="select-field w-select"><option value="">Select A Topic</option><option value="Index Journal Request">Index a Journal</option><option value="Takedown Request">Remove A Paper</option><option value="Author Disambiguation">Author Correction</option><option value="Data Quality">Data Correction</option><option value="Feature Request">Make A Suggestion</option><option value="Semantic Reader">Semantic Reader</option><option value="TLDR">TLDR</option><option value="Other Problem">Other</option></select><label for="contact-form-feedback-2">Feedback<br/></label><textarea id="contact-form-feedback" name="feedback" maxlength="5000" data-name="feedback" placeholder="" required="" class="margin-bottom--sm w-input"></textarea><input type="submit" data-wait="Please wait..." class="button w-button" value="Contact Us"/></form><div class="contact-modal__form-success w-form-done"><div><strong>Thanks! </strong>Your feedback has been submitted.</div></div><div class="contact-modal__form-error w-form-fail"><div>Something went wrong while submitting the form, please try again.</div></div></div></div><div data-w-id="094e8a79-f899-529e-250c-5240927de9fe" class="contact-modal__overlay"></div></div></footer><script src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=605236bb767e9a5bb229c63c" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script><script src="https://assets-global.website-files.com/605236bb767e9a5bb229c63c/js/semanticscholar.e882e120c.js" type="text/javascript"></script><script>
    $(document).ready(function() { 

        // Contact Form
        $('.contact-modal__form').submit(function(e){

            // Stops regular form submit
            e.preventDefault();

            // Sets variables, encodes form into json
            var $this = $(this),
                $parent = $this.parent(),
                $success = $parent.find(".contact-modal__form-success"),
                $error = $parent.find(".contact-modal__form-error"),
                action = $this.attr('action'),
                submission = $this.serializeArray().reduce((memo, field) => ({...memo, [field.name]: field.value}), {});

            // Record URL
            submission.url=window.location.href;

            // Submit
            $.ajax(action, {
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(submission),
                cache: false,
                dataType: 'json',
                crossDomain: true,
                processData: false
            }).always(function(e){

                // Hides form, shows success
                $this.hide();
                $success.show();

            });

            // just in case
            return false;
        });


        // Listens for links to /about/contact and pops up contact form instead of redirecting.
        $('.main a[href$="about/contact"]').on('click', function(e){
            
            e.preventDefault();
            $('.contact-modal').show();

        });

    });
</script><script>
$(document).ready(function() {

	// If there's a hashtag
  var target = window.location.hash;
  if(target != ''){

		var $section;
    
    if( $(target).hasClass('accordion__section') ){
    	$section = $(target + ' .accordion__content');
    } else {
	    $section = $(target).parent();
    }
    
		// Opens the correct section
		$('.accordion__content--open').removeClass('accordion__content--open');
    $section.addClass('accordion__content--open');
    
    // scrolls to correct section
    document.querySelector(target).scrollIntoView({
      behavior: 'smooth'
    });
    
  }

  // Controls accordion interactions
  $('.accordion__header').on('click', function(){  
		var accordion_content = $(this).next();
    accordion_content.toggleClass('accordion__content--open');    
  });

	// Controls navigation
  $('.navigation__anchor-item a').on('click', function(e){
    
    // Stops webflow behavior
  	e.stopPropagation()
    
    // Opens appropriate section
		var $this = $(this),
    		$sections = $('.accordion__content'),
    		$section = $("#" + $this.attr('data-section') + ' .accordion__content');
        
		$sections.removeClass('accordion__content--open');
    $section.addClass('accordion__content--open');
    history.pushState(null, null, this.getAttribute('href'));
    
    // Scrolls to section
    document.querySelector(this.getAttribute('href')).scrollIntoView({
      behavior: 'smooth'
    });
    
		// Stops default browser behavior
		return false;
    
	});

});

</script></body></html> contentType 9 text/html url 56 https://www.semanticscholar.org:443/product/api/tutorial responseCode 3 200 