lagefgvslmssioqqmmomukyoviqicohazoeszaxi length 5 38599 page 38599 <!DOCTYPE HTML>
<html lang="en">
  <head>
<!-- PDTQ-131 -->
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-N3RT7TD');</script>
<!-- End Google Tag Manager -->
    
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Build Stages - Travis CI</title>
<link rel="stylesheet" href="/assets/stylesheets/main.css">
<link rel="alternate" type="application/rss+xml" title="Travis CI Build Environment Updates" href="https://docs.travis-ci.com/feed.build-env-updates.xml">
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js" defer></script>

<script src="/assets/javascripts/main.js" type="text/javascript" charset="utf-8" defer></script>
<script src="/assets/javascripts/prism.js" type="text/javascript" charset="utf-8" defer></script>
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@travisci" />
<meta name="twitter:creator" content="@travisci" />
<meta property="og:title" content="Travis CI Documentation" />
<meta property="og:type" content="website" />
<meta property="og:url" content=/user/build-stages/ />
<meta property="og:description" content="Build Stages" />
<meta property="og:image" content="/images/TravisCI-Full-Color.png" }} />
<meta property="og:image:type" content="image/png" />
<meta property="og:image:width" content="642" />
<meta property="og:image:height" content="201" />
<meta property="og:image:alt" content="Travis CI logo" />


 

  </head>
  <body>
<!-- PDTQ-131 -->
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-N3RT7TD"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

    <div class="wrapper">

      <header class="top">
  <div class="row topbar">
    <h1 id="logo" class="logo">
  <a href="https://travis-ci.com/" title="Travis CI">Travis</a>
</h1>

    <nav>
      <ul id="navigation" class="navigation">
        <li><a href="https://blog.travis-ci.com">Blog</a></li>
        <li><a href="/">Docs</a></li>
        <li class="toggle"><button type="button" id="toggle-menu" class="button--teal">Menu</button></li>
      </ul>
    </nav>
  </div>
</header>


      <div id="content" class="row">

        <div id="sidebar" class="sidebar">
  <div>
    <!-- <h2>Search</h2> -->
    <div class="searchbox">
      <form>
        <input type="text" id="st-search-input" class="searchbox-input" placeholder="Search the docs" />
      </form>
      <script type="text/javascript">
      var Swiftype = window.Swiftype || {};
        (function() {
          Swiftype.key = 'tXvDDzd4fNTBnLvxfEyx';

          Swiftype.searchSearchFields = {
            "page": ["title, body, tags"]
          };
          Swiftype.autocompleteSearchFields = {
            "page": ["title, body, tags"]
          };
          /** DO NOT EDIT BELOW THIS LINE **/
          var script = document.createElement('script'); script.type = 'text/javascript'; script.async = true;
          script.src = "//swiftype.com/embed.js";
          var entry = document.getElementsByTagName('script')[0];
          document.getElementsByTagName('script')[0].parentNode.insertBefore(script, entry);
        }());
      </script>
    </div>
  </div>

  <section class="sidebar-navigation">
    <nav>
      <h3>Getting Started</h3>
      <ul>
        <li><a href="/user/for-beginners/">Core Concepts for Beginners</a></li>
        <li><a href="/user/tutorial/">Travis CI Tutorial</a></li>
        <li><a href="/user/customizing-the-build/">Customizing the Build</a></li>
        <li><a href="/user/speeding-up-the-build/">Speeding up the Build</a></li>
        <li><a href="/user/docker/">Using Docker in your Build</a></li>
        <li><a href="/user/gui-and-headless-browsers/">Headless Testing with Browsers</a></li>
        <li><a href="/user/pull-requests/">Building Pull Requests</a></li>
        <li><a href="/user/cron-jobs/">Cron Jobs</a></li>
        <li><a href="/user/common-build-problems/">Common Build Problems</a></li>
        <li><a href="https://github.com/travis-ci/travis#readme">Command Line Client</a></li>
        <li><a href="/user/build-config-imports/">Build Config Imports</a></li>
        <li><a href="/user/build-config-validation/">Build Config Validation</a></li>
      </ul>

      <h3>Jobs, Builds, Matrices and Stages</h3>
      <ul>
        <li><a href="/user/job-lifecycle/">Job Lifecycle</a></li>
        <li><a href="/user/build-matrix/">Build Matrix</a></li>
        <li><a href="/user/build-stages/">Build Stages</a></li>
        <li><a href="/user/conditional-builds-stages-jobs/">Conditional Builds, Stages, and Jobs</a></li>
      </ul>

      <h3>Installing Dependencies</h3>
      <ul>
        <li><a href="/user/installing-dependencies/">Installing Dependencies</a></li>
        <li><a href="/user/private-dependencies/">Private Dependencies GitHub</a></li>
        <li><a href="/user/private-dependencies-bb/">Private Dependencies Bitbucket</a></li>
        <li><a href="/user/database-setup/">Setting up Services and Databases</a></li>
        <li><a href="/user/caching/">Caching Dependencies</a></li>
        <li><a href="/user/using-workspaces/">Caching Dependencies within a Build (Workspaces)</a></li>
        <li><a href="/user/ssh-known-hosts/">Adding to SSH Known Hosts</a></li>
      </ul>

      <h3>Programming Languages</h3>
      <ul>
      
        <li><a href="/user/languages/android/">Android</a></li>
      
        <li><a href="/user/languages/c/">C</a></li>
      
        <li><a href="/user/languages/csharp/">C#</a></li>
      
        <li><a href="/user/languages/cpp/">C++</a></li>
      
        <li><a href="/user/languages/clojure/">Clojure</a></li>
      
        <li><a href="/user/languages/crystal/">Crystal</a></li>
      
        <li><a href="/user/languages/d/">D</a></li>
      
        <li><a href="/user/languages/dart/">Dart</a></li>
      
        <li><a href="/user/languages/elixir/">Elixir</a></li>
      
        <li><a href="/user/languages/elm/">Elm</a></li>
      
        <li><a href="/user/languages/erlang/">Erlang</a></li>
      
        <li><a href="/user/languages/csharp/">F#</a></li>
      
        <li><a href="/user/languages/minimal-and-generic/">Generic</a></li>
      
        <li><a href="/user/languages/go/">Go</a></li>
      
        <li><a href="/user/languages/groovy/">Groovy</a></li>
      
        <li><a href="/user/languages/haskell/">Haskell</a></li>
      
        <li><a href="/user/languages/haxe/">Haxe</a></li>
      
        <li><a href="/user/languages/java/">Java</a></li>
      
        <li><a href="/user/languages/javascript-with-nodejs/">JavaScript <small>(with Node.js)</small></a></li>
      
        <li><a href="/user/languages/julia/">Julia</a></li>
      
        <li><a href="/user/languages/matlab/">MATLAB</a></li>
      
        <li><a href="/user/languages/minimal-and-generic/">Minimal</a></li>
      
        <li><a href="/user/languages/nix/">Nix</a></li>
      
        <li><a href="/user/languages/objective-c/">Objective-C</a></li>
      
        <li><a href="/user/languages/perl/">Perl</a></li>
      
        <li><a href="/user/languages/perl6/">Perl6</a></li>
      
        <li><a href="/user/languages/php/">PHP</a></li>
      
        <li><a href="/user/languages/python/">Python</a></li>
      
        <li><a href="/user/languages/r/">R</a></li>
      
        <li><a href="/user/languages/ruby/">Ruby</a></li>
      
        <li><a href="/user/languages/rust/">Rust</a></li>
      
        <li><a href="/user/languages/scala/">Scala</a></li>
      
        <li><a href="/user/languages/smalltalk/">Smalltalk</a></li>
      
        <li><a href="/user/languages/objective-c/">Swift</a></li>
      
        <li><a href="/user/languages/csharp/">Visual Basic</a></li>
      
        <li><a href="/user/languages/community-supported-languages/">Adding a language</a></li>
      </ul>

      <h3>Deployments and Uploads</h3>
      <ul>
        
          <li class="is-overview"><a href="/user/deployment/">Overview</a></li>
          
        
        
          <li><a href="/user/deployment/anynines/">anynines</a></li>
        
          <li><a href="/user/deployment/atlas/">Atlas</a></li>
        
          <li><a href="/user/deployment/codedeploy/">AWS CodeDeploy</a></li>
        
          <li><a href="/user/deployment/elasticbeanstalk/">AWS Elastic Beanstalk</a></li>
        
          <li><a href="/user/deployment/lambda/">AWS Lambda</a></li>
        
          <li><a href="/user/deployment/opsworks/">AWS OpsWorks</a></li>
        
          <li><a href="/user/deployment/s3/">AWS S3</a></li>
        
          <li><a href="/user/deployment/azure-web-apps/">Azure Web Apps</a></li>
        
          <li><a href="/user/deployment/bintray/">bintray</a></li>
        
          <li><a href="/user/deployment/bitballoon/">BitBalloon</a></li>
        
          <li><a href="/user/deployment/bluemixcloudfoundry/">Bluemix CloudFoundry</a></li>
        
          <li><a href="/user/deployment/boxfuse/">Boxfuse</a></li>
        
          <li><a href="/user/deployment/catalyze/">Catalyze</a></li>
        
          <li><a href="/user/deployment/chefsupermarket/">Chef Supermarket</a></li>
        
          <li><a href="/user/deployment/cloud66/">Cloud 66</a></li>
        
          <li><a href="/user/deployment/cloudfoundry/">CloudFoundry</a></li>
        
          <li><a href="/user/deployment/cargo/">Cargo</a></li>
        
          <li><a href="/user/deployment/engineyard/">Engine Yard</a></li>
        
          <li><a href="/user/deployment/pages/">GitHub Pages</a></li>
        
          <li><a href="/user/deployment/releases/">GitHub Releases</a></li>
        
          <li><a href="/user/deployment/google-app-engine/">Google App Engine</a></li>
        
          <li><a href="/user/deployment/gcs/">Google Cloud Storage</a></li>
        
          <li><a href="/user/deployment/firebase/">Google Firebase</a></li>
        
          <li><a href="/user/deployment/hackage/">Hackage</a></li>
        
          <li><a href="/user/deployment/hephy/">Hephy</a></li>
        
          <li><a href="/user/deployment/heroku/">Heroku</a></li>
        
          <li><a href="/user/deployment/launchpad/">Launchpad</a></li>
        
          <li><a href="/user/deployment/npm/">npm</a></li>
        
          <li><a href="/user/deployment/openshift/">OpenShift</a></li>
        
          <li><a href="/user/deployment/packagecloud/">packagecloud.io</a></li>
        
          <li><a href="/user/deployment/puppetforge/">Puppet Forge</a></li>
        
          <li><a href="/user/deployment/pypi/">PyPI</a></li>
        
          <li><a href="/user/deployment/cloudfiles/">Rackspace Cloud Files</a></li>
        
          <li><a href="/user/deployment/rubygems/">RubyGems</a></li>
        
          <li><a href="/user/deployment/scalingo/">Scalingo</a></li>
        
          <li><a href="/user/deployment/script/">Script</a></li>
        
          <li><a href="/user/deployment/snaps/">Snap Store</a></li>
        
          <li><a href="/user/deployment/surge/">Surge.sh</a></li>
        
          <li><a href="/user/deployment/testfairy/">TestFairy</a></li>
        
          <li><a href="/user/deployment/transifex/">Transifex</a></li>
        
        <li><a href="/user/uploading-artifacts/">Uploading Build Artifacts</a></li>
      </ul>

      <h3>CI Environment Reference</h3>
      <ul>
        <li class="is-overview"><a href="/user/reference/overview/">Overview</a></li>
        <li><a href="/user/reference/linux/">Ubuntu Linux CI Environment References</a></li>
        <li><a href="/user/reference/osx/">macOS CI Environment Reference</a></li>
        <li><a href="/user/reference/windows/">Windows CI Environment Reference</a></li>
        <li><a href="/user/reference/freebsd/">FreeBSD CI Environment Reference</a></li>
        <li><a href="/user/multi-os/">Building on Multiple Operating Systems</a></li>
        <li><a href="/user/multi-cpu-architectures/">Building on Multiple CPU Architectures</a></li>
        <li><a href="/user/environment-variables/">Environment Variables</a></li>
        <li><a href="/user/build-environment-updates/">Build Environment Updates</a></li>
        <li><a href="/user/ip-addresses/">Build Machines IP Addresses</a></li>
      </ul>

      <h3>Security and Secure Software Supply Chain</h3>
      <ul>
        <li><a href="/user/encryption-keys/">Encrypting Sensitive Data</a></li>
        <li><a href="/user/encrypting-files/">Encrypting Files</a></li>
        <li><a href="/user/github-oauth-scopes/">GitHub Permissions used by Travis CI</a></li>
        <li><a href="/user/bb-oauth-scopes/">Bitbucket Permissions used by Travis CI</a></li>
        <li><a href="/user/assembla-oauth-scopes/">Assembla Permissions used by Travis CI</a></li>
        <li><a href="/user/gl-oauth-scopes/">GitLab Permissions used by Travis CI</a></li>
        <li><a href="/user/disable-job-logs/">Disable Job Logs Availability</a></li>
        <li><a href="/user/best-practices-security/">Best Practices in Securing Your Data</a></li>
        <li><a href="/user/securely-signing-software">Securely Signing Software</a></li>
        <li><a href="/user/sbom">Software Bill of Materials</a></li>
      </ul>

      <h3>Integrations and Notifications</h3>
      <ul>
        <li><a href="/user/notifications/">Configuring Notifications</a></li>
        <li><a href="/user/status-images/">Showing Build Status Images</a></li>
        <li><a href="/user/code-climate/">Code Climate</a></li>
        <li><a href="/user/deepsource/">DeepSource</a></li>
        <li><a href="/user/coveralls/">Coveralls</a></li>
        <li><a href="/user/coverity-scan/">Coverity Scan</a></li>
        <li><a href="/user/browserstack/">BrowserStack</a></li>
        <li><a href="/user/sauce-connect/">Sauce Labs</a></li>
        <li><a href="/user/sonarcloud/">SonarCloud</a></li>
        <li><a href="/user/sourceclear/">SourceClear</a></li>
        <li><a href="/user/build-feeds/">Atom Feeds</a></li>
        <li><a href="/user/cc-menu/">CCMenu / CCTray Feeds</a></li>
        <li><a href="/user/integration/platformio/">Embedded Builds with PlatformIO</a></li>
        <li><a href="/user/hashicorp-vault-integration">Hashicorp Vault</a></li>
        <li><a href="/user/apps/">3rd Party Apps, Clients and Tools</a></li>
      </ul>

      <h3>Developer Program</h3>
      <ul>
        <li class="is-overview"><a href="/user/developer/">Overview</a></li>
        <li><a href="https://developer.travis-ci.com/">API V3</a></li>
        <li><a href="/user/triggering-builds/">Triggering Builds with API V3</a></li>
        <li><a href="https://github.com/travis-ci/travis#ruby-library">The Ruby Library</a></li>
      </ul>
      
      <h3>Hosted Billing</h3>
      <ul>
        <li class="is-overview"><a href="/user/billing-overview/">Overview</a></li>
        <li><a href="/user/billing-autorefill/">Auto-refill</a></li>
        <li><a href="/user/billing-faq/">FAQ</a></li>
      </ul>

      <h3>Travis CI Enterprise</h3>
      <ul>
        <li><a href="/user/enterprise/">Enterprise Docs</a></li>
      </ul>

    </nav>
  </section>

  <section class="sidebar-notice">
    <p>This documentation site is Open Source.
      The <a href="https://github.com/travis-ci/docs-travis-ci-com">README in our Git repository</a> explains how to contribute.</p>
    <p>Travis CI relies on Open Source <a href="/user/open_source_license/">licensing information</a>.</p>
  </section>

</div><!-- /#sidebar -->


        <main id="main" class="main" data-swiftype-index='true'>
          
            <aside class="improve-page" data-swiftype-index='false'><a href="https://github.com/travis-ci/docs-travis-ci-com/edit/master/user/build-stages.md" target="_blank" title="Edit this page on GitHub" class="button-pen" data-proofer-ignore>Improve this page on GitHub</a></aside>
            <h1 class="title">Build Stages</h1>
          

          


          
            <div id="toc" class="toc">
              <ul class="list-language">
  <li><a href="#what-are-build-stages">What Are Build Stages?</a></li>
  <li><a href="#how-do-build-stages-work">How Do Build Stages Work?</a></li>
  <li><a href="#how-to-define-build-stages">How to Define Build Stages?</a></li>
  <li><a href="#build-config-reference">Build Config Reference</a></li>
  <li><a href="#naming-your-build-stages">Naming Your Build Stages</a></li>
  <li><a href="#build-stages-and-build-matrix-expansion">Build Stages and Build Matrix Expansion</a></li>
  <li><a href="#specifying-stage-order-and-conditions">Specifying Stage Order and Conditions</a></li>
  <li><a href="#build-stages-and-deployments">Build Stages and Deployments</a></li>
  <li><a href="#data-persistence-between-stages-and-jobs">Data Persistence between Stages and Jobs</a></li>
  <li><a href="#examples">Examples</a></li>
</ul>

            </div>
          

          <h2 id="what-are-build-stages">What Are Build Stages? <a href="#what-are-build-stages" class="toc-anchor">#</a></h2>

<p>Build stages is a way to group jobs, and run jobs in each stage in parallel,
but run one stage after another sequentially.</p>

<p>In the simplest and most common use case, you can now make one job run <em>only</em>
if several other, parallel jobs have completed successfully.</p>

<p>Let’s say you want to test a library like a Ruby gem or an npm package against
various runtime (Ruby or Node.js) versions in <a href="/user/customizing-the-build#build-matrix">parallel</a>.
And you want to release your gem or package <strong>only</strong> if all tests have passed and
completed successfully. Build stages make this possible.</p>

<p>Of course, there are a lot more and a lot more elaborated use cases than this
one. You can, for example, also use build stages to warm up dependency caches
in a single job on a first stage, then use the cache on several jobs on a
second stage. Or, you could generate a Docker image and push it first, then
test it on several jobs in parallel. Or, you could run unit tests, deploy to
staging, run smoke tests and only then deploy to production.</p>

<h2 id="how-do-build-stages-work">How Do Build Stages Work? <a href="#how-do-build-stages-work" class="toc-anchor">#</a></h2>

<p>The concept of build stages is powerful and flexible, yet simple and
approachable:</p>

<p>Stages group jobs that run in parallel and different stages run sequentially.</p>

<p>A stage is a group of jobs that are allowed to run in parallel. However, each
one of the stages runs one after another and will only proceed, if all jobs in
the previous stage have passed successfully. If one job fails in one stage, all
other jobs on the same stage will still complete, but all jobs in subsequent
stages will be canceled and the build fails.</p>

<p>You can configure as many jobs per stage as you need and you can have as many
stages as your delivery process requires.</p>

<p>In the following example, we are running two jobs on the first stage called
test, and then run a single third job on the second stage called deploy:</p>

<p><img src="/images/stages/stages.gif" alt="Example screencast" /></p>

<h2 id="how-to-define-build-stages">How to Define Build Stages? <a href="#how-to-define-build-stages" class="toc-anchor">#</a></h2>

<p>Here’s how you’d set up the build configuration for this in your <code class="highlighter-rouge">.travis.yml</code>
file:</p>

<div data-file=".travis.yml" class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">include</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>
      <span class="na">script</span><span class="pi">:</span> <span class="s">./test </span><span class="m">1</span>
    <span class="pi">-</span> <span class="c1"># stage name not required, will continue to use `test`</span>
      <span class="na">script</span><span class="pi">:</span> <span class="s">./test </span><span class="m">2</span>
    <span class="pi">-</span> <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy</span>
      <span class="na">script</span><span class="pi">:</span> <span class="s">./deploy</span>
</code></pre></div></div>

<p>This configuration creates the build from the screencast above. I.e., it creates
a build with three jobs, two of which start in parallel in the first stage
(named <code class="highlighter-rouge">test</code>), while the third job on the second stage (named <code class="highlighter-rouge">deploy</code>) starts
only after the test stage completes successfully.</p>

<h2 id="build-config-reference">Build Config Reference <a href="#build-config-reference" class="toc-anchor">#</a></h2>

<p>You can find more information on the build config format for <a href="https://config.travis-ci.com/ref/stages">build stages</a> in our <a href="https://config.travis-ci.com/">Travis CI Build Config Reference</a>.</p>

<h2 id="naming-your-build-stages">Naming Your Build Stages <a href="#naming-your-build-stages" class="toc-anchor">#</a></h2>

<p>Stages are identified by their names, which are composed of names and emojis.
The first letter of a stage name is automatically capitalized for
aesthetic reasons, so you don’t have to deal with uppercase strings in your
<code class="highlighter-rouge">.travis.yml</code> file.</p>

<p>Also, you do not have to specify the name on every single job (as shown in the
example above). The default stage is <code class="highlighter-rouge">test</code>. Jobs that do not have a stage
name are assigned to the previous stage name, if one exists or the default
stage name, if there is no previous stage name. This means that if you set the
stage name on the first job of each stage, the build will work as expected.</p>

<p>For example, the following config is equivalent to the one above, but also adds a
second deploy job to the <code class="highlighter-rouge">deploy</code> stage that deploys to a different target. As
you can see, you only need to specify the stage name once:</p>

<div data-file=".travis.yml" class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">include</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">script</span><span class="pi">:</span> <span class="s">./test </span><span class="m">1</span> <span class="c1"># uses the default stage name "test"</span>
    <span class="pi">-</span> <span class="na">script</span><span class="pi">:</span> <span class="s">./test </span><span class="m">2</span>
    <span class="pi">-</span> <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy</span>
      <span class="na">script</span><span class="pi">:</span> <span class="s">./deploy target-1</span>
    <span class="pi">-</span> <span class="na">script</span><span class="pi">:</span> <span class="s">./deploy target-2</span>
</code></pre></div></div>

<h3 id="naming-your-jobs-within-build-stages">Naming Your Jobs within Build Stages <a href="#naming-your-jobs-within-build-stages" class="toc-anchor">#</a></h3>

<p>You can also name specific jobs within build stages. We recommend unique job names, but
do not enforce it (though this may change in the future). Jobs defined in the <code class="highlighter-rouge">jobs.include</code>
section can be given a name attribute as follows:</p>

<div data-file=".travis.yml" class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">include</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">stage</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Tests"</span>                <span class="c1"># naming the Tests stage</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Unit</span><span class="nv"> </span><span class="s">Tests"</span>            <span class="c1"># names the first Tests stage job</span>
      <span class="na">script</span><span class="pi">:</span> <span class="s">./unit-tests</span>
    <span class="pi">-</span> <span class="na">script</span><span class="pi">:</span> <span class="s">./integration-tests</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Integration</span><span class="nv"> </span><span class="s">Tests"</span>     <span class="c1"># names the second Tests stage job</span>
    <span class="pi">-</span> <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Deploy</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">GCP"</span>
      <span class="na">script</span><span class="pi">:</span> <span class="s">./deploy</span>
</code></pre></div></div>

<h2 id="build-stages-and-build-matrix-expansion">Build Stages and Build Matrix Expansion <a href="#build-stages-and-build-matrix-expansion" class="toc-anchor">#</a></h2>

<p><a href="/user/customizing-the-build/#build-matrix">Matrix expansion</a>
means that certain top level configuration keys expand into a matrix of jobs.</p>

<p>For example:</p>

<div data-file=".travis.yml" class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">rvm</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="m">2.3</span>
  <span class="pi">-</span> <span class="m">2.4</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">include</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy</span>
      <span class="na">rvm</span><span class="pi">:</span> <span class="m">2.4</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">FOO=foo</span>
      <span class="na">script</span><span class="pi">:</span> <span class="s">./deploy</span>
</code></pre></div></div>

<p>This will run two jobs on Ruby 2.3 and 2.4 respectively first and assign these
to the default stage test. The third job on the deploy stage starts only after
the test stage has completed successfully.</p>

<blockquote>
  <p>Each job included in <code class="highlighter-rouge">jobs.include</code> inherits the first value of the array
that defines a matrix dimension.
In the example above, without explicitly setting <code class="highlighter-rouge">rvm: 2.4</code>, the <code class="highlighter-rouge">include</code>d job inherits
<code class="highlighter-rouge">rvm: 2.3</code>.</p>
</blockquote>

<h2 id="specifying-stage-order-and-conditions">Specifying Stage Order and Conditions <a href="#specifying-stage-order-and-conditions" class="toc-anchor">#</a></h2>

<p>You can specify the order for stages in the section <code class="highlighter-rouge">stages</code>:</p>

<div data-file=".travis.yml" class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">compile</span>
  <span class="pi">-</span> <span class="s">test</span>
  <span class="pi">-</span> <span class="s">deploy</span>
</code></pre></div></div>

<p>This is mostly useful in order to “prepend” a stage to the <code class="highlighter-rouge">test</code> stage that
jobs resulting from the matrix expansion will be assigned to.</p>

<p>On the same section you can also specify conditions for stages, like so:</p>

<div data-file=".travis.yml" class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">compile</span>
  <span class="pi">-</span> <span class="s">test</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">deploy</span>
    <span class="na">if</span><span class="pi">:</span> <span class="s">branch = master</span>
</code></pre></div></div>

<p>See <a href="/user/conditional-builds-stages-jobs/">Conditional Builds, Stages, and Jobs</a> for more details on specifying conditions.</p>

<h2 id="build-stages-and-deployments">Build Stages and Deployments <a href="#build-stages-and-deployments" class="toc-anchor">#</a></h2>

<p>You can combine build stages with <a href="/user/deployment/">deployments</a>:</p>

<div data-file=".travis.yml" class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jobs</span><span class="pi">:</span>
  <span class="na">include</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">script</span><span class="pi">:</span> <span class="s">./test </span><span class="m">1</span> <span class="c1"># uses the default stage name "test"</span>
    <span class="pi">-</span> <span class="na">script</span><span class="pi">:</span> <span class="s">./test </span><span class="m">2</span>
    <span class="pi">-</span> <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy</span>
      <span class="na">script</span><span class="pi">:</span> <span class="s">skip</span>     <span class="c1"># usually you do not want to rerun any tests</span>
      <span class="na">deploy</span><span class="pi">:</span> <span class="nl">&amp;heroku</span>
        <span class="na">provider</span><span class="pi">:</span> <span class="s">heroku</span>
        <span class="c1"># ⋮</span>
</code></pre></div></div>

<p>Travis CI does not set or overwrite any of your scripts and most languages
have a <a href="/user/languages/ruby/#default-build-script">default test script</a>
defined. So in many use cases you might want to overwrite the <code class="highlighter-rouge">script</code> step by
specifying the keyword <code class="highlighter-rouge">skip</code> or <code class="highlighter-rouge">ignore</code>, in other cases you might want to
overwrite other steps, such as the <code class="highlighter-rouge">install</code> step that runs by default on
several languages.</p>

<h2 id="data-persistence-between-stages-and-jobs">Data Persistence between Stages and Jobs <a href="#data-persistence-between-stages-and-jobs" class="toc-anchor">#</a></h2>

<blockquote>
  <p>It is important to note that jobs do not share storage, as each job runs in a fresh VM or container.
If your jobs need to share files (e.g., using build artifacts from the “Test” stage for deployment in the
subsequent “Deploy” stage), you need to use an external storage mechanism such as S3 and a remote
<code class="highlighter-rouge">scp</code> server.</p>
</blockquote>

<p>See <a href="#sharing-files-between-jobs-via-s3">the S3 example</a> below.</p>

<h2 id="examples">Examples <a href="#examples" class="toc-anchor">#</a></h2>

<h3 id="deploying-to-heroku">Deploying to Heroku <a href="#deploying-to-heroku" class="toc-anchor">#</a></h3>

<p>An example with 5 stages:</p>

<ul>
  <li>Two jobs running unit tests in parallel on stage 1.</li>
  <li>One job deploying the application to Heroku staging.</li>
  <li>One job testing the staging deployment on Heroku.</li>
  <li>One job deploying the application to Heroku production.</li>
  <li>One job testing the production deployment on Heroku.</li>
</ul>

<p>You can find more <a href="/user/build-stages/deploy-heroku/">details here</a>.</p>

<h3 id="deploying-to-rubygems">Deploying to Rubygems <a href="#deploying-to-rubygems" class="toc-anchor">#</a></h3>

<p>This example has two build stages:</p>

<ul>
  <li>Two jobs that run tests against Ruby 2.2 and 2.3 respectively</li>
  <li>One job that publishes the gem to rubygems.org</li>
</ul>

<p>You can find more <a href="/user/build-stages/deploy-rubygems/">details here</a>.</p>

<h3 id="deploying-to-npm">Deploying to NPM <a href="#deploying-to-npm" class="toc-anchor">#</a></h3>

<p>This example has two build stages:</p>

<ul>
  <li>Four jobs that run tests against Node versions 4 to 7</li>
  <li>One job that deploys (releases) the package to NPM</li>
</ul>

<p>You can find more <a href="/user/build-stages/deploy-npm/">details here</a>.</p>

<h3 id="deploying-to-github-releases">Deploying to GitHub Releases <a href="#deploying-to-github-releases" class="toc-anchor">#</a></h3>

<p>This example has two build stages:</p>

<ul>
  <li>Four jobs that run tests</li>
  <li>One job that deploys to GitHub Releases</li>
</ul>

<p>You can find more <a href="/user/build-stages/deploy-github-releases/">details here</a>.</p>

<h3 id="combining-build-stages-with-matrix-expansion">Combining build stages with matrix expansion <a href="#combining-build-stages-with-matrix-expansion" class="toc-anchor">#</a></h3>

<p>This example has two build stages:</p>

<ul>
  <li>Four test jobs that have been expanded from <code class="highlighter-rouge">rvm</code> and <code class="highlighter-rouge">env</code> matrix keys.</li>
  <li>One deploy job.</li>
</ul>

<p>You can find more <a href="/user/build-stages/matrix-expansion/">details here</a>.</p>

<h3 id="warming-up-a-cache-with-expensive-dependencies">Warming up a cache with expensive dependencies <a href="#warming-up-a-cache-with-expensive-dependencies" class="toc-anchor">#</a></h3>

<p>This uses two build stages in order to warm up a cache with expensive dependencies, and optimize test run times:</p>

<ul>
  <li>One job that installs dependencies and warms up the cache for the given branch.</li>
  <li>Three jobs that run tests, using the cache.</li>
</ul>

<p>You can find more <a href="/user/build-stages/warm-cache/">details here</a>.</p>

<h3 id="sharing-a-docker-image">Sharing a Docker image <a href="#sharing-a-docker-image" class="toc-anchor">#</a></h3>

<p>This example has 2 build stages:</p>

<ul>
  <li>One job builds and pushes a Docker image</li>
  <li>Two jobs that pull and test the image</li>
</ul>

<p>You can find more <a href="/user/build-stages/share-docker-image/">details here</a>.</p>

<h3 id="sharing-files-between-jobs-via-s3">Sharing files between jobs via S3 <a href="#sharing-files-between-jobs-via-s3" class="toc-anchor">#</a></h3>

<p>This uses two build stages, sharing files from build stage 1 in stage 2:</p>

<ul>
  <li>Two jobs that set up files on S3.</li>
  <li>One job that uses both files from stage 1.</li>
</ul>

<p>You can find more <a href="/user/build-stages/share-files-s3/">details here</a>.</p>

<h3 id="defining-different-steps-on-different-stages">Defining different steps on different stages <a href="#defining-different-steps-on-different-stages" class="toc-anchor">#</a></h3>

<p>This example has 2 build stages:</p>

<ul>
  <li>Two jobs that run different suites of tests against Ruby 2.3.1</li>
  <li>One job that runs a custom deploy script that doesn’t require running the default <code class="highlighter-rouge">install</code> or <code class="highlighter-rouge">script</code> steps</li>
</ul>

<p>You can find more <a href="/user/build-stages/define-steps/">details here</a>.</p>

<h3 id="defining-steps-using-yaml-aliases">Defining steps using YAML aliases <a href="#defining-steps-using-yaml-aliases" class="toc-anchor">#</a></h3>

<p>This example uses YAML aliases to define steps. It has 3 build stages:</p>

<ul>
  <li>Two jobs that run tests against Ruby 2.2 and 2.3</li>
  <li>One job that deploys to staging</li>
  <li>Three jobs that run test against staging</li>
</ul>

<p>You can find more <a href="/user/build-stages/using-yaml-aliases/">details here</a>.</p>


        </main>
      </div><!-- /#content -->

      <footer class="footer">
  <div class="layout-inner">
    <div class="footer-elem">
      <svg width="142px" height="45.381px" viewBox="0 0 142 45.381" enable-background="new 0 0 142 45.381" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink= "http://www.w3.org/1999/xlink">
        <title>Travis CI Mascot</title>
        <image xlink:href="https://styleguide.travis-ci.com/images/logos/travis-footer-logo-new.svg" x="0" y="0" width="142px" height="45.381px" />
      </svg>
    </div>

    <div class="footer-elem"></div>

    <div class="footer-elem">
      <h3 class="footer-title">©Travis CI, GmbH</h3>
      <address>Rigaer Straße 8<br>10247 Berlin, Germany</address>
      <ul>
        <li><a href="https://travisci.workable.com/" title="Jobs at Travis CI">Work with Travis CI</a></li>
      </ul>
    </div>

    <div class="footer-elem">
      <h3 class="footer-title">Help</h3>
      <ul>
        <li><a href="https://docs.travis-ci.com" title="Travis CI Docs">Documentation</a></li>
        <li><a href="https://changelog.travis-ci.com/">Changelog</a></li>
        <li><a href="https://blog.travis-ci.com/" title="Travis CI Blog">Blog</a></li>
        <li><a href="mailto:support@travis-ci.com" title="Email Travis CI support">Email</a></li>
        <li><a href="https://twitter.com/travisci" title="Travis CI on Twitter">Twitter</a></li>
      </ul>
    </div>

    <div class="footer-elem">
      <h3 class="footer-title">Company</h3>
      <ul>
        <li><a href="/imprint.html" title="Imprint">Imprint</a></li>
        <li><a href="https://ideracorp.com/legal/TravisCI">Legal</a></li>
      </ul>
    </div>

    <div class="footer-elem">
      <h3 class="footer-title">Travis CI Status</h3>
      <ul>
        <li><div class="status-circle none">Status:</div>
          <a href="http://www.traviscistatus.com/">Travis CI Status</a>
        </li>
      </ul>
    </div>
  </div>
</footer>

<script>
 fetch('https://pnpcptp8xh9k.statuspage.io/api/v2/status.json').then(function(response) {
   return response.json();
 }).then(function(data) {
   if (data.status && data.status.indicator) {
     document.querySelector('.status-circle').classList.add(data.status.indicator);
   }
 });
</script>

    </div><!-- /.wrapper -->
  </body>
</html>
 contentType 9 text/html url 49 https://docs.travis-ci.com:443/user/build-stages/ responseCode 3 200 