wapsskhaoshkfaommcbelakolmrqgkzgyiheiohk length 5 61843 page 61843 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>






<!-- End Wayback Rewrite JS Include -->

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    
    <title>pytz - World Timezone Definitions for Python &mdash; pytz v2010e documentation</title>
    
    
    
    
    
     
  </head>
  <body>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li><a href="">pytz v2010e documentation</a> &raquo;</li> 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <div class="section" id="pytz-world-timezone-definitions-for-python">
<h1>pytz - World Timezone Definitions for Python<a class="headerlink" href="#pytz-world-timezone-definitions-for-python" title="Permalink to this headline">¶</a></h1>
<table class="docutils field-list" frame="void" rules="none">
<col class="field-name"/>
<col class="field-body"/>
<tbody valign="top">
<tr class="field"><th class="field-name">Author:</th><td class="field-body">Stuart Bishop &lt;<a class="reference external" href="https://web.archive.org/web/20111130085600/mailto:stuart%40stuartbishop.net">stuart<span>&#64;</span>stuartbishop<span>&#46;</span>net</a>&gt;</td>
</tr>
</tbody>
</table>
<div class="section" id="introduction">
<h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
<p>pytz brings the Olson tz database into Python. This library allows
accurate and cross platform timezone calculations using Python 2.3
or higher. It also solves the issue of ambiguous times at the end
of daylight savings, which you can read more about in the Python
Library Reference (<tt class="docutils literal"><span class="pre">datetime.tzinfo</span></tt>).</p>
<p>Amost all of the Olson timezones are supported.</p>
<p>Note that this library differs from the documented Python API for
tzinfo implementations; if you want to create local wallclock
times you need to use the <tt class="docutils literal"><span class="pre">localize()</span></tt> method documented in this
document. In addition, if you perform date arithmetic on local
times that cross DST boundaries, the results may be in an incorrect
timezone (ie. subtract 1 minute from 2002-10-27 1:00 EST and you get
2002-10-27 0:59 EST instead of the correct 2002-10-27 1:59 EDT). A
<tt class="docutils literal"><span class="pre">normalize()</span></tt> method is provided to correct this. Unfortunatly these
issues cannot be resolved without modifying the Python datetime
implementation.</p>
</div>
<div class="section" id="installation">
<h2>Installation<a class="headerlink" href="#installation" title="Permalink to this headline">¶</a></h2>
<p>This package can either be installed from a .egg file using setuptools,
or from the tarball using the standard Python distutils.</p>
<p>If you are installing from a tarball, run the following command as an
administrative user:</p>
<div class="highlight-python"><pre>python setup.py install</pre>
</div>
<p>If you are installing using setuptools, you don&#8217;t even need to download
anything as the latest version will be downloaded for you
from the Python package index:</p>
<div class="highlight-python"><pre>easy_install --upgrade pytz</pre>
</div>
<p>If you already have the .egg file, you can use that too:</p>
<div class="highlight-python"><pre>easy_install pytz-2008g-py2.6.egg</pre>
</div>
</div>
<div class="section" id="example-usage">
<h2>Example &amp; Usage<a class="headerlink" href="#example-usage" title="Permalink to this headline">¶</a></h2>
<div class="section" id="localized-times-and-date-arithmetic">
<h3>Localized times and date arithmetic<a class="headerlink" href="#localized-times-and-date-arithmetic" title="Permalink to this headline">¶</a></h3>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pytz</span> <span class="kn">import</span> <span class="n">timezone</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">pytz</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">utc</span> <span class="o">=</span> <span class="n">pytz</span><span class="o">.</span><span class="n">utc</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">utc</span><span class="o">.</span><span class="n">zone</span>
<span class="go">&#39;UTC&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">eastern</span> <span class="o">=</span> <span class="n">timezone</span><span class="p">(</span><span class="s">&#39;US/Eastern&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">eastern</span><span class="o">.</span><span class="n">zone</span>
<span class="go">&#39;US/Eastern&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">amsterdam</span> <span class="o">=</span> <span class="n">timezone</span><span class="p">(</span><span class="s">&#39;Europe/Amsterdam&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">fmt</span> <span class="o">=</span> <span class="s">&#39;%Y-%m-</span><span class="si">%d</span><span class="s"> %H:%M:%S %Z%z&#39;</span>
</pre></div>
</div>
<p>This library only supports two ways of building a localized time. The
first is to use the <tt class="docutils literal"><span class="pre">localize()</span></tt> method provided by the pytz library.
This is used to localize a naive datetime (datetime with no timezone
information):</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt</span> <span class="o">=</span> <span class="n">eastern</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">27</span><span class="p">,</span> <span class="mf">6</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="n">loc_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">2002-10-27 06:00:00 EST-0500</span>
</pre></div>
</div>
<p>The second way of building a localized time is by converting an existing
localized time using the standard <tt class="docutils literal"><span class="pre">astimezone()</span></tt> method:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">ams_dt</span> <span class="o">=</span> <span class="n">loc_dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">amsterdam</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ams_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 12:00:00 CET+0100&#39;</span>
</pre></div>
</div>
<p>Unfortunately using the tzinfo argument of the standard datetime
constructors &#8216;&#8217;does not work&#8217;&#8217; with pytz for many timezones.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">27</span><span class="p">,</span> <span class="mf">12</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">amsterdam</span><span class="p">)</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 12:00:00 AMT+0020&#39;</span>
</pre></div>
</div>
<p>It is safe for timezones without daylight savings trasitions though, such
as UTC:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">27</span><span class="p">,</span> <span class="mf">12</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">pytz</span><span class="o">.</span><span class="n">utc</span><span class="p">)</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 12:00:00 UTC+0000&#39;</span>
</pre></div>
</div>
<p>The preferred way of dealing with times is to always work in UTC,
converting to localtime only when generating output to be read
by humans.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">27</span><span class="p">,</span> <span class="mf">6</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">utc</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt</span> <span class="o">=</span> <span class="n">utc_dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">eastern</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 01:00:00 EST-0500&#39;</span>
</pre></div>
</div>
<p>This library also allows you to do date arithmetic using local
times, although it is more complicated than working in UTC as you
need to use the <tt class="docutils literal"><span class="pre">normalize()</span></tt> method to handle daylight savings time
and other timezone transitions. In this example, <tt class="docutils literal"><span class="pre">loc_dt</span></tt> is set
to the instant when daylight savings time ends in the US/Eastern
timezone.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">before</span> <span class="o">=</span> <span class="n">loc_dt</span> <span class="o">-</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mf">10</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">before</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 00:50:00 EST-0500&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">eastern</span><span class="o">.</span><span class="n">normalize</span><span class="p">(</span><span class="n">before</span><span class="p">)</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 01:50:00 EDT-0400&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">after</span> <span class="o">=</span> <span class="n">eastern</span><span class="o">.</span><span class="n">normalize</span><span class="p">(</span><span class="n">before</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="mf">20</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">after</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 01:10:00 EST-0500&#39;</span>
</pre></div>
</div>
<p>Creating localtimes is also tricky, and the reason why working with
local times is not recommended. Unfortunately, you cannot just pass
a <tt class="docutils literal"><span class="pre">tzinfo</span></tt> argument when constructing a datetime (see the next
section for more details)</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">27</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">30</span><span class="p">,</span> <span class="mf">0</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">dt1</span> <span class="o">=</span> <span class="n">eastern</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">dt1</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 01:30:00 EDT-0400&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">dt2</span> <span class="o">=</span> <span class="n">eastern</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">dt2</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 01:30:00 EST-0500&#39;</span>
</pre></div>
</div>
<p>Converting between timezones also needs special attention. This also
needs to use the <tt class="docutils literal"><span class="pre">normalize()</span></tt> method to ensure the conversion is
correct.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt</span> <span class="o">=</span> <span class="n">utc</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcfromtimestamp</span><span class="p">(</span><span class="mf">1143408899</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2006-03-26 21:34:59 UTC+0000&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">au_tz</span> <span class="o">=</span> <span class="n">timezone</span><span class="p">(</span><span class="s">&#39;Australia/Sydney&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">au_dt</span> <span class="o">=</span> <span class="n">au_tz</span><span class="o">.</span><span class="n">normalize</span><span class="p">(</span><span class="n">utc_dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">au_tz</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">au_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2006-03-27 08:34:59 EST+1100&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt2</span> <span class="o">=</span> <span class="n">utc</span><span class="o">.</span><span class="n">normalize</span><span class="p">(</span><span class="n">au_dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">utc</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt2</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2006-03-26 21:34:59 UTC+0000&#39;</span>
</pre></div>
</div>
<p>You can take shortcuts when dealing with the UTC side of timezone
conversions. <tt class="docutils literal"><span class="pre">normalize()</span></tt> and <tt class="docutils literal"><span class="pre">localize()</span></tt> are not really
necessary when there are no daylight savings time transitions to
deal with.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">utcfromtimestamp</span><span class="p">(</span><span class="mf">1143408899</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">tzinfo</span><span class="o">=</span><span class="n">utc</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2006-03-26 21:34:59 UTC+0000&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">au_tz</span> <span class="o">=</span> <span class="n">timezone</span><span class="p">(</span><span class="s">&#39;Australia/Sydney&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">au_dt</span> <span class="o">=</span> <span class="n">au_tz</span><span class="o">.</span><span class="n">normalize</span><span class="p">(</span><span class="n">utc_dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">au_tz</span><span class="p">))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">au_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2006-03-27 08:34:59 EST+1100&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt2</span> <span class="o">=</span> <span class="n">au_dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">utc</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt2</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2006-03-26 21:34:59 UTC+0000&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="tzinfo-api">
<h3><tt class="docutils literal"><span class="pre">tzinfo</span></tt> API<a class="headerlink" href="#tzinfo-api" title="Permalink to this headline">¶</a></h3>
<p>The <tt class="docutils literal"><span class="pre">tzinfo</span></tt> instances returned by the <tt class="docutils literal"><span class="pre">timezone()</span></tt> function have
been extended to cope with ambiguous times by adding an <tt class="docutils literal"><span class="pre">is_dst</span></tt>
parameter to then <tt class="docutils literal"><span class="pre">utcoffset()</span></tt>, <tt class="docutils literal"><span class="pre">dst()</span></tt> &amp;&amp; <tt class="docutils literal"><span class="pre">tzname()</span></tt> methods.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span> <span class="o">=</span> <span class="n">timezone</span><span class="p">(</span><span class="s">&#39;America/St_Johns&#39;</span><span class="p">)</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">normal</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mf">2009</span><span class="p">,</span> <span class="mf">9</span><span class="p">,</span> <span class="mf">1</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ambiguous</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mf">2009</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">31</span><span class="p">,</span> <span class="mf">23</span><span class="p">,</span> <span class="mf">30</span><span class="p">)</span>
</pre></div>
</div>
<p>the <tt class="docutils literal"><span class="pre">is_dst</span></tt> parameter is ignormed for most timestamps, but
is used to resolve the ambiguity during ambiguous periods caused
to DST transitions.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">utcoffset</span><span class="p">(</span><span class="n">normal</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="go">datetime.timedelta(-1, 77400)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">dst</span><span class="p">(</span><span class="n">normal</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="go">datetime.timedelta(0, 3600)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">tzname</span><span class="p">(</span><span class="n">normal</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="go">&#39;NDT&#39;</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">utcoffset</span><span class="p">(</span><span class="n">ambiguous</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="go">datetime.timedelta(-1, 77400)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">dst</span><span class="p">(</span><span class="n">ambiguous</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="go">datetime.timedelta(0, 3600)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">tzname</span><span class="p">(</span><span class="n">ambiguous</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="go">&#39;NDT&#39;</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">utcoffset</span><span class="p">(</span><span class="n">normal</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="go">datetime.timedelta(-1, 77400)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">dst</span><span class="p">(</span><span class="n">normal</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="go">datetime.timedelta(0, 3600)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">tzname</span><span class="p">(</span><span class="n">normal</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="go">&#39;NDT&#39;</span>
</pre></div>
</div>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">utcoffset</span><span class="p">(</span><span class="n">ambiguous</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="go">datetime.timedelta(-1, 73800)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">dst</span><span class="p">(</span><span class="n">ambiguous</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="go">datetime.timedelta(0)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">tzname</span><span class="p">(</span><span class="n">ambiguous</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="go">&#39;NST&#39;</span>
</pre></div>
</div>
<p>If <tt class="docutils literal"><span class="pre">is_dst</span></tt> is not specified, ambiguous timestamps will raise
an <tt class="docutils literal"><span class="pre">AmbiguousTimeError</span></tt> exception.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">utcoffset</span><span class="p">(</span><span class="n">normal</span><span class="p">)</span>
<span class="go">datetime.timedelta(-1, 77400)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">dst</span><span class="p">(</span><span class="n">normal</span><span class="p">)</span>
<span class="go">datetime.timedelta(0, 3600)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">tz</span><span class="o">.</span><span class="n">tzname</span><span class="p">(</span><span class="n">normal</span><span class="p">)</span>
<span class="go">&#39;NDT&#39;</span>
</pre></div>
</div>
<div class="highlight-python"><pre>&gt;&gt;&gt; tz.utcoffset(ambiguous)
Traceback (most recent call last):
[...]
AmbiguousTimeError: 2009-10-31 23:30:00
&gt;&gt;&gt; tz.dst(ambiguous)
Traceback (most recent call last):
[...]
AmbiguousTimeError: 2009-10-31 23:30:00
&gt;&gt;&gt; tz.tzname(ambiguous)
Traceback (most recent call last):
[...]
AmbiguousTimeError: 2009-10-31 23:30:00</pre>
</div>
</div>
</div>
<div class="section" id="problems-with-localtime">
<h2>Problems with Localtime<a class="headerlink" href="#problems-with-localtime" title="Permalink to this headline">¶</a></h2>
<p>The major problem we have to deal with is that certain datetimes
may occur twice in a year. For example, in the US/Eastern timezone
on the last Sunday morning in October, the following sequence
happens:</p>
<blockquote>
<ul class="simple">
<li>01:00 EDT occurs</li>
<li>1 hour later, instead of 2:00am the clock is turned back 1 hour
and 01:00 happens again (this time 01:00 EST)</li>
</ul>
</blockquote>
<p>In fact, every instant between 01:00 and 02:00 occurs twice. This means
that if you try and create a time in the &#8216;US/Eastern&#8217; timezone using
the standard datetime syntax, there is no way to specify if you meant
before of after the end-of-daylight-savings-time transition.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">27</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">30</span><span class="p">,</span> <span class="mf">00</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">eastern</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 01:30:00 EST-0500&#39;</span>
</pre></div>
</div>
<p>As you can see, the system has chosen one for you and there is a 50%
chance of it being out by one hour. For some applications, this does
not matter. However, if you are trying to schedule meetings with people
in different timezones or analyze log files it is not acceptable.</p>
<p>The best and simplest solution is to stick with using UTC.  The pytz
package encourages using UTC for internal timezone representation by
including a special UTC implementation based on the standard Python
reference implementation in the Python documentation.  This timezone
unpickles to be the same instance, and pickles to a relatively small
size.  The UTC implementation can be obtained as pytz.utc, pytz.UTC,
or pytz.timezone(&#8216;UTC&#8217;).</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">pickle</span><span class="o">,</span> <span class="nn">pytz</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mf">2005</span><span class="p">,</span> <span class="mf">3</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">14</span><span class="p">,</span> <span class="mf">13</span><span class="p">,</span> <span class="mf">21</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">utc</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">naive</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">tzinfo</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">dt</span><span class="p">,</span> <span class="mf">1</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">naive_p</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">naive</span><span class="p">,</span> <span class="mf">1</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">naive_p</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">naive_p</span><span class="p">)</span>
<span class="go">(60, 43, 17)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">new</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">new</span> <span class="o">==</span> <span class="n">dt</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">new</span> <span class="ow">is</span> <span class="n">dt</span>
<span class="go">False</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">new</span><span class="o">.</span><span class="n">tzinfo</span> <span class="ow">is</span> <span class="n">dt</span><span class="o">.</span><span class="n">tzinfo</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pytz</span><span class="o">.</span><span class="n">utc</span> <span class="ow">is</span> <span class="n">pytz</span><span class="o">.</span><span class="n">UTC</span> <span class="ow">is</span> <span class="n">pytz</span><span class="o">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">&#39;UTC&#39;</span><span class="p">)</span>
<span class="go">True</span>
</pre></div>
</div>
<p>Note that this instance is not the same instance (or implementation) as
other timezones with the same meaning (GMT, Greenwich, Universal, etc.).</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">utc</span> <span class="ow">is</span> <span class="n">pytz</span><span class="o">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">&#39;GMT&#39;</span><span class="p">)</span>
<span class="go">False</span>
</pre></div>
</div>
<p>If you insist on working with local times, this library provides a
facility for constructing them unambiguously:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">27</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">30</span><span class="p">,</span> <span class="mf">00</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">est_dt</span> <span class="o">=</span> <span class="n">eastern</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">loc_dt</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">edt_dt</span> <span class="o">=</span> <span class="n">eastern</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">loc_dt</span><span class="p">,</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">print</span> <span class="n">est_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">),</span> <span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="n">edt_dt</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">2002-10-27 01:30:00 EDT-0400 / 2002-10-27 01:30:00 EST-0500</span>
</pre></div>
</div>
<p>If you pass None as the is_dst flag to localize(), pytz will refuse to
guess and raise exceptions if you try to build ambiguous or non-existent
times.</p>
<p>For example, 1:30am on 27th Oct 2002 happened twice in the US/Eastern
timezone when the clocks where put back at the end of Daylight Savings
Time:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">eastern</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">27</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">30</span><span class="p">,</span> <span class="mf">00</span><span class="p">),</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">AmbiguousTimeError: 2002-10-27 01:30:00</span>
</pre></div>
</div>
<p>Similarly, 2:30am on 7th April 2002 never happened at all in the
US/Eastern timezone, as the clocks where put forward at 2:00am skipping
the entire hour:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">eastern</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">7</span><span class="p">,</span> <span class="mf">2</span><span class="p">,</span> <span class="mf">30</span><span class="p">,</span> <span class="mf">00</span><span class="p">),</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">NonExistentTimeError: 2002-04-07 02:30:00</span>
</pre></div>
</div>
<p>Both of these exceptions share a common base class to make error handling
easier:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="nb">isinstance</span><span class="p">(</span><span class="n">pytz</span><span class="o">.</span><span class="n">AmbiguousTimeError</span><span class="p">(),</span> <span class="n">pytz</span><span class="o">.</span><span class="n">InvalidTimeError</span><span class="p">)</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">isinstance</span><span class="p">(</span><span class="n">pytz</span><span class="o">.</span><span class="n">NonExistentTimeError</span><span class="p">(),</span> <span class="n">pytz</span><span class="o">.</span><span class="n">InvalidTimeError</span><span class="p">)</span>
<span class="go">True</span>
</pre></div>
</div>
<p>Although <tt class="docutils literal"><span class="pre">localize()</span></tt> handles many cases, it is still not possible
to handle all. In cases where countries change their timezone definitions,
cases like the end-of-daylight-savings-time occur with no way of resolving
the ambiguity. For example, in 1915 Warsaw switched from Warsaw time to
Central European time. So at the stroke of midnight on August 5th 1915
the clocks were wound back 24 minutes creating an ambiguous time period
that cannot be specified without referring to the timezone abbreviation
or the actual UTC offset. In this case midnight happened twice, neither
time during a daylight savings time period:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">warsaw</span> <span class="o">=</span> <span class="n">pytz</span><span class="o">.</span><span class="n">timezone</span><span class="p">(</span><span class="s">&#39;Europe/Warsaw&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt1</span> <span class="o">=</span> <span class="n">warsaw</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">datetime</span><span class="p">(</span><span class="mf">1915</span><span class="p">,</span> <span class="mf">8</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">23</span><span class="p">,</span> <span class="mf">59</span><span class="p">,</span> <span class="mf">59</span><span class="p">),</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt1</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;1915-08-04 23:59:59 WMT+0124&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt2</span> <span class="o">=</span> <span class="n">warsaw</span><span class="o">.</span><span class="n">localize</span><span class="p">(</span><span class="n">datetime</span><span class="p">(</span><span class="mf">1915</span><span class="p">,</span> <span class="mf">8</span><span class="p">,</span> <span class="mf">5</span><span class="p">,</span> <span class="mf">00</span><span class="p">,</span> <span class="mf">00</span><span class="p">,</span> <span class="mf">00</span><span class="p">),</span> <span class="n">is_dst</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">loc_dt2</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;1915-08-05 00:00:00 CET+0100&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">loc_dt2</span> <span class="o">-</span> <span class="n">loc_dt1</span><span class="p">)</span>
<span class="go">&#39;0:24:01&#39;</span>
</pre></div>
</div>
<p>The only way of creating a time during the missing 24 minutes is
converting from another timezone - because neither of the timezones
involved where in daylight savings mode the API simply provides no way
to express it:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mf">1915</span><span class="p">,</span> <span class="mf">8</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">22</span><span class="p">,</span> <span class="mf">36</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">pytz</span><span class="o">.</span><span class="n">utc</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">utc_dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">warsaw</span><span class="p">)</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
<span class="go">&#39;1915-08-04 23:36:00 CET+0100&#39;</span>
</pre></div>
</div>
<p>The standard Python way of handling all these ambiguities is not to
handle them, such as demonstrated in this example using the US/Eastern
timezone definition from the Python documentation (Note that this
implementation only works for dates between 1987 and 2006 - it is
included for tests only!):</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pytz.reference</span> <span class="kn">import</span> <span class="n">Eastern</span> <span class="c"># pytz.reference only for tests</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">dt</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">(</span><span class="mf">2002</span><span class="p">,</span> <span class="mf">10</span><span class="p">,</span> <span class="mf">27</span><span class="p">,</span> <span class="mf">0</span><span class="p">,</span> <span class="mf">30</span><span class="p">,</span> <span class="n">tzinfo</span><span class="o">=</span><span class="n">Eastern</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span>
<span class="go">&#39;2002-10-27 00:30:00-04:00&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">dt</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mf">1</span><span class="p">))</span>
<span class="go">&#39;2002-10-27 01:30:00-05:00&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">dt</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mf">2</span><span class="p">))</span>
<span class="go">&#39;2002-10-27 02:30:00-05:00&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">dt</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mf">3</span><span class="p">))</span>
<span class="go">&#39;2002-10-27 03:30:00-05:00&#39;</span>
</pre></div>
</div>
<p>Notice the first two results? At first glance you might think they are
correct, but taking the UTC offset into account you find that they are
actually two hours appart instead of the 1 hour we asked for.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pytz.reference</span> <span class="kn">import</span> <span class="n">UTC</span> <span class="c"># pytz.reference only for tests</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">UTC</span><span class="p">))</span>
<span class="go">&#39;2002-10-27 04:30:00+00:00&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">((</span><span class="n">dt</span> <span class="o">+</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mf">1</span><span class="p">))</span><span class="o">.</span><span class="n">astimezone</span><span class="p">(</span><span class="n">UTC</span><span class="p">))</span>
<span class="go">&#39;2002-10-27 06:30:00+00:00&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="country-information">
<h2>Country Information<a class="headerlink" href="#country-information" title="Permalink to this headline">¶</a></h2>
<p>A mechanism is provided to access the timezones commonly in use
for a particular country, looked up using the ISO 3166 country code.
It returns a list of strings that can be used to retrieve the relevant
tzinfo instance using <tt class="docutils literal"><span class="pre">pytz.timezone()</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">pytz</span><span class="o">.</span><span class="n">country_timezones</span><span class="p">[</span><span class="s">&#39;nz&#39;</span><span class="p">]</span>
<span class="go">[&#39;Pacific/Auckland&#39;, &#39;Pacific/Chatham&#39;]</span>
</pre></div>
</div>
<p>The Olson database comes with a ISO 3166 country code to English country
name mapping that pytz exposes as a dictionary:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">pytz</span><span class="o">.</span><span class="n">country_names</span><span class="p">[</span><span class="s">&#39;nz&#39;</span><span class="p">]</span>
<span class="go">&#39;New Zealand&#39;</span>
</pre></div>
</div>
</div>
<div class="section" id="what-is-utc">
<h2>What is UTC<a class="headerlink" href="#what-is-utc" title="Permalink to this headline">¶</a></h2>
<p>&#8216;UTC&#8217; is Universal Time, also known as Greenwich Mean Time or GMT
in the United Kingdom. All other timezones are given as offsets from
UTC. No daylight savings time occurs in UTC, making it a useful timezone
to perform date arithmetic without worrying about the confusion and
ambiguities caused by daylight savings time transitions, your country
changing its timezone, or mobile computers that move roam through
multiple timezones.</p>
</div>
<div class="section" id="helpers">
<h2>Helpers<a class="headerlink" href="#helpers" title="Permalink to this headline">¶</a></h2>
<p>There are two lists of timezones provided.</p>
<p><tt class="docutils literal"><span class="pre">all_timezones</span></tt> is the exhaustive list of the timezone names that can
be used.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pytz</span> <span class="kn">import</span> <span class="n">all_timezones</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">all_timezones</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mf">500</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;Etc/Greenwich&#39;</span> <span class="ow">in</span> <span class="n">all_timezones</span>
<span class="go">True</span>
</pre></div>
</div>
<p><tt class="docutils literal"><span class="pre">common_timezones</span></tt> is a list of useful, current timezones. It doesn&#8217;t
contain deprecated zones or historical zones, except for a few I&#8217;ve
deemed in common usage, such as US/Eastern (open a bug report if you
think other timezones are deserving of being included here). It is also
a sequence of strings.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pytz</span> <span class="kn">import</span> <span class="n">common_timezones</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">common_timezones</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">all_timezones</span><span class="p">)</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;Etc/Greenwich&#39;</span> <span class="ow">in</span> <span class="n">common_timezones</span>
<span class="go">False</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;Australia/Melbourne&#39;</span> <span class="ow">in</span> <span class="n">common_timezones</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;US/Eastern&#39;</span> <span class="ow">in</span> <span class="n">common_timezones</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;Canada/Eastern&#39;</span> <span class="ow">in</span> <span class="n">common_timezones</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;US/Pacific-New&#39;</span> <span class="ow">in</span> <span class="n">all_timezones</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;US/Pacific-New&#39;</span> <span class="ow">in</span> <span class="n">common_timezones</span>
<span class="go">False</span>
</pre></div>
</div>
<p>Both <tt class="docutils literal"><span class="pre">common_timezones</span></tt> and <tt class="docutils literal"><span class="pre">all_timezones</span></tt> are alphabetically
sorted:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">common_timezones_dupe</span> <span class="o">=</span> <span class="n">common_timezones</span><span class="p">[:]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">common_timezones_dupe</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">common_timezones</span> <span class="o">==</span> <span class="n">common_timezones_dupe</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">all_timezones_dupe</span> <span class="o">=</span> <span class="n">all_timezones</span><span class="p">[:]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">all_timezones_dupe</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">all_timezones</span> <span class="o">==</span> <span class="n">all_timezones_dupe</span>
<span class="go">True</span>
</pre></div>
</div>
<p><tt class="docutils literal"><span class="pre">all_timezones</span></tt> and <tt class="docutils literal"><span class="pre">common_timezones</span></tt> are also available as sets.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pytz</span> <span class="kn">import</span> <span class="n">all_timezones_set</span><span class="p">,</span> <span class="n">common_timezones_set</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;US/Eastern&#39;</span> <span class="ow">in</span> <span class="n">all_timezones_set</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;US/Eastern&#39;</span> <span class="ow">in</span> <span class="n">common_timezones_set</span>
<span class="go">True</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;Australia/Victoria&#39;</span> <span class="ow">in</span> <span class="n">common_timezones_set</span>
<span class="go">False</span>
</pre></div>
</div>
<p>You can also retrieve lists of timezones used by particular countries
using the <tt class="docutils literal"><span class="pre">country_timezones()</span></tt> function. It requires an ISO-3166
two letter country code.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pytz</span> <span class="kn">import</span> <span class="n">country_timezones</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">country_timezones</span><span class="p">(</span><span class="s">&#39;ch&#39;</span><span class="p">)</span>
<span class="go">[&#39;Europe/Zurich&#39;]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">country_timezones</span><span class="p">(</span><span class="s">&#39;CH&#39;</span><span class="p">)</span>
<span class="go">[&#39;Europe/Zurich&#39;]</span>
</pre></div>
</div>
</div>
<div class="section" id="license">
<h2>License<a class="headerlink" href="#license" title="Permalink to this headline">¶</a></h2>
<p>MIT license.</p>
<p>This code is also available as part of Zope 3 under the Zope Public
License,  Version 2.1 (ZPL).</p>
<p>I&#8217;m happy to relicense this code if necessary for inclusion in other
open source projects.</p>
</div>
<div class="section" id="latest-versions">
<h2>Latest Versions<a class="headerlink" href="#latest-versions" title="Permalink to this headline">¶</a></h2>
<p>This package will be updated after releases of the Olson timezone
database.  The latest version can be downloaded from the <a class="reference external" href="https://web.archive.org/web/20111130085600/http://pypi.python.org/pypi/pytz/">Python Package
Index</a>.  The code that is used
to generate this distribution is hosted on launchpad.net and available
using the <a class="reference external" href="https://web.archive.org/web/20111130085600/http://bazaar-vcs.org/">Bazaar version control system</a>
using:</p>
<div class="highlight-python"><pre>bzr branch lp:pytz</pre>
</div>
</div>
<div class="section" id="bugs-feature-requests-patches">
<h2>Bugs, Feature Requests &amp; Patches<a class="headerlink" href="#bugs-feature-requests-patches" title="Permalink to this headline">¶</a></h2>
<p>Bugs can be reported using <a class="reference external" href="https://web.archive.org/web/20111130085600/https://bugs.launchpad.net/pytz">Launchpad</a>.</p>
</div>
<div class="section" id="issues-limitations">
<h2>Issues &amp; Limitations<a class="headerlink" href="#issues-limitations" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Offsets from UTC are rounded to the nearest whole minute, so timezones
such as Europe/Amsterdam pre 1937 will be up to 30 seconds out. This
is a limitation of the Python datetime library.</li>
<li>If you think a timezone definition is incorrect, I probably can&#8217;t fix
it. pytz is a direct translation of the Olson timezone database, and
changes to the timezone definitions need to be made to this source.
If you find errors they should be reported to the time zone mailing
list, linked from <a class="reference external" href="https://web.archive.org/web/20111130085600/http://www.twinsun.com/tz/tz-link.htm">http://www.twinsun.com/tz/tz-link.htm</a></li>
</ul>
</div>
<div class="section" id="further-reading">
<h2>Further Reading<a class="headerlink" href="#further-reading" title="Permalink to this headline">¶</a></h2>
<p>More info than you want to know about timezones:
<a class="reference external" href="https://web.archive.org/web/20111130085600/http://www.twinsun.com/tz/tz-link.htm">http://www.twinsun.com/tz/tz-link.htm</a></p>
</div>
<div class="section" id="contact">
<h2>Contact<a class="headerlink" href="#contact" title="Permalink to this headline">¶</a></h2>
<p>Stuart Bishop &lt;<a class="reference external" href="https://web.archive.org/web/20111130085600/mailto:stuart%40stuartbishop.net">stuart<span>&#64;</span>stuartbishop<span>&#46;</span>net</a>&gt;</p>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper">
            <h3><a href="">Table Of Contents</a></h3>
            <ul>
<li><a class="reference external" href="">pytz - World Timezone Definitions for Python</a><ul>
<li><a class="reference external" href="#introduction">Introduction</a></li>
<li><a class="reference external" href="#installation">Installation</a></li>
<li><a class="reference external" href="#example-usage">Example &amp; Usage</a><ul>
<li><a class="reference external" href="#localized-times-and-date-arithmetic">Localized times and date arithmetic</a></li>
<li><a class="reference external" href="#tzinfo-api"><tt class="docutils literal"><span class="pre">tzinfo</span></tt> API</a></li>
</ul>
</li>
<li><a class="reference external" href="#problems-with-localtime">Problems with Localtime</a></li>
<li><a class="reference external" href="#country-information">Country Information</a></li>
<li><a class="reference external" href="#what-is-utc">What is UTC</a></li>
<li><a class="reference external" href="#helpers">Helpers</a></li>
<li><a class="reference external" href="#license">License</a></li>
<li><a class="reference external" href="#latest-versions">Latest Versions</a></li>
<li><a class="reference external" href="#bugs-feature-requests-patches">Bugs, Feature Requests &amp; Patches</a></li>
<li><a class="reference external" href="#issues-limitations">Issues &amp; Limitations</a></li>
<li><a class="reference external" href="#further-reading">Further Reading</a></li>
<li><a class="reference external" href="#contact">Contact</a></li>
</ul>
</li>
</ul>

            <h3>This Page</h3>
            <ul class="this-page-menu">
              <li><a href="_sources/index.txt" rel="nofollow">Show Source</a></li>
            </ul>
          <div id="searchbox" style="display: none">
            <h3>Quick search</h3>
              <form class="search" action="search.html" method="get">
                <input type="text" name="q" size="18"/>
                <input type="submit" value="Go"/>
                <input type="hidden" name="check_keywords" value="yes"/>
                <input type="hidden" name="area" value="default"/>
              </form>
              <p class="searchtip" style="font-size: 90%">
              Enter search terms or a module, class or function name.
              </p>
          </div>
          
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li><a href="">pytz v2010e documentation</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer">
      &copy; Copyright 2008, Stuart Bishop.
      Last updated on Mar 09, 2010.
      Created using <a href="https://web.archive.org/web/20111130085600/http://sphinx.pocoo.org/">Sphinx</a> 0.6.2.
    </div>
  </body>
</html><!--
     FILE ARCHIVED ON 08:56:00 Nov 30, 2011 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 11:00:26 Apr 28, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 0.804
  exclusion.robots: 0.197
  exclusion.robots.policy: 0.181
  cdx.remote: 0.08
  esindex: 0.011
  LoadShardBlock: 90.535 (3)
  PetaboxLoader3.datanode: 71.916 (4)
  PetaboxLoader3.resolve: 77.602 (2)
  load_resource: 97.846
--> contentType 9 text/html url 75 https://web.archive.org:443/web/20111130085600/http://pytz.sourceforge.net/ responseCode 3 200 